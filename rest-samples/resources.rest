@api-service = HD:2002

#@api-service = localhost:7071

@resource-id = d64bc5a5-f2d2-572c-bfbf-b99e5340c0d9

### POST Resource
POST http://{{api-service}}/api/resources
Content-Type: application/json

{"id":"c50f7543-6b69-5e46-ae5e-bf0b82dede0e","display":".NET Blog","status-code":200,"created":"2021-02-24T16:05:19.9163262+00:00","is-active":true,"type":"feed","description":"Free. Cross-platform. Open source. A developer platform for building all your apps.","self":"https://devblogs.microsoft.com/dotnet/feed/","published":"2021-02-23T18:45:59+00:00","cache":"\u003C?xml version=\u00221.0\u0022 encoding=\u0022UTF-8\u0022?\u003E\u003Crss version=\u00222.0\u0022\n\txmlns:content=\u0022http://purl.org/rss/1.0/modules/content/\u0022\n\txmlns:wfw=\u0022http://wellformedweb.org/CommentAPI/\u0022\n\txmlns:dc=\u0022http://purl.org/dc/elements/1.1/\u0022\n\txmlns:atom=\u0022http://www.w3.org/2005/Atom\u0022\n\txmlns:sy=\u0022http://purl.org/rss/1.0/modules/syndication/\u0022\n\txmlns:slash=\u0022http://purl.org/rss/1.0/modules/slash/\u0022\n\t\u003E\n\n\u003Cchannel\u003E\n\t\u003Ctitle\u003E.NET Blog\u003C/title\u003E\n\t\u003Catom:link href=\u0022https://devblogs.microsoft.com/dotnet/feed/\u0022 rel=\u0022self\u0022 type=\u0022application/rss\u002Bxml\u0022 /\u003E\n\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet\u003C/link\u003E\n\t\u003Cdescription\u003EFree. Cross-platform. Open source. A developer platform for building all your apps.\u003C/description\u003E\n\t\u003ClastBuildDate\u003ETue, 23 Feb 2021 18:45:59 \u002B0000\u003C/lastBuildDate\u003E\n\t\u003Clanguage\u003Een-US\u003C/language\u003E\n\t\u003Csy:updatePeriod\u003E\n\thourly\t\u003C/sy:updatePeriod\u003E\n\t\u003Csy:updateFrequency\u003E\n\t1\t\u003C/sy:updateFrequency\u003E\n\t\n\n\u003Cimage\u003E\n\t\u003Curl\u003Ehttps://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2018/10/Microsoft-Favicon.png\u003C/url\u003E\n\t\u003Ctitle\u003E.NET Blog\u003C/title\u003E\n\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet\u003C/link\u003E\n\t\u003Cwidth\u003E32\u003C/width\u003E\n\t\u003Cheight\u003E32\u003C/height\u003E\n\u003C/image\u003E \n\t\u003Citem\u003E\n\t\t\u003Ctitle\u003ESurvey: Library \u0026#038; Open Source\u003C/title\u003E\n\t\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet/survey-library-open-source/\u003C/link\u003E\n\t\t\t\t\t\u003Ccomments\u003Ehttps://devblogs.microsoft.com/dotnet/survey-library-open-source/#comments\u003C/comments\u003E\n\t\t\n\t\t\u003Cdc:creator\u003E\u003C![CDATA[Immo Landwerth]]\u003E\u003C/dc:creator\u003E\n\t\t\u003CpubDate\u003EMon, 22 Feb 2021 18:00:18 \u002B0000\u003C/pubDate\u003E\n\t\t\t\t\u003Ccategory\u003E\u003C![CDATA[.NET]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[.NET Core]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[open source]]\u003E\u003C/category\u003E\n\t\t\u003Cguid isPermaLink=\u0022false\u0022\u003Ehttps://devblogs.microsoft.com/dotnet/?p=31966\u003C/guid\u003E\n\n\t\t\t\t\t\u003Cdescription\u003E\u003C![CDATA[\u003Cp\u003EAre you an open source maintainer, contributor or consumer? Or are you building NuGet packages? Please take this 10 minute survey to share your pain points and concerns so we can make your experience better!\u003Cbr /\u003E\nTake the .NET open source \u0026#38;\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/survey-library-open-source/\u0022\u003ESurvey: Library \u0026#038; Open Source\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/description\u003E\n\t\t\t\t\t\t\t\t\t\t\u003Ccontent:encoded\u003E\u003C![CDATA[\u003Cp\u003EAre you an open source maintainer, contributor or consumer? Or are you building NuGet packages? Please take this 10 minute survey to share your pain points and concerns so we can make your experience better!\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://www.surveymonkey.com/r/MYXKKW8\u0022\u003ETake the .NET open source \u0026amp; library survey\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EAnd while you\u0026#8217;re at it: The .NET Foundation is also conducting a .NET developer survey and they would like you to participate to help them understand the community needs better in order to prioritize the work that they do. The survey will stay open until March 31, 2021 after which the anonymous results will be made public. As a thank you for filling out the survey, \u003Cstrong\u003Eyou can enter to win one of multiple $250USD gift certificates\u003C/strong\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://dotnetfoundation.org/about/survey\u0022\u003ETake the .NET Foundation \u0026#8220;State of .NET\u0026#8221; survey\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cimg class=\u0022aligncenter\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/survey-illustration-300x181-1.png\u0022 alt=\u0022Survey illustration\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003E\u003C!-- Survey links https://www.surveymonkey.com/r/MYS58LM - Twitter (dotnet, Visual Studio, dotnetfdtn) https://www.surveymonkey.com/r/MYXKKW8 - dotnet blog https://www.surveymonkey.com/r/MYFPRTV - dot.net web site https://www.surveymonkey.com/r/MYHPCDZ - .NET Foundation --\u003E\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/survey-library-open-source/\u0022\u003ESurvey: Library \u0026#038; Open Source\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/content:encoded\u003E\n\t\t\t\t\t\n\t\t\t\t\t\u003Cwfw:commentRss\u003Ehttps://devblogs.microsoft.com/dotnet/survey-library-open-source/feed/\u003C/wfw:commentRss\u003E\n\t\t\t\u003Cslash:comments\u003E1\u003C/slash:comments\u003E\n\t\t\n\t\t\n\t\t\t\u003C/item\u003E\n\t\t\u003Citem\u003E\n\t\t\u003Ctitle\u003ETune in for .NET Conf: Focus on Windows, February 25th\u003C/title\u003E\n\t\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet/tune-in-for-net-conf-focus-on-windows-february-25th/\u003C/link\u003E\n\t\t\t\t\t\u003Ccomments\u003Ehttps://devblogs.microsoft.com/dotnet/tune-in-for-net-conf-focus-on-windows-february-25th/#respond\u003C/comments\u003E\n\t\t\n\t\t\u003Cdc:creator\u003E\u003C![CDATA[Beth Massi]]\u003E\u003C/dc:creator\u003E\n\t\t\u003CpubDate\u003EMon, 22 Feb 2021 16:05:02 \u002B0000\u003C/pubDate\u003E\n\t\t\t\t\u003Ccategory\u003E\u003C![CDATA[.NET]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[WinForms]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[WPF]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[winforms]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[wpf]]\u003E\u003C/category\u003E\n\t\t\u003Cguid isPermaLink=\u0022false\u0022\u003Ehttps://devblogs.microsoft.com/dotnet/?p=31979\u003C/guid\u003E\n\n\t\t\t\t\t\u003Cdescription\u003E\u003C![CDATA[\u003Cp\u003EThe .NET Conf team is bringing you another \u0026#8220;.NET Conf: Focus\u0026#8221; event Thursday, February 25 all about building Windows desktop apps. We have finalized the agenda, speakers, and hosts that will make the day educational and fun. We have .NET and Windows team members along with community speakers and MVPs to show you some amazing things you can do.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/tune-in-for-net-conf-focus-on-windows-february-25th/\u0022\u003ETune in for .NET Conf: Focus on Windows, February 25th\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/description\u003E\n\t\t\t\t\t\t\t\t\t\t\u003Ccontent:encoded\u003E\u003C![CDATA[\u003Cp\u003E\u003Ca href=\u0022https://focus.dotnetconf.net\u0022\u003E\u003Cimg class=\u0022aligncenter\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/banner.png\u0022 alt=\u0022.NET Conf: Focus on Windows\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EThe .NET Conf team is bringing you another \u0026#8220;.NET Conf: Focus\u0026#8221; event \u003Cstrong\u003EThursday, February 25\u003C/strong\u003E all about building Windows desktop apps. We have finalized the agenda, speakers, and hosts that will make the day educational and fun. We have .NET and Windows team members along with community speakers and MVPs to show you some amazing things you can do.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://focus.dotnetconf.net/agenda?utm_campaign=savedate\u0026amp;utm_medium=email\u0026amp;utm_source=dotnetconf\u0022\u003ECheck out the agenda and save the date!\u003C/a\u003E\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003EI had the pleasure of talking with Leslie on the Visual Studio Toolbox show all about the event and some of the history and behind the scenes tid bits about the .NET Conf series. It\u0026#8217;s a short 15 minute interview so check it out.\u003C/p\u003E\n\u003Cp\u003E\u003Ciframe width=\u0022560\u0022 height=\u0022315\u0022 src=\u0022https://www.youtube.com/embed/eUR92oqdBjA\u0022 allowfullscreen\u003E\u003C/iframe\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003ETune into \u003Ca href=\u0022https://focus.dotnetconf.net/?utm_campaign=savedate\u0026amp;utm_medium=email\u0026amp;utm_source=dotnetconf\u0022\u003Efocus.dotnetconf.net\u003C/a\u003E on February 25, 2021\u003C/strong\u003E. See how you can move your Windows apps forward to take advantage of modern platforms, components, and tools no matter what .NET app model you\u0026#8217;re using. Learn why and how to upgrade WPF and Windows Forms apps to .NET 5, see Visual Studio tooling improvements, learn how to leverage cloud services from your client apps, and a whole lot more. You\u0026#8217;ll also see what the future of native device development will look like in .NET 6.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003ETune in live and ask your questions\u003C/strong\u003E on Twitter using the hashtag \u003Ca href=\u0022https://twitter.com/search?q=%23dotnetconf\u0022\u003E#dotNETConf\u003C/a\u003E and our hosts will relay them to the speakers during the session.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EGet some \u003Ca href=\u0022https://focus.dotnetconf.net/swag?utm_campaign=savedate\u0026amp;utm_source=dotnetconf\u0026amp;utm_medium=email\u0022\u003Efree digital swag and virtual swag bags\u003C/a\u003E.\u003C/strong\u003E\nEnter to win 1 of 25 epic swag bags with prizes from our generous sponsors. Each one is valued at close to $2,000USD and includes software licenses, t-shirts, socks, and more.\u003C/p\u003E\n\u003Cp\u003EDownload free digital swag like wallpapers, themes, 3D printable items, and more. You can also create your own coding companion by building your own custom dotnet-bot at \u003Ca href=\u0022https://mod-dotnet-bot.net/\u0022\u003Emod-dotnet-bot.net\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EWhat is .NET Conf: Focus?\u003C/strong\u003E \u0026#8220;Focus\u0026#8221; is a series of smaller, live events that we deliver to you throughout the year that are focused on specific things you can do with .NET. Of course, we will still have our big .NET Conf event in November for the .NET 6 launch. \u003Ca href=\u0022https://github.com/dotnet-presentations/dotNETConf/tree/master/2020\u0022\u003EYou can check out the past events here\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://focus.dotnetconf.net/?utm_campaign=savedate\u0026amp;utm_medium=email\u0026amp;utm_source=dotnetconf\u0022\u003ETune in on February 25\u003C/a\u003E\u003C/strong\u003E, ask questions live and learn how to move your Windows apps forward. As with all live events, you may also witness hijinks, calamity, successes and failures all at the same time a cat walks across a keyboard. We can guarantee you will have fun and learn some things.\u003C/p\u003E\n\u003Cp\u003ESee you there!\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/tune-in-for-net-conf-focus-on-windows-february-25th/\u0022\u003ETune in for .NET Conf: Focus on Windows, February 25th\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/content:encoded\u003E\n\t\t\t\t\t\n\t\t\t\t\t\u003Cwfw:commentRss\u003Ehttps://devblogs.microsoft.com/dotnet/tune-in-for-net-conf-focus-on-windows-february-25th/feed/\u003C/wfw:commentRss\u003E\n\t\t\t\u003Cslash:comments\u003E0\u003C/slash:comments\u003E\n\t\t\n\t\t\n\t\t\t\u003C/item\u003E\n\t\t\u003Citem\u003E\n\t\t\u003Ctitle\u003EAnnouncing Entity Framework Core 6.0 Preview 1\u003C/title\u003E\n\t\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-1/\u003C/link\u003E\n\t\t\t\t\t\u003Ccomments\u003Ehttps://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-1/#comments\u003C/comments\u003E\n\t\t\n\t\t\u003Cdc:creator\u003E\u003C![CDATA[Jeremy Likness]]\u003E\u003C/dc:creator\u003E\n\t\t\u003CpubDate\u003EWed, 17 Feb 2021 18:30:08 \u002B0000\u003C/pubDate\u003E\n\t\t\t\t\u003Ccategory\u003E\u003C![CDATA[.NET]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[.NET Core]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[C#]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[Entity Framework]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[Entity Framework Core]]\u003E\u003C/category\u003E\n\t\t\u003Cguid isPermaLink=\u0022false\u0022\u003Ehttps://devblogs.microsoft.com/dotnet/?p=31871\u003C/guid\u003E\n\n\t\t\t\t\t\u003Cdescription\u003E\u003C![CDATA[\u003Cp\u003EToday, the Entity Framework Core team announces the first preview release of\u003Cbr /\u003E\nEF Core 6.0.\u003Cbr /\u003E\nThis release includes new attributes, built-in functions, and database-specific improvements to SQLite and SQL Server capabilities.\u003Cbr /\u003E\nPrerequisites\u003C/p\u003E\n\u003Cp\u003EEF Core 6.0 currently targets .NET 5. This will likely be updated to .NET 6 as we near the release.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-1/\u0022\u003EAnnouncing Entity Framework Core 6.0 Preview 1\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/description\u003E\n\t\t\t\t\t\t\t\t\t\t\u003Ccontent:encoded\u003E\u003C![CDATA[\u003Cp\u003EToday, the Entity Framework Core team announces the first preview release of\n\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/6.0.0-preview.1.21102.2\u0022\u003EEF Core 6.0\u003C/a\u003E.\nThis release includes new attributes, built-in functions, and database-specific improvements to SQLite and SQL Server capabilities.\u003C/p\u003E\n\u003Ch2 id=\u0022prerequisites\u0022\u003EPrerequisites\u003C/h2\u003E\n\u003Cul\u003E\n\u003Cli\u003EEF Core 6.0 currently targets .NET 5. This will likely be updated to .NET 6 as we near the release. EF Core 6.0 does not target any .NET Standard version; for more information see \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/\u0022\u003Ethe future of .NET Standard\u003C/a\u003E.\u003C/li\u003E\n\u003Cli\u003EEF Core 6.0 will not run on .NET Framework.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Chr /\u003E\n\u003Ch2 id=\u0022how-to-get-ef-core-6-0-previews\u0022\u003EHow to get EF Core 6.0 previews\u003C/h2\u003E\n\u003Cp\u003EEF Core is distributed exclusively as a set of NuGet packages.\nFor example, to add the SQL Server provider to your project, you can use the following command using the dotnet tool:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-bash\u0022\u003E\u003Cspan class=\u0022hljs-selector-tag\u0022\u003Edotnet\u003C/span\u003E \u003Cspan class=\u0022hljs-selector-tag\u0022\u003Eadd\u003C/span\u003E \u003Cspan class=\u0022hljs-selector-tag\u0022\u003Epackage\u003C/span\u003E \u003Cspan class=\u0022hljs-selector-tag\u0022\u003EMicrosoft\u003C/span\u003E\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.EntityFrameworkCore\u003C/span\u003E\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.SqlServer\u003C/span\u003E \u003Cspan class=\u0022hljs-selector-tag\u0022\u003E--version\u003C/span\u003E 6\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.0\u003C/span\u003E\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.0-preview\u003C/span\u003E\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.1\u003C/span\u003E\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.21102\u003C/span\u003E\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.2\u003C/span\u003E\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis following table links to the preview 1 versions of the EF Core packages and describes what they are used for.\u003C/p\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth style=\u0022text-align: right;\u0022\u003E\u003Cstrong\u003EPackage\u003C/strong\u003E\u003C/th\u003E\n\u003Cth style=\u0022text-align: left;\u0022\u003E\u003Cstrong\u003EPurpose\u003C/strong\u003E\u003C/th\u003E\n\u003C/tr\u003E\n\u003C/thead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EThe main EF Core package that is independent of specific database providers\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.SqlServer/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.SqlServer\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EDatabase provider for Microsoft SQL Server and SQL Azure\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.SqlServer.NetTopologySuite\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003ESQL Server support for spatial types\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.Sqlite\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EDatabase provider for SQLite that includes the native binary for the database engine\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite.Core/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.Sqlite.Core\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EDatabase provider for SQLite \u003Cem\u003Ewithout\u003C/em\u003E a packaged native binary\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.Sqlite.NetTopologySuite\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003ESQLite support for spatial types\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Cosmos/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.Cosmos\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EDatabase provider for Azure Cosmos DB\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.InMemory/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.InMemory\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EThe in-memory database provider\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Tools/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.Tools\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EEF Core PowerShell commands for the Visual Studio Package Manager Console; use this to integrate tools like \u003Ca href=\u0022https://docs.microsoft.com/ef/core/managing-schemas/scaffolding\u0022\u003Escaffolding\u003C/a\u003E and \u003Ca href=\u0022https://docs.microsoft.com/ef/core/managing-schemas/migrations/\u0022\u003Emigrations\u003C/a\u003E with Visual Studio\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Design/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.Design\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EShared design-time components for EF Core tools\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Proxies/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.Proxies\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003ELazy-loading and change-tracking proxies\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Abstractions/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.Abstractions\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EDecoupled EF Core abstractions; use this for features like extended data annotations defined by EF Core\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Relational/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.Relational\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EShared EF Core components for relational database providers\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\u0022text-align: right;\u0022\u003E\u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Analyzers/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.EntityFrameworkCore.Analyzers\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022text-align: left;\u0022\u003EC# analyzers for EF Core\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/tbody\u003E\n\u003C/table\u003E\n\u003Cp\u003EWe also published the 6.0 preview 1 release of the \u003Ca href=\u0022https://www.nuget.org/packages/Microsoft.Data.Sqlite.Core/6.0.0-preview.1.21102.2\u0022\u003EMicrosoft.Data.Sqlite.Core\u003C/a\u003E provider for \u003Ca href=\u0022https://docs.microsoft.com/dotnet/framework/data/adonet/ado-net-overview\u0022\u003EADO.NET\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022installing-the-ef-core-command-line-interface-cli-\u0022\u003EInstalling the EF Core Command Line Interface (CLI)\u003C/h2\u003E\n\u003Cp\u003EAs with EF Core 3.0 and 3.1, the EF Core CLI is no longer included in the .NET Core SDK. Before you can execute EF Core migration or scaffolding commands,\nyou\u0026#8217;ll have to install this package as either a global or local tool.\u003C/p\u003E\n\u003Cp\u003ETo install the preview tool globally, first uninstall any existing version with:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-bash\u0022\u003Edotnet tool \u003Cspan class=\u0022hljs-keyword\u0022\u003Euninstall\u003C/span\u003E \u003Cspan class=\u0022hljs-comment\u0022\u003E--global dotnet-ef\u003C/span\u003E\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThen install with:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-bash\u0022\u003E\u003Cspan class=\u0022hljs-selector-tag\u0022\u003Edotnet\u003C/span\u003E \u003Cspan class=\u0022hljs-selector-tag\u0022\u003Etool\u003C/span\u003E \u003Cspan class=\u0022hljs-selector-tag\u0022\u003Einstall\u003C/span\u003E \u003Cspan class=\u0022hljs-selector-tag\u0022\u003E--global\u003C/span\u003E \u003Cspan class=\u0022hljs-selector-tag\u0022\u003Edotnet-ef\u003C/span\u003E \u003Cspan class=\u0022hljs-selector-tag\u0022\u003E--version\u003C/span\u003E 6\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.0\u003C/span\u003E\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.0-preview\u003C/span\u003E\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.1\u003C/span\u003E\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.21102\u003C/span\u003E\u003Cspan class=\u0022hljs-selector-class\u0022\u003E.2\u003C/span\u003E\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EIt\u0026#8217;s possible to use this new version of the EF Core CLI with projects that use older versions of the EF Core runtime.\u003C/p\u003E\n\u003Chr /\u003E\n\u003Ch2 id=\u0022what-s-new-in-ef-core-6-preview-1\u0022\u003EWhat\u0026#8217;s New in EF Core 6 Preview 1\u003C/h2\u003E\n\u003Cp\u003EWe maintain documentation covering \u003Ca href=\u0022https://docs.microsoft.com/ef/core/what-is-new/ef-core-6.0/whatsnew\u0022\u003Enew features introduced into each preview\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003ESome of the highlights from preview 1 are called out below. This preview also includes several bug fixes.\u003C/p\u003E\n\u003Cblockquote\u003E\u003Cp\u003E\u003Cstrong\u003ETIP\u003C/strong\u003E\nYou can run and debug into all the preview 1 samples shown below by \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/tree/master/samples/core/Miscellaneous/NewInEFCore6\u0022\u003Edownloading the sample code from GitHub\u003C/a\u003E.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Ch3 id=\u0022unicodeattribute\u0022\u003EUnicodeAttribute\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/19794\u0022\u003E#19794\u003C/a\u003E. This feature was contributed by \u003Ca href=\u0022https://github.com/RaymondHuy\u0022\u003E@RaymondHuy\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EStarting with EF Core 6.0, a string property can now be mapped to a non-Unicode column using a mapping attribute \u003Cem\u003Ewithout specifying the database type directly\u003C/em\u003E. For example, consider a \u003Ccode\u003EBook\u003C/code\u003E entity type with a property for the \u003Ca href=\u0022https://en.wikipedia.org/wiki/International_Standard_Book_Number\u0022\u003EInternational Standard Book Number (ISBN)\u003C/a\u003E in the form \u0026#8220;ISBN 978-3-16-148410-0\u0026#8221;:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EBook\u003C/span\u003E\r\n    {\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eint\u003C/span\u003E Id { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Estring\u003C/span\u003E Title { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n\r\n        [Unicode(\u003Cspan class=\u0022hljs-literal\u0022\u003Efalse\u003C/span\u003E)]\r\n        [MaxLength(\u003Cspan class=\u0022hljs-number\u0022\u003E22\u003C/span\u003E)]\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Estring\u003C/span\u003E Isbn { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n    }\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003ESince ISBNs cannot contain any non-unicode characters, the \u003Ccode\u003EUnicode\u003C/code\u003E attribute will cause a non-Unicode string type to be used. In addition, \u003Ccode\u003EMaxLength\u003C/code\u003E is used to limit the size of the database column. For example, when using SQL Server, this results in a database column of \u003Ccode\u003Evarchar(22)\u003C/code\u003E:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-sql\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003ECREATE\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003ETABLE\u003C/span\u003E [Book] (\r\n    [\u003Cspan class=\u0022hljs-keyword\u0022\u003EId\u003C/span\u003E] \u003Cspan class=\u0022hljs-built_in\u0022\u003Eint\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003ENOT\u003C/span\u003E \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003EIDENTITY\u003C/span\u003E,\r\n    [Title] \u003Cspan class=\u0022hljs-keyword\u0022\u003Envarchar\u003C/span\u003E(\u003Cspan class=\u0022hljs-keyword\u0022\u003Emax\u003C/span\u003E) \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E,\r\n    [Isbn] \u003Cspan class=\u0022hljs-built_in\u0022\u003Evarchar\u003C/span\u003E(\u003Cspan class=\u0022hljs-number\u0022\u003E22\u003C/span\u003E) \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E,\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003ECONSTRAINT\u003C/span\u003E [PK_Book] PRIMARY \u003Cspan class=\u0022hljs-keyword\u0022\u003EKEY\u003C/span\u003E ([\u003Cspan class=\u0022hljs-keyword\u0022\u003EId\u003C/span\u003E]));\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cblockquote\u003E\u003Cp\u003E\u003Cstrong\u003ENOTE\u003C/strong\u003E\nEF Core maps string properties to Unicode columns by default. \u003Ccode\u003EUnicodeAttribute\u003C/code\u003E is ignored when the database system supports only Unicode types.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Ch3 id=\u0022precisionattribute\u0022\u003EPrecisionAttribute\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/17914\u0022\u003E#17914\u003C/a\u003E. This feature was contributed by \u003Ca href=\u0022https://github.com/RaymondHuy\u0022\u003E@RaymondHuy\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EThe precision and scale of a database column can now be configured using mapping attributes \u003Cem\u003Ewithout specifying the database type directly\u003C/em\u003E. For example, consider a \u003Ccode\u003EProduct\u003C/code\u003E entity type with a decimal \u003Ccode\u003EPrice\u003C/code\u003E property:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EProduct\u003C/span\u003E\r\n    {\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eint\u003C/span\u003E Id { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n\r\n        [Precision(precision: \u003Cspan class=\u0022hljs-number\u0022\u003E10\u003C/span\u003E, scale: \u003Cspan class=\u0022hljs-number\u0022\u003E2\u003C/span\u003E)]\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Edecimal\u003C/span\u003E Price { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n    }\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EEF Core will map this property to a database column with precision 10 and scale 2. For example, on SQL Server:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-sql\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003ECREATE\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003ETABLE\u003C/span\u003E [Product] (\r\n    [\u003Cspan class=\u0022hljs-keyword\u0022\u003EId\u003C/span\u003E] \u003Cspan class=\u0022hljs-built_in\u0022\u003Eint\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003ENOT\u003C/span\u003E \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003EIDENTITY\u003C/span\u003E,\r\n    [Price] \u003Cspan class=\u0022hljs-built_in\u0022\u003Edecimal\u003C/span\u003E(\u003Cspan class=\u0022hljs-number\u0022\u003E10\u003C/span\u003E,\u003Cspan class=\u0022hljs-number\u0022\u003E2\u003C/span\u003E) \u003Cspan class=\u0022hljs-keyword\u0022\u003ENOT\u003C/span\u003E \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E,\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003ECONSTRAINT\u003C/span\u003E [PK_Product] PRIMARY \u003Cspan class=\u0022hljs-keyword\u0022\u003EKEY\u003C/span\u003E ([\u003Cspan class=\u0022hljs-keyword\u0022\u003EId\u003C/span\u003E]));\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch3 id=\u0022entitytypeconfigurationattribute\u0022\u003EEntityTypeConfigurationAttribute\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/23163\u0022\u003E#23163\u003C/a\u003E. This feature was contributed by \u003Ca href=\u0022https://github.com/KaloyanIT\u0022\u003E@KaloyanIT\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Ccode\u003EIEntityTypeConfiguration\u003C/code\u003E instances allow \u003Ccode\u003EModelBuilder\u003C/code\u003E configuration for a each entity type to be contained in its own configuration class. For example:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-class\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EBookConfiguration\u003C/span\u003E : \u003Cspan class=\u0022hljs-title\u0022\u003EIEntityTypeConfiguration\u003C/span\u003E\u0026lt;\u003Cspan class=\u0022hljs-title\u0022\u003EBook\u003C/span\u003E\u0026gt;\r\n\u003C/span\u003E{\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Evoid\u003C/span\u003E Configure(EntityTypeBuilder\u0026lt;Book\u0026gt; builder)\r\n    {\r\n        builder\r\n            .Property(e =\u0026gt; e.Isbn)\r\n            .IsUnicode(\u003Cspan class=\u0022hljs-literal\u0022\u003Efalse\u003C/span\u003E)\r\n            .HasMaxLength(\u003Cspan class=\u0022hljs-number\u0022\u003E22\u003C/span\u003E);\r\n    }\r\n}\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003ENormally, this configuration class must be instantiated and called into from \u003Ccode\u003EOnModelCreating\u003C/code\u003E. For example:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E\u003Cspan class=\u0022hljs-function\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003Eprotected\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eoverride\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Evoid\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EOnModelCreating\u003C/span\u003E(\u003Cspan class=\u0022hljs-params\u0022\u003EModelBuilder modelBuilder\u003C/span\u003E)\r\n\u003C/span\u003E{\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003Enew\u003C/span\u003E BookConfiguration().Configure(modelBuilder.Entity\u0026lt;Book\u0026gt;());\r\n}\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EStarting with EF Core 6.0, an \u003Ccode\u003EEntityTypeConfigurationAttribute\u003C/code\u003E can be placed on the entity type such that EF Core can find and use appropriate configuration. For example:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E[EntityTypeConfiguration(\u003Cspan class=\u0022hljs-keyword\u0022\u003Etypeof\u003C/span\u003E(BookConfiguration))]\r\n\u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EBook\u003C/span\u003E\r\n{\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eint\u003C/span\u003E Id { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Estring\u003C/span\u003E Title { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Estring\u003C/span\u003E Isbn { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n}\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis attribute means that EF Core will use the specified \u003Ccode\u003EIEntityTypeConfiguration\u003C/code\u003E implementation whenever the \u003Ccode\u003EBook\u003C/code\u003E entity type is included in a model. The entity type is included in a model using one of the normal mechanisms. For example, by creating a \u003Ccode\u003EDbSet\u003C/code\u003E property for the entity type:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-class\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EBooksContext\u003C/span\u003E : \u003Cspan class=\u0022hljs-type\u0022\u003EDbContext\u003C/span\u003E\u003C/span\u003E\r\n{\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E DbSet\u0026lt;Book\u0026gt; Books { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n\r\n    \u003Cspan class=\u0022hljs-comment\u0022\u003E//...\u003C/span\u003E\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EOr by registering it in \u003Ccode\u003EOnModelCreating\u003C/code\u003E:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E\u003Cspan class=\u0022hljs-function\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003Eprotected\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eoverride\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Evoid\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EOnModelCreating\u003C/span\u003E(\u003Cspan class=\u0022hljs-params\u0022\u003EModelBuilder modelBuilder\u003C/span\u003E)\r\n\u003C/span\u003E{\r\n    modelBuilder.Entity\u0026lt;Book\u0026gt;();\r\n}\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cblockquote\u003E\u003Cp\u003E\u003Cstrong\u003ENOTE\u003C/strong\u003E\n\u003Ccode\u003EEntityTypeConfigurationAttribute\u003C/code\u003E types will not be automatically discovered in an assembly. Entity types must be added to the model before the attribute will be discovered on that entity type.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Ch3 id=\u0022translate-tostring-on-sqlite\u0022\u003ETranslate ToString on SQLite\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/17223\u0022\u003E#17223\u003C/a\u003E. This feature was contributed by \u003Ca href=\u0022https://github.com/ralmsdeveloper\u0022\u003E@ralmsdeveloper\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003ECalls to \u003Ccode\u003EToString\u003C/code\u003E are now translated to SQL when using the SQLite database provider. This can be useful for text searches involving non-string columns. For example, consider a \u003Ccode\u003EUser\u003C/code\u003E entity type that stores phone numbers as numeric values:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EUser\u003C/span\u003E\r\n    {\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eint\u003C/span\u003E Id { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Estring\u003C/span\u003E Username { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Elong\u003C/span\u003E PhoneNumber { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n    }\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003E\u003Ccode\u003EToString\u003C/code\u003E can be used to convert the number to a string in the database. We can then use this string with a function such as \u003Ccode\u003ELIKE\u003C/code\u003E to find numbers that match a pattern. For example, to find all numbers containing 555:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003Evar\u003C/span\u003E users = context.Users.Where(\u003Cspan class=\u0022hljs-function\u0022\u003E\u003Cspan class=\u0022hljs-params\u0022\u003Eu\u003C/span\u003E =\u0026gt;\u003C/span\u003E EF.Functions.Like(u.PhoneNumber.ToString(), \u003Cspan class=\u0022hljs-string\u0022\u003E\u0022%555%\u0022\u003C/span\u003E)).ToList();\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis translates to the following SQL when using a SQLite database:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-sql\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003ESELECT\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003ECOUNT\u003C/span\u003E(*)\r\n\u003Cspan class=\u0022hljs-keyword\u0022\u003EFROM\u003C/span\u003E \u003Cspan class=\u0022hljs-string\u0022\u003E\u0022Users\u0022\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003EAS\u003C/span\u003E \u003Cspan class=\u0022hljs-string\u0022\u003E\u0022u\u0022\u003C/span\u003E\r\n\u003Cspan class=\u0022hljs-keyword\u0022\u003EWHERE\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003ECAST\u003C/span\u003E(\u003Cspan class=\u0022hljs-string\u0022\u003E\u0022u\u0022\u003C/span\u003E.\u003Cspan class=\u0022hljs-string\u0022\u003E\u0022PhoneNumber\u0022\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003EAS\u003C/span\u003E \u003Cspan class=\u0022hljs-built_in\u0022\u003ETEXT\u003C/span\u003E) \u003Cspan class=\u0022hljs-keyword\u0022\u003ELIKE\u003C/span\u003E \u003Cspan class=\u0022hljs-string\u0022\u003E\u0027%555%\u0027\u003C/span\u003E\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003ENote that translation of \u003Ccode\u003EToString\u003C/code\u003E for SQL Server is already supported in EF Core 5.0, and may also be supported by other database providers.\u003C/p\u003E\n\u003Ch3 id=\u0022ef-functions-random\u0022\u003EEF.Functions.Random\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/16141\u0022\u003E#16141\u003C/a\u003E. This feature was contributed by \u003Ca href=\u0022https://github.com/RaymondHuy\u0022\u003E@RaymondHuy\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Ccode\u003EEF.Functions.Random\u003C/code\u003E maps to a database function returning a pseudo-random number between 0 and 1 exclusive. Translations have been implemented in the EF Core repo for SQL Server, SQLite, and Cosmos. For example, consider a \u003Ccode\u003EUser\u003C/code\u003E entity type with a \u003Ccode\u003EPopularity\u003C/code\u003E property:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EUser\u003C/span\u003E\r\n    {\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eint\u003C/span\u003E Id { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Estring\u003C/span\u003E Username { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eint\u003C/span\u003E Popularity { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n    }\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003E\u003Ccode\u003EPopularity\u003C/code\u003E can have values from 1 to 5 inclusive. Using \u003Ccode\u003EEF.Functions.Random\u003C/code\u003E we can write a query to return all users with a randomly chosen popularity:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003Evar\u003C/span\u003E users = context.Users.Where(u =\u0026gt; u.Popularity == (\u003Cspan class=\u0022hljs-built_in\u0022\u003Eint\u003C/span\u003E)(EF.Functions.Random() * \u003Cspan class=\u0022hljs-number\u0022\u003E5.0\u003C/span\u003E) \u002B \u003Cspan class=\u0022hljs-number\u0022\u003E1\u003C/span\u003E).ToList();\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis translates to the following SQL when using a SQL Server database:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-sql\u0022\u003ESELECT \u003Cspan class=\u0022hljs-string\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-string\u0022\u003E[Id]\u003C/span\u003E, \u003Cspan class=\u0022hljs-string\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-string\u0022\u003E[Popularity]\u003C/span\u003E, \u003Cspan class=\u0022hljs-string\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-string\u0022\u003E[Username]\u003C/span\u003E\r\nFROM \u003Cspan class=\u0022hljs-string\u0022\u003E[Users]\u003C/span\u003E AS \u003Cspan class=\u0022hljs-string\u0022\u003E[u]\u003C/span\u003E\r\nWHERE \u003Cspan class=\u0022hljs-string\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-string\u0022\u003E[Popularity]\u003C/span\u003E = (CAST((RAND() * \u003Cspan class=\u0022hljs-number\u0022\u003E5\u003C/span\u003E.0E0) AS int) \u002B \u003Cspan class=\u0022hljs-number\u0022\u003E1\u003C/span\u003E)\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch3 id=\u0022support-for-sql-server-sparse-columns\u0022\u003ESupport for SQL Server sparse columns\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/8023\u0022\u003E#8023\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003ESQL Server \u003Ca href=\u0022https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns\u0022\u003Esparse columns\u003C/a\u003E are ordinary columns that are optimized to store null values. This can be useful when using \u003Ca href=\u0022https://docs.microsoft.com/ef/core/modeling/inheritance\u0022\u003ETPH inheritance mapping\u003C/a\u003E where properties of a rarely used subtype will result in null column values for most rows in the table. For example, consider a \u003Ccode\u003EForumModerator\u003C/code\u003E class that extends from \u003Ccode\u003EForumUser\u003C/code\u003E:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EForumUser\u003C/span\u003E\r\n    {\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eint\u003C/span\u003E Id { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Estring\u003C/span\u003E Username { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n    }\r\n\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EForumModerator\u003C/span\u003E : \u003Cspan class=\u0022hljs-title\u0022\u003EForumUser\u003C/span\u003E\r\n    {\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Estring\u003C/span\u003E ForumName { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n    }\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThere may be millions of users, with only a handful of these being moderators. This means mapping the \u003Ccode\u003EForumName\u003C/code\u003E as sparse might make sense here. This can now be configured using \u003Ccode\u003EIsSparse\u003C/code\u003E in \u003Ccode\u003EOnModelCreating\u003C/code\u003E. For example:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E        \u003Cspan class=\u0022hljs-function\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003Eprotected\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eoverride\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Evoid\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EOnModelCreating\u003C/span\u003E(\u003Cspan class=\u0022hljs-params\u0022\u003EModelBuilder modelBuilder\u003C/span\u003E)\r\n        \u003C/span\u003E{\r\n            modelBuilder\r\n                .Entity\u0026lt;ForumModerator\u0026gt;()\r\n                .Property(e =\u0026gt; e.ForumName)\r\n                .IsSparse();\r\n        }\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EEF Core migrations will then mark the column as sparse. For example:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-sql\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003ECREATE\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003ETABLE\u003C/span\u003E [ForumUser] (\r\n    [\u003Cspan class=\u0022hljs-keyword\u0022\u003EId\u003C/span\u003E] \u003Cspan class=\u0022hljs-built_in\u0022\u003Eint\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003ENOT\u003C/span\u003E \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003EIDENTITY\u003C/span\u003E,\r\n    [Username] \u003Cspan class=\u0022hljs-keyword\u0022\u003Envarchar\u003C/span\u003E(\u003Cspan class=\u0022hljs-keyword\u0022\u003Emax\u003C/span\u003E) \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E,\r\n    [Discriminator] \u003Cspan class=\u0022hljs-keyword\u0022\u003Envarchar\u003C/span\u003E(\u003Cspan class=\u0022hljs-keyword\u0022\u003Emax\u003C/span\u003E) \u003Cspan class=\u0022hljs-keyword\u0022\u003ENOT\u003C/span\u003E \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E,\r\n    [ForumName] \u003Cspan class=\u0022hljs-keyword\u0022\u003Envarchar\u003C/span\u003E(\u003Cspan class=\u0022hljs-keyword\u0022\u003Emax\u003C/span\u003E) \u003Cspan class=\u0022hljs-keyword\u0022\u003ESPARSE\u003C/span\u003E \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E,\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003ECONSTRAINT\u003C/span\u003E [PK_ForumUser] PRIMARY \u003Cspan class=\u0022hljs-keyword\u0022\u003EKEY\u003C/span\u003E ([\u003Cspan class=\u0022hljs-keyword\u0022\u003EId\u003C/span\u003E]));\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cblockquote\u003E\u003Cp\u003E\u003Cstrong\u003ENOTE\u003C/strong\u003E\nSparse columns have limitations. Make sure to read the \u003Ca href=\u0022https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns\u0022\u003ESQL Server sparse columns documentation\u003C/a\u003E to ensure that sparse columns are the right choice for your scenario.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Ch3 id=\u0022in-memory-database-validate-required-properties-are-not-null\u0022\u003EIn-memory database: validate required properties are not null\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/10613\u0022\u003E#10613\u003C/a\u003E. This feature was contributed by \u003Ca href=\u0022https://github.com/fagnercarvalho\u0022\u003E@fagnercarvalho\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EThe EF Core in-memory database will now throw an exception if an attempt is made to save a null value for a property marked as required. For example, consider a \u003Ccode\u003EUser\u003C/code\u003E type with a required \u003Ccode\u003EUsername\u003C/code\u003E property:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EUser\u003C/span\u003E\r\n    {\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eint\u003C/span\u003E Id { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n\r\n        [Required]\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Estring\u003C/span\u003E Username { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n    }\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EAttempting to save an entity with a null \u003Ccode\u003EUsername\u003C/code\u003E will result in the following exception:\u003C/p\u003E\n\u003Cblockquote\u003E\u003Cp\u003EMicrosoft.EntityFrameworkCore.DbUpdateException: Required properties \u0026#8216;{\u0026#8216;Username\u0026#8217;}\u0026#8217; are missing for the instance of entity type \u0026#8216;User\u0026#8217; with the key value \u0026#8216;{Id: 1}\u0026#8217;.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003EThis validation can be disabled if necessary. For example:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E        \u003Cspan class=\u0022hljs-function\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003Eprotected\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eoverride\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Evoid\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EOnConfiguring\u003C/span\u003E(\u003Cspan class=\u0022hljs-params\u0022\u003EDbContextOptionsBuilder optionsBuilder\u003C/span\u003E)\r\n        \u003C/span\u003E{\r\n            optionsBuilder\r\n                .LogTo(Console.WriteLine, \u003Cspan class=\u0022hljs-keyword\u0022\u003Enew\u003C/span\u003E[] { InMemoryEventId.ChangesSaved })\r\n                .UseInMemoryDatabase(\u003Cspan class=\u0022hljs-string\u0022\u003E\u0022UserContextWithNullCheckingDisabled\u0022\u003C/span\u003E)\r\n                .EnableNullabilityCheck(\u003Cspan class=\u0022hljs-literal\u0022\u003Efalse\u003C/span\u003E);\r\n        }\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch3 id=\u0022improved-sql-server-translation-for-isnullorwhitespace\u0022\u003EImproved SQL Server translation for IsNullOrWhitespace\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/22916\u0022\u003E#22916\u003C/a\u003E. This feature was contributed by \u003Ca href=\u0022https://github.com/Marusyk\u0022\u003E@Marusyk\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EConsider the following query:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E        \u003Cspan class=\u0022hljs-built_in\u0022\u003Evar\u003C/span\u003E users = context.Users.\u003Cspan class=\u0022hljs-keyword\u0022\u003EWhere\u003C/span\u003E(\r\n            e =\u0026gt; \u003Cspan class=\u0022hljs-built_in\u0022\u003Estring\u003C/span\u003E.IsNullOrWhiteSpace(e.FirstName)\r\n                 || \u003Cspan class=\u0022hljs-built_in\u0022\u003Estring\u003C/span\u003E.IsNullOrWhiteSpace(e.LastName)).ToList();\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EBefore EF Core 6.0, this was translated to the following on SQL Server:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-sql\u0022\u003E\u003Cspan class=\u0022hljs-keyword\u0022\u003ESELECT\u003C/span\u003E [u].[\u003Cspan class=\u0022hljs-keyword\u0022\u003EId\u003C/span\u003E], [u].[FirstName], [u].[LastName]\r\n\u003Cspan class=\u0022hljs-keyword\u0022\u003EFROM\u003C/span\u003E [\u003Cspan class=\u0022hljs-keyword\u0022\u003EUsers\u003C/span\u003E] \u003Cspan class=\u0022hljs-keyword\u0022\u003EAS\u003C/span\u003E [u]\r\n\u003Cspan class=\u0022hljs-keyword\u0022\u003EWHERE\u003C/span\u003E ([u].[FirstName] \u003Cspan class=\u0022hljs-keyword\u0022\u003EIS\u003C/span\u003E \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003EOR\u003C/span\u003E (\u003Cspan class=\u0022hljs-keyword\u0022\u003ELTRIM\u003C/span\u003E(\u003Cspan class=\u0022hljs-keyword\u0022\u003ERTRIM\u003C/span\u003E([u].[FirstName])) = N\u003Cspan class=\u0022hljs-string\u0022\u003E\u0027\u0027\u003C/span\u003E)) \u003Cspan class=\u0022hljs-keyword\u0022\u003EOR\u003C/span\u003E ([u].[LastName] \u003Cspan class=\u0022hljs-keyword\u0022\u003EIS\u003C/span\u003E \u003Cspan class=\u0022hljs-literal\u0022\u003ENULL\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003EOR\u003C/span\u003E (\u003Cspan class=\u0022hljs-keyword\u0022\u003ELTRIM\u003C/span\u003E(\u003Cspan class=\u0022hljs-keyword\u0022\u003ERTRIM\u003C/span\u003E([u].[LastName])) = N\u003Cspan class=\u0022hljs-string\u0022\u003E\u0027\u0027\u003C/span\u003E))\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis translation has been improved for EF Core 6.0 to:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-sql\u0022\u003ESELECT \u003Cspan class=\u0022hljs-comment\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-comment\u0022\u003E[Id]\u003C/span\u003E, \u003Cspan class=\u0022hljs-comment\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-comment\u0022\u003E[FirstName]\u003C/span\u003E, \u003Cspan class=\u0022hljs-comment\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-comment\u0022\u003E[LastName]\u003C/span\u003E\r\nFROM \u003Cspan class=\u0022hljs-comment\u0022\u003E[Users]\u003C/span\u003E AS \u003Cspan class=\u0022hljs-comment\u0022\u003E[u]\u003C/span\u003E\r\nWHERE (\u003Cspan class=\u0022hljs-comment\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-comment\u0022\u003E[FirstName]\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003EIS\u003C/span\u003E NULL OR (\u003Cspan class=\u0022hljs-comment\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-comment\u0022\u003E[FirstName]\u003C/span\u003E = N\u0027\u0027)) OR (\u003Cspan class=\u0022hljs-comment\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-comment\u0022\u003E[LastName]\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003EIS\u003C/span\u003E NULL OR (\u003Cspan class=\u0022hljs-comment\u0022\u003E[u]\u003C/span\u003E.\u003Cspan class=\u0022hljs-comment\u0022\u003E[LastName]\u003C/span\u003E = N\u0027\u0027))\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch3 id=\u0022database-comments-are-scaffolded-to-code-comments\u0022\u003EDatabase comments are scaffolded to code comments\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/19113\u0022\u003E#19113\u003C/a\u003E. This feature was contributed by \u003Ca href=\u0022https://github.com/ErikEJ\u0022\u003E@ErikEJ\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EComments on SQL tables and columns are now scaffolded into the entity types created when \u003Ca href=\u0022https://docs.microsoft.com/ef/core/managing-schemas/scaffolding\u0022\u003Ereverse-engineering an EF Core model\u003C/a\u003E from an existing SQL Server database. For example:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E\u003Cspan class=\u0022hljs-comment\u0022\u003E\u003Cspan class=\u0022hljs-doctag\u0022\u003E///\u003C/span\u003E \u003Cspan class=\u0022hljs-doctag\u0022\u003E\u0026lt;summary\u0026gt;\u003C/span\u003E\u003C/span\u003E\r\n\u003Cspan class=\u0022hljs-comment\u0022\u003E\u003Cspan class=\u0022hljs-doctag\u0022\u003E///\u003C/span\u003E The Blog table.\u003C/span\u003E\r\n\u003Cspan class=\u0022hljs-comment\u0022\u003E\u003Cspan class=\u0022hljs-doctag\u0022\u003E///\u003C/span\u003E \u003Cspan class=\u0022hljs-doctag\u0022\u003E\u0026lt;/summary\u0026gt;\u003C/span\u003E\u003C/span\u003E\r\n\u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Epartial\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eclass\u003C/span\u003E \u003Cspan class=\u0022hljs-title\u0022\u003EBlog\u003C/span\u003E\r\n{\r\n    \u003Cspan class=\u0022hljs-comment\u0022\u003E\u003Cspan class=\u0022hljs-doctag\u0022\u003E///\u003C/span\u003E \u003Cspan class=\u0022hljs-doctag\u0022\u003E\u0026lt;summary\u0026gt;\u003C/span\u003E\u003C/span\u003E\r\n    \u003Cspan class=\u0022hljs-comment\u0022\u003E\u003Cspan class=\u0022hljs-doctag\u0022\u003E///\u003C/span\u003E The primary key.\u003C/span\u003E\r\n    \u003Cspan class=\u0022hljs-comment\u0022\u003E\u003Cspan class=\u0022hljs-doctag\u0022\u003E///\u003C/span\u003E \u003Cspan class=\u0022hljs-doctag\u0022\u003E\u0026lt;/summary\u0026gt;\u003C/span\u003E\u003C/span\u003E\r\n    [Key]\r\n    \u003Cspan class=\u0022hljs-keyword\u0022\u003Epublic\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Eint\u003C/span\u003E Id { \u003Cspan class=\u0022hljs-keyword\u0022\u003Eget\u003C/span\u003E; \u003Cspan class=\u0022hljs-keyword\u0022\u003Eset\u003C/span\u003E; }\r\n}\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2 id=\u0022microsoft-data-sqlite-6-0-preview-1\u0022\u003EMicrosoft.Data.Sqlite 6.0 Preview 1\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003E\u003Cstrong\u003ETIP\u003C/strong\u003E\nYou can run and debug into all the preview 1 samples shown below by \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/tree/master/samples/core/Miscellaneous/NewInEFCore6\u0022\u003Edownloading the sample code from GitHub\u003C/a\u003E.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Ch3 id=\u0022savepoints-api\u0022\u003ESavepoints API\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/20228\u0022\u003E#20228\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EWe have been standardizing on \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/33397\u0022\u003Ea common API for savepoints in ADO.NET providers\u003C/a\u003E. Microsoft.Data.Sqlite now supports this API, including:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003ESave\u003C/code\u003E to create a savepoint in the transaction\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003ERollback\u003C/code\u003E to roll back to a previous savepoint\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003ERelease\u003C/code\u003E to release a savepoint\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EUsing a savepoint allows part of a transaction to be rolled back without rolling back the entire transaction. For example, the code below:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ECreates a transaction\u003C/li\u003E\n\u003Cli\u003ESends an update to the database\u003C/li\u003E\n\u003Cli\u003ECreates a savepoint\u003C/li\u003E\n\u003Cli\u003ESends another update to the database\u003C/li\u003E\n\u003Cli\u003ERolls back to the savepoint previous created\u003C/li\u003E\n\u003Cli\u003ECommits the transaction\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022lang-csharp\u0022\u003E        \u003Cspan class=\u0022hljs-keyword\u0022\u003Eusing\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Evar\u003C/span\u003E connection = \u003Cspan class=\u0022hljs-keyword\u0022\u003Enew\u003C/span\u003E \u003Cspan class=\u0022hljs-type\u0022\u003ESqliteConnection\u003C/span\u003E(\u003Cspan class=\u0022hljs-string\u0022\u003E\u0022DataSource=test.db\u0022\u003C/span\u003E);\r\n        connection.Open();\r\n\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Eusing\u003C/span\u003E \u003Cspan class=\u0022hljs-keyword\u0022\u003Evar\u003C/span\u003E transaction = connection.BeginTransaction();\r\n\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Eusing\u003C/span\u003E (\u003Cspan class=\u0022hljs-keyword\u0022\u003Evar\u003C/span\u003E command = connection.CreateCommand())\r\n        {\r\n            command.CommandText = @\u003Cspan class=\u0022hljs-string\u0022\u003E\u0022UPDATE Users SET Username = \u0027ajcvickers\u0027 WHERE Id = 1\u0022\u003C/span\u003E;\r\n            command.ExecuteNonQuery();\r\n        }\r\n\r\n        transaction.Save(\u003Cspan class=\u0022hljs-string\u0022\u003E\u0022MySavepoint\u0022\u003C/span\u003E);\r\n\r\n        \u003Cspan class=\u0022hljs-keyword\u0022\u003Eusing\u003C/span\u003E (\u003Cspan class=\u0022hljs-keyword\u0022\u003Evar\u003C/span\u003E command = connection.CreateCommand())\r\n        {\r\n            command.CommandText = @\u003Cspan class=\u0022hljs-string\u0022\u003E\u0022UPDATE Users SET Username = \u0027wfvickers\u0027 WHERE Id = 2\u0022\u003C/span\u003E;\r\n            command.ExecuteNonQuery();\r\n        }\r\n\r\n        transaction.Rollback(\u003Cspan class=\u0022hljs-string\u0022\u003E\u0022MySavepoint\u0022\u003C/span\u003E);\r\n\r\n        transaction.Commit();\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis will result in the first update being committed to the database, while the second update is not committed since the savepoint was rolled back before committing the transaction.\u003C/p\u003E\n\u003Ch3 id=\u0022command-timeout-in-the-connection-string\u0022\u003ECommand timeout in the connection string\u003C/h3\u003E\n\u003Cp\u003EGitHub Issue: \u003Ca href=\u0022https://github.com/dotnet/efcore/issues/22505\u0022\u003E#22505\u003C/a\u003E. This feature was contributed by \u003Ca href=\u0022https://github.com/nmichels\u0022\u003E@nmichels\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EADO.NET providers support two distinct timeouts:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe connection timeout, which determines the maximum time to wait when making a connection to the database.\u003C/li\u003E\n\u003Cli\u003EThe command timeout, which determines the maximum time to wait for a command to complete executing.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThe command timeout can be set from code using \u0026lt;xref:System.Data.Common.DbCommand.CommandTimeout?displayProperty=nameWithType\u0026gt;. Many providers are now also exposing this command timeout in the connection string. Microsoft.Data.Sqlite is following this trend with the \u003Ccode\u003ECommand Timeout\u003C/code\u003E connection string keyword. For example, \u003Ccode\u003E\u0022Command Timeout=60;DataSource=test.db\u0022\u003C/code\u003E will use 60 seconds as the default timeout for commands created by the connection.\u003C/p\u003E\n\u003Cblockquote\u003E\u003Cp\u003E\u003Cstrong\u003ETIP\u003C/strong\u003E\nSqlite treats \u003Ccode\u003EDefault Timeout\u003C/code\u003E as a synonym for \u003Ccode\u003ECommand Timeout\u003C/code\u003E and so can be used instead if preferred.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Ch2 id=\u0022daily-builds\u0022\u003EDaily builds\u003C/h2\u003E\n\u003Cp\u003EEF Core previews are aligned with .NET 6 previews. These previews tend to lag behind the latest work on EF Core. Consider using the \u003Ca href=\u0022https://github.com/aspnet/AspNetCore/blob/master/docs/DailyBuilds.md\u0022\u003Edaily builds\u003C/a\u003E instead to get the most up-to-date EF Core features and bug fixes.\u003C/p\u003E\n\u003Cp\u003EAs with the previews, the daily builds require .NET 5.\u003C/p\u003E\n\u003Chr /\u003E\n\u003Ch2 id=\u0022the-ef-core-community-standup\u0022\u003EThe EF Core Community Standup\u003C/h2\u003E\n\u003Cp\u003EThe EF Core team is now live streaming every other Wednesday at 10am Pacific Time, 1pm Eastern Time, or 17:00 UTC. Join the stream to ask questions about the EF Core topic of your choice, including the latest preview release.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://aka.ms/efstandups\u0022\u003EWatch our YouTube playlist\u003C/a\u003E of previous shows\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://dotnet.microsoft.com/platform/community/standup\u0022\u003EVisit the .NET Community Standup\u003C/a\u003E page to preview upcoming shows\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/issues/22700\u0022\u003ESuggest a guest or project, including your own\u003C/a\u003E by commenting on the linked issue\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch2 id=\u0022documentation-and-feedback\u0022\u003EDocumentation and Feedback\u003C/h2\u003E\n\u003Cp\u003EThe starting point for all EF Core documentation is \u003Ca href=\u0022https://docs.microsoft.com/ef/\u0022\u003Edocs.microsoft.com/ef/\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EPlease file issues found and any other feedback on the \u003Ca href=\u0022https://github.com/dotnet/efcore\u0022\u003Edotnet/efcore GitHub repo\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022helpful-short-links\u0022\u003EHelpful Short Links\u003C/h2\u003E\n\u003Cp\u003EThe following short links are provided for easy reference and access.\u003C/p\u003E\n\u003Cp\u003EEF Core Community Standup Playlist:\n\u003Ca href=\u0022https://aka.ms/efstandups\u0022\u003Ehttps://aka.ms/efstandups\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EMain documentation:\n\u003Ca href=\u0022https://aka.ms/efdocs\u0022\u003Ehttps://aka.ms/efdocs\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EIssues and feature requests for EF Core:\n\u003Ca href=\u0022https://aka.ms/efcorefeedback\u0022\u003Ehttps://aka.ms/efcorefeedback\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EEntity Framework Roadmap:\n\u003Ca href=\u0022https://aka.ms/efroadmap\u0022\u003Ehttps://aka.ms/efroadmap\u003C/a\u003E\u003C/p\u003E\n\u003Chr /\u003E\n\u003Ch2 id=\u0022thank-you-from-the-team\u0022\u003EThank you from the team\u003C/h2\u003E\n\u003Cp\u003EA big thank you from the EF team to everyone who has used EF over the years!\u003C/p\u003E\n\u003Ctable\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://github.com/ajcvickers\u0022\u003E\u003Cimg src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2020/03/efteam_ajcvickers.jpeg\u0022 alt=\u0022ajcvickers\u0022 width=\u0022200px\u0022 /\u003E\nArthur Vickers\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://github.com/AndriySvyryd\u0022\u003E\u003Cimg src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2020/03/efteam_AndriySvyryd.jpeg\u0022 alt=\u0022AndriySvyryd\u0022 width=\u0022200px\u0022 /\u003E\nAndriy Svyryd\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://github.com/bricelam\u0022\u003E\u003Cimg src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2020/03/efteam_bricelam.jpeg\u0022 alt=\u0022\u0022 width=\u0022200px\u0022 /\u003E\nBrice Lambson\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://github.com/JeremyLikness\u0022\u003E\u003Cimg src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2020/03/efteam_JeremyLikness.jpeg\u0022 alt=\u0022JeremyLikness\u0022 width=\u0022200px\u0022 /\u003E\nJeremy Likness\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://github.com/maumar\u0022\u003E\u003Cimg src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2020/03/efteam_maumar.jpeg\u0022 alt=\u0022maumar\u0022 width=\u0022200px\u0022 /\u003E\nMaurycy Markowski\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://github.com/roji\u0022\u003E\u003Cimg src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2020/03/efteam_roji-1-300x300.png\u0022 alt=\u0022roji\u0022 width=\u0022200px\u0022 /\u003E\nShay Rojansky\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://github.com/smitpatel\u0022\u003E\u003Cimg src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2020/03/efteam_smitpatel.png\u0022 alt=\u0022smitpatel\u0022 width=\u0022200px\u0022 /\u003E\nSmit Patel\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/tbody\u003E\n\u003C/table\u003E\n\u003Chr /\u003E\n\u003Ch2\u003E\u003Ca id=\u0022user-content-thank-you-to-our-contributors\u0022 class=\u0022anchor\u0022 href=\u0022#thank-you-to-our-contributors\u0022 aria-hidden=\u0022true\u0022\u003E\u003C/a\u003EThank you to our contributors!\u003C/h2\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth align=\u0022center\u0022\u003E\u003C/th\u003E\n\u003Cth align=\u0022center\u0022\u003E\u003C/th\u003E\n\u003Cth align=\u0022center\u0022\u003E\u003C/th\u003E\n\u003Cth align=\u0022center\u0022\u003E\u003C/th\u003E\n\u003C/tr\u003E\n\u003C/thead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/Ali-YousefiTelori\u0022\u003EAli-YousefiTelori\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/AndrewKitu\u0022\u003EAndrewKitu\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/ardalis\u0022\u003Eardalis\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/CaringDev\u0022\u003ECaringDev\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/Ali-YousefiTelori\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Ali-YousefiTelori.jpg\u0022 alt=\u0022Ali-YousefiTelori\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/AndrewKitu\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/AndrewKitu.jpg\u0022 alt=\u0022AndrewKitu\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/ardalis\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/ardalis.jpg\u0022 alt=\u0022ardalis\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/CaringDev\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/CaringDev.png\u0022 alt=\u0022CaringDev\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23946\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/3070\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/3091\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23585\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/carlreinke\u0022\u003Ecarlreinke\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/cgrimes01\u0022\u003Ecgrimes01\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/cincuranet\u0022\u003Ecincuranet\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/dan-giddins\u0022\u003Edan-giddins\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/carlreinke\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/carlreinke.png\u0022 alt=\u0022carlreinke\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/cgrimes01\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/cgrimes01.png\u0022 alt=\u0022cgrimes01\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/cincuranet\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/cincuranet.png\u0022 alt=\u0022cincuranet\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dan-giddins\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/dan-giddins.png\u0022 alt=\u0022dan-giddins\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23694\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/3038\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2714\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2910\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/dennisseders\u0022\u003Edennisseders\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/DickBaker\u0022\u003EDickBaker\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/ErikEJ\u0022\u003EErikEJ\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/fagnercarvalho\u0022\u003Efagnercarvalho\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dennisseders\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/dennisseders.png\u0022 alt=\u0022dennisseders\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/DickBaker\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/DickBaker.png\u0022 alt=\u0022DickBaker\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/ErikEJ\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/ErikEJ.jpg\u0022 alt=\u0022ErikEJ\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/fagnercarvalho\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/fagnercarvalho.jpg\u0022 alt=\u0022fagnercarvalho\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2839\u0022\u003E#1\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2845\u0022\u003E#2\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2848\u0022\u003E#3\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2987\u0022\u003E#4\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2997\u0022\u003E#5\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/3007\u0022\u003E#6\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2990\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/22900\u0022\u003E#1\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/efcore/pull/22937\u0022\u003E#2\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/efcore/pull/22938\u0022\u003E#3\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2897\u0022\u003E#4\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2984\u0022\u003E#5\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23094\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/filipnavara\u0022\u003Efilipnavara\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/garyng\u0022\u003Egaryng\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/Geoff1900\u0022\u003EGeoff1900\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/gfoidl\u0022\u003Egfoidl\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/filipnavara\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/filipnavara.jpg\u0022 alt=\u0022filipnavara\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/garyng\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/garyng.jpg\u0022 alt=\u0022garyng\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/Geoff1900\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Geoff1900.png\u0022 alt=\u0022Geoff1900\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/gfoidl\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/gfoidl.jpg\u0022 alt=\u0022gfoidl\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23591\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/3045\u0022\u003E#1\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/3046\u0022\u003E#2\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/3047\u0022\u003E#3\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/3025\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/22923\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/gurustron\u0022\u003Egurustron\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/HSchwichtenberg\u0022\u003EHSchwichtenberg\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/jantlee\u0022\u003Ejantlee\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/joaopgrassi\u0022\u003Ejoaopgrassi\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/gurustron\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/gurustron.png\u0022 alt=\u0022gurustron\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/HSchwichtenberg\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/HSchwichtenberg.jpg\u0022 alt=\u0022HSchwichtenberg\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/jantlee\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/jantlee.jpg\u0022 alt=\u0022jantlee\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/joaopgrassi\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/joaopgrassi.jpg\u0022 alt=\u0022joaopgrassi\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/3010\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2894\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2786\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/22849\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/josemiltonsampaio\u0022\u003Ejosemiltonsampaio\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/KaloyanIT\u0022\u003EKaloyanIT\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/khalidabuhakmeh\u0022\u003Ekhalidabuhakmeh\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/khellang\u0022\u003Ekhellang\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/josemiltonsampaio\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/josemiltonsampaio.jpg\u0022 alt=\u0022josemiltonsampaio\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/KaloyanIT\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/KaloyanIT.jpg\u0022 alt=\u0022KaloyanIT\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/khalidabuhakmeh\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/khalidabuhakmeh.jpg\u0022 alt=\u0022khalidabuhakmeh\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/khellang\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/khellang.png\u0022 alt=\u0022khellang\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2927\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23563\u0022\u003E#1\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23666\u0022\u003E#2\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2858\u0022\u003E#1\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2962\u0022\u003E#2\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2982\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/koenbeuk\u0022\u003Ekoenbeuk\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/kotpal\u0022\u003Ekotpal\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/leonardoporro\u0022\u003Eleonardoporro\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/Marusyk\u0022\u003EMarusyk\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/koenbeuk\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/koenbeuk.png\u0022 alt=\u0022koenbeuk\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/kotpal\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/kotpal.jpg\u0022 alt=\u0022kotpal\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/leonardoporro\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/leonardoporro.png\u0022 alt=\u0022leonardoporro\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/Marusyk\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Marusyk.jpg\u0022 alt=\u0022Marusyk\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2921\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2763\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2883\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23039\u0022\u003E#1\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/efcore/pull/24016\u0022\u003E#2\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/MaxG117\u0022\u003EMaxG117\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/mefateah\u0022\u003Emefateah\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/meggima\u0022\u003Emeggima\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/msawczyn\u0022\u003Emsawczyn\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/MaxG117\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/MaxG117.png\u0022 alt=\u0022MaxG117\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/mefateah\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/mefateah.png\u0022 alt=\u0022mefateah\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/meggima\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/meggima.jpg\u0022 alt=\u0022meggima\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/msawczyn\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/msawczyn.jpg\u0022 alt=\u0022msawczyn\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2898\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/3065\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23605\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2917\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/MSDN-WhiteKnight\u0022\u003EMSDN-WhiteKnight\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/natashanikolic\u0022\u003Enatashanikolic\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/nmichels\u0022\u003Enmichels\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/nschonni\u0022\u003Enschonni\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/MSDN-WhiteKnight\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/MSDN-WhiteKnight.png\u0022 alt=\u0022MSDN-WhiteKnight\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/natashanikolic\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/natashanikolic.png\u0022 alt=\u0022natashanikolic\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/nmichels\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/nmichels.jpg\u0022 alt=\u0022nmichels\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/nschonni\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/nschonni.jpg\u0022 alt=\u0022nschonni\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2887\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2920\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23091\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2775\u0022\u003E#1\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2776\u0022\u003E#2\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2779\u0022\u003E#3\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2780\u0022\u003E#4\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/pkellner\u0022\u003Epkellner\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/ralmsdeveloper\u0022\u003Eralmsdeveloper\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/RaymondHuy\u0022\u003ERaymondHuy\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/Shirasho\u0022\u003EShirasho\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/pkellner\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/pkellner.jpg\u0022 alt=\u0022pkellner\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/ralmsdeveloper\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/ralmsdeveloper.jpg\u0022 alt=\u0022ralmsdeveloper\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/RaymondHuy\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/RaymondHuy.jpg\u0022 alt=\u0022RaymondHuy\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/Shirasho\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Shirasho.jpg\u0022 alt=\u0022Shirasho\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2954\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/19473\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/22514\u0022\u003E#1\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23145\u0022\u003E#2\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23232\u0022\u003E#3\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23424\u0022\u003E#4\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2988\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/SimonCropp\u0022\u003ESimonCropp\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/the-wazz\u0022\u003Ethe-wazz\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/tkp1n\u0022\u003Etkp1n\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/Tomkaa\u0022\u003ETomkaa\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/SimonCropp\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/SimonCropp.jpg\u0022 alt=\u0022SimonCropp\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/the-wazz\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/the-wazz.png\u0022 alt=\u0022the-wazz\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/tkp1n\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/tkp1n.jpg\u0022 alt=\u0022tkp1n\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/Tomkaa\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Tomkaa.png\u0022 alt=\u0022Tomkaa\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2957\u0022\u003E#1\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/EntityFramework.Docs/pull/2959\u0022\u003E#2\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23551\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23014\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23933\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/umitkavala\u0022\u003Eumitkavala\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/vincent1405\u0022\u003Evincent1405\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://github.com/wmeints\u0022\u003Ewmeints\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/umitkavala\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/umitkavala.jpg\u0022 alt=\u0022umitkavala\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/vincent1405\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/vincent1405.png\u0022 alt=\u0022vincent1405\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/wmeints\u0022\u003E\u003Cimg style=\u0022max-width: 100%;\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/wmeints.jpg\u0022 alt=\u0022wmeints\u0022 /\u003E\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23322\u0022\u003E#1\u003C/a\u003E, \u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23562\u0022\u003E#2\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/24020\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003Ca href=\u0022https://github.com/dotnet/efcore/pull/23873\u0022\u003E#1\u003C/a\u003E\u003C/td\u003E\n\u003Ctd align=\u0022center\u0022\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/tbody\u003E\n\u003C/table\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-1/\u0022\u003EAnnouncing Entity Framework Core 6.0 Preview 1\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/content:encoded\u003E\n\t\t\t\t\t\n\t\t\t\t\t\u003Cwfw:commentRss\u003Ehttps://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-1/feed/\u003C/wfw:commentRss\u003E\n\t\t\t\u003Cslash:comments\u003E8\u003C/slash:comments\u003E\n\t\t\n\t\t\n\t\t\t\u003C/item\u003E\n\t\t\u003Citem\u003E\n\t\t\u003Ctitle\u003EAnnouncing .NET 6 Preview 1\u003C/title\u003E\n\t\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet/announcing-net-6-preview-1/\u003C/link\u003E\n\t\t\t\t\t\u003Ccomments\u003Ehttps://devblogs.microsoft.com/dotnet/announcing-net-6-preview-1/#comments\u003C/comments\u003E\n\t\t\n\t\t\u003Cdc:creator\u003E\u003C![CDATA[Richard Lander]]\u003E\u003C/dc:creator\u003E\n\t\t\u003CpubDate\u003EWed, 17 Feb 2021 18:13:59 \u002B0000\u003C/pubDate\u003E\n\t\t\t\t\u003Ccategory\u003E\u003C![CDATA[.NET]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[.NET Core]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[.NET 6 preview]]\u003E\u003C/category\u003E\n\t\t\u003Cguid isPermaLink=\u0022false\u0022\u003Ehttps://devblogs.microsoft.com/dotnet/?p=31793\u003C/guid\u003E\n\n\t\t\t\t\t\u003Cdescription\u003E\u003C![CDATA[\u003Cp\u003EToday, we are happy to deliver the first preview of .NET 6 and share what you can expect from the new release. We have been defining the overall shape of the release for the last few months, including a large set of new experiences and capabilities.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-1/\u0022\u003EAnnouncing .NET 6 Preview 1\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/description\u003E\n\t\t\t\t\t\t\t\t\t\t\u003Ccontent:encoded\u003E\u003C![CDATA[\u003Cp\u003EToday, we are happy to deliver the first preview of .NET 6 and share what you can expect from the new release. We have been defining the overall shape of the release for the last few months, including a large set of \u003Ca href=\u0022https://themesof.net/\u0022\u003Enew experiences and capabilities\u003C/a\u003E. The heart of .NET 6 is delivering the final parts of the .NET unification plan that started with \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/announcing-net-5-0/\u0022\u003E.NET 5\u003C/a\u003E. The release will also include major improvements across all parts of .NET, including for cloud, desktop, and mobile apps. It will take\u00A0 multiple previews for the larger scope of the release to be fully available in .NET 6 builds.\u003C/p\u003E\n\u003Cp\u003EYou can \u003Ca href=\u0022https://dotnet.microsoft.com/download/dotnet/6.0\u0022\u003Edownload .NET 6 Preview 1\u003C/a\u003E, for Windows, macOS, and Linux.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://dotnet.microsoft.com/download/dotnet/6.0\u0022\u003EInstallers and binaries\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://hub.docker.com/_/microsoft-dotnet\u0022\u003EContainer images\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/6.0/preview/6.0.0-preview.1-install-instructions.md\u0022\u003ELinux packages\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/core/tree/master/release-notes/6.0\u0022\u003ERelease notes\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/6.0/6.0-known-issues.md\u0022\u003EKnown issues\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/core/issues/5967\u0022\u003EGitHub issue tracker\u003C/a\u003E\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ESee the \u003Ca href=\u0022https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-1/\u0022\u003EASP.NET Core\u003C/a\u003E and \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-1/\u0022\u003EEF Core\u003C/a\u003E posts for more detail on what\u0026#8217;s new for web and data access scenarios.\u003C/p\u003E\n\u003Cp\u003E.NET 6 has been tested with Visual Studio 16.9 Preview 4 and Visual Studio for Mac 8.9. We recommend you use those builds if you want to try .NET 6.\u003C/p\u003E\n\u003Cp\u003EThe rest of the both is split into two sections: a first look at what we\u0026#8217;re delivering for .NET 6 generally (what you\u0026#8217;ll get in November), and what\u0026#8217;s new in Preview in particular.\u003C/p\u003E\n\u003Ch2 id=\u0022unified-and-extended\u0022\u003EUnified and extended\u003C/h2\u003E\n\u003Cp\u003E.NET 6 will enable you to build the apps that you want to build, for the platforms you want to target, and on the operating systems you want to use for development. We\u0026#8217;re extending what you can do with .NET and where you can do it by delivering the rest of \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/introducing-net-5/\u0022\u003E.NET unification vision\u003C/a\u003E. We\u0026#8217;re integrating the Android, iOS, and macOS capabilities that are part of Xamarin into .NET 6. We\u0026#8217;re also extending what you can do with Blazor into a new kind of hybrid client app \u0026#8212; combining web and native UI together \u0026#8212; that can be used for desktop and mobile scenarios. These new capabilities will be described later in this post and in subsequent previews.\u003C/p\u003E\n\u003Cp\u003EOur unification efforts offer something for all .NET developers. If you are desktop app developer, there are new opportunities for you to reach new users. If you are a mobile app developer, you will benefit from using the mainline .NET tools and APIs while targeting iOS and Android platforms. If you are a web or cloud developer, it will be easier to expose services to .NET mobile apps and share code with them.\u003C/p\u003E\n\u003Cp\u003EWe started the \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/announcing-net-5-0/#unified-platform-vision\u0022\u003Eunification process in .NET 5\u003C/a\u003E. For that release, we chose Blazor WebAssembly as the first unified platform deliverable. It is based on the \u003Ca href=\u0022https://github.com/dotnet/runtime/tree/master/src/mono\u0022\u003EMono runtime\u003C/a\u003E, uses the .NET class libraries, and .NET SDK tools. We will use the same model for iOS, and Android as we integrate Xamarin. With a unified platform, new APIs and performance improvements will be available to all developers on the same day, and work for all apps.\u003C/p\u003E\n\u003Cp\u003EWhen you install the .NET SDK, you can start building apps for mobile platforms. That means that you\u0026#8217;ll be able type \u003Ccode\u003Edotnet new android\u003C/code\u003E and then \u003Ccode\u003Edotnet run\u003C/code\u003E and expect an Android emulator to start running a .NET app. The same is true for iOS apps. You will have similar experiences in Visual Studio and Visual Studio Code. Don\u0026#8217;t worry that the .NET SDK is going to get a lot bigger because of mobile workloads being supported. The mobile workloads will be optional. In fact, the .NET SDK is going to become smaller as a result of existing workloads also becoming optional. A new \u003Ca href=\u0022https://github.com/dotnet/designs/blob/main/accepted/2020/workloads/workloads.md\u0022\u003Eoptional SDK workloads\u003C/a\u003E experience will be part of .NET 6 and will be completed in .NET 7.\u003C/p\u003E\n\u003Cp\u003EWe are taking the opportunity around unification to simplify and extend the experience of building Xamarin Forms apps. We\u0026#8217;re calling that project \u003Ca href=\u0022https://devblogs.microsoft.com/xamarin/the-new-net-multi-platform-app-ui-maui/\u0022\u003E.NET Multi-platform App UI\u003C/a\u003E. That project will offer many improvements and capabilities that will extend the platform reach of both desktop and mobile developers.\u003C/p\u003E\n\u003Ch2 id=\u0022open-planning\u0022\u003EOpen planning\u003C/h2\u003E\n\u003Cp\u003EWe adopted a more \u003Ca href=\u0022https://themesof.net/\u0022\u003Eopen planning process\u003C/a\u003E with .NET 6. We plan .NET releases with a hierarchical model of themes, epics, and user stories, with priorities and categories. This model enables you to see the release at a broader scope, provides insight on which features are the most important, and makes it easier to find opportunities to engage and contribute.\u003C/p\u003E\n\u003Cp\u003EYou may notice that the GitHub theme and epic issues for .NET 6 started showing up in September. While we have planned product releases many times before, we\u0026#8217;ve never done that with GitHub issues. For .NET 5, we used Azure DevOps. The best way to get an all-up view of our plans is to use our Blazor-based \u003Ca href=\u0022https://themesof.net/\u0022\u003Ethemesof.net\u003C/a\u003E app.\u003C/p\u003E\n\u003Cp\u003EWe didn\u0026#8217;t make a big announcement at the start of this process because we were still figuring out the process and model, and we didn\u0026#8217;t yet have a story to tell. However, we did proactively point a few folks to what we were doing. We first talked to our friends at Red Hat, although they had already been watching our activity and had figured out what we were doing. They were pleased that we were taking the next step in project openness. We next shared our new open planning approach with the .NET Foundation board. Open planning has also made it easier for other teams at Microsoft to see where the .NET Team is headed next.\u003C/p\u003E\n\u003Cp\u003EThe plan you see on GitHub is now a fundamental part of our engineering process. We\u0026#8217;ll do our best to keep these issues up-to-date, and link issues to relevant activities and docs to help you better understand the depth and breadth of the project. We encourage you to engage, ask questions, and give feedback.\u003C/p\u003E\n\u003Ch2 id=\u0022support\u0022\u003ESupport\u003C/h2\u003E\n\u003Cp\u003E.NET 6 will be will be released in November 2021, and will be supported for three years, as a \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-policies.md\u0022\u003ELong Term Support (LTS) release\u003C/a\u003E. The \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/6.0/6.0-supported-os.md\u0022\u003Eplatform matrix\u003C/a\u003E has been significantly expanded compared to .NET 5.\u003C/p\u003E\n\u003Cp\u003EThe additions are:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EAndroid.\u003C/li\u003E\n\u003Cli\u003EiOS.\u003C/li\u003E\n\u003Cli\u003EMac and Mac Catalyst, for x64 and Apple Silicon \u0026#8220;M1\u0026#8221;.\u003C/li\u003E\n\u003Cli\u003EWindows Arm64 (specifically Windows Desktop).\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThe default .NET container images for .NET 6 \u0026#8212; starting with Preview 1 \u0026#8212; are based on Debian 11 (\u0026#8220;bullseye\u0026#8221;). This is discussed more in the container section.\u003C/p\u003E\n\u003Ch2 id=\u0022net-multi-platform-app-ui\u0022\u003E.NET Multi-platform App UI\u003C/h2\u003E\n\u003Cp\u003E.NET Multi-platform App UI is a modern UI toolkit that builds upon and extends Xamarin as part of .NET 6 unification. We have heard from many of you that you want to deliver beautiful and consistent app experiences across various platforms and devices, and you want to share more code across your mobile and desktop apps. You will be able to target Android, iOS, macOS, and Windows. .NET 6 multi-platform mobile and cross-platform support will be based on integrating and extending the Xamarin.Forms toolkit, which has been adapted over the past seven years and has satisfied the evolving needs of many customers. Our key focus areas for .NET 6 are: app performance, adding new control themes, and faster developer experiences.\u003C/p\u003E\n\u003Cp\u003EAs part of the unification process, we decided it made a lot of sense to merge the Xamarin.Essentials library into .NET Multi-platform App UI. In addition to cross-platform UI controls, you can easily use \u003Ca href=\u0022https://docs.microsoft.com/xamarin/essentials/\u0022\u003Edevice capabilities\u003C/a\u003E, such as device sensors, common features such as photos and contacts, and many services you use on a regular basis such as authentication and secure storage.\u003C/p\u003E\n\u003Cp\u003E.NET 6 Preview 1 introduces the first two platforms of .NET Multi-platform App UI: Android and iOS. \u003Ca href=\u0022https://github.com/dotnet/net6-mobile-samples\u0022\u003E.NET 6 sample mobile projects\u003C/a\u003E and \u003Ca href=\u0022https://github.com/dotnet/net6-mobile-samples\u0022\u003Einstallation instructions\u003C/a\u003E will help you get started building Android and iOS apps. Future previews will add support for macOS and Windows desktop, add C# Hot Reload to the existing XAML support for faster development experiences, and introduce new project features for managing assets and platform-specific needs from a single place.\u003C/p\u003E\n\u003Cp\u003EDevelopers using Xamarin today will be able to start using .NET 6 with Xamarin and Xamarin.Forms projects. We will provide a conversion tool and migration guides to help you transition to using .NET 6.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-mobile.png\u0022\u003E\u003Cimg class=\u0022aligncenter wp-image-31795 size-large\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-mobile-1024x536.png\u0022 alt=\u0022Announcing .NET 6 Preview 1\u0022 width=\u0022640\u0022 height=\u0022335\u0022 srcset=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-mobile-1024x536.png 1024w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-mobile-300x157.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-mobile-768x402.png 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-mobile.png 1475w\u0022 sizes=\u0022(max-width: 640px) 100vw, 640px\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EThis image demonstrates Android and iOS apps being launched with \u003Ca href=\u0022https://github.com/dotnet/xamarin/issues/26#issuecomment-757981580\u0022\u003Edotnet\u003C/a\u003E from the macOS terminal, running in the Android emulator, and iOS simulator, respectively. They could equally have been running on physical mobile hardware. The app includes code adapted from \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/samples/dotnet-runtimeinfo/Program.cs\u0022\u003Edotnet-runtimeinfo\u003C/a\u003E and is displaying the results with \u003Ccode\u003EDebug.WriteLine\u003C/code\u003E traces in the debug output window. This app is being run on the \u003Ca href=\u0022https://github.com/dotnet/runtime/tree/master/src/mono\u0022\u003EMono runtime\u003C/a\u003E with the .NET libraries, exercised with the .NET SDK.\u003C/p\u003E\n\u003Ch2 id=\u0022blazor-desktop-apps\u0022\u003EBlazor desktop apps\u003C/h2\u003E\n\u003Cp\u003E\u003Ca href=\u0022http://blazor.net/\u0022\u003EBlazor\u003C/a\u003E has become a very popular way to write .NET web apps. We first supported Blazor on the server, then in the browser with WebAssembly, and now we\u0026#8217;re extending it again, to enable you to write \u003Ca href=\u0022https://github.com/dotnet/aspnetcore/issues/27217\u0022\u003EBlazor desktop\u003C/a\u003E apps. Blazor desktop enables you to create hybrid client apps, which combine web and native UI together in a native client application. It is primarily targeted at web developers that want provide rich client and offline experiences for their users.\u003C/p\u003E\n\u003Cp\u003EUpdate: I\u0026#8217;m going to provide more context, based on several questions I received. Blazor is an application programming model. It is very adaptable, and can be executed in multiple ways (depending on the need). Blazor desktop will be structured similarly to the way Electron works. There will be a WebView control that renders content from an embedded Blazor web server, which can serve both Blazor and another other web content (JavaScript, CSS, \u0026#8230;). Blazor desktop, at least in its default configuration, will not use Blazor \u003Ca href=\u0022https://webassembly.org/\u0022\u003EWeb Assembly\u003C/a\u003E. In short, there is no obvious technical or user experience reason to use WebAssembly for a desktop app. Some people have noted that Blazor WebAssembly is too slow. On one hand, that\u0026#8217;s true. However, people should realize that we\u0026#8217;re working on \u003Ca href=\u0022https://github.com/dotnet/aspnetcore/issues/5466#issuecomment-781392764\u0022\u003EBlazor WebAssembly performance\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EBlazor desktop offers a lot of choice on how you construct your application. At one end of the application spectrum, you can use Blazor and web technologies for all aspects of the client application experience with the exception of the outer-most native application container (like the title bar). On the other end of the spectrum, you can use Blazor desktop for targeted functionality within an otherwise native app (like WPF), like a user profile page that you\u0026#8217;ve already implemented for your Blazor-based website. All the choices in between are equally possible. We are building Blazor desktop initially for .NET apps, but there is no technical reason why you couldn\u0026#8217;t use it in a desktop app built with another app stack, like for example Swift.\u003C/p\u003E\n\u003Cp\u003EBlazor desktop is built on top of .NET Multi-platform App UI. It relies on that UI stack for a native application container and native controls (should you want to use them). We are building Blazor to have startup and throughput performance on par with other desktop solutions. For developers that love Blazor and love web technologies, we think that Blazor is going to be a great choice for building desktop apps.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-macos.jpg\u0022\u003E\u003Cimg class=\u0022size-large wp-image-31825 aligncenter\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-macos-1024x678.jpg\u0022 alt=\u0022Image blazor macos\u0022 width=\u0022640\u0022 height=\u0022424\u0022 srcset=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-macos-1024x678.jpg 1024w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-macos-300x198.jpg 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-macos-768x508.jpg 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-macos-1536x1016.jpg 1536w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-macos.jpg 1850w\u0022 sizes=\u0022(max-width: 640px) 100vw, 640px\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EThe image above demonstrates a Blazor desktop app running on macOS. In this example, you can see that the entire app is built with Blazor with the exception of the outer chrome, which is provided by the Mac application container.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-windows.jpg.png\u0022\u003E\u003Cimg class=\u0022size-large wp-image-31826 aligncenter\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-windows.jpg-1024x819.png\u0022 alt=\u0022blazor windows jpg\u0022 width=\u0022640\u0022 height=\u0022512\u0022 srcset=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-windows.jpg-1024x819.png 1024w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-windows.jpg-300x240.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-windows.jpg-768x614.png 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/blazor-windows.jpg.png 1062w\u0022 sizes=\u0022(max-width: 640px) 100vw, 640px\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EThe image above demonstrates another Blazor desktop app, running on Windows. In this example, you see a WPF app with WPF controls and an island of Blazor that is able to interact with WPF (in this case, a WPF message box).\u003C/p\u003E\n\u003Ch2 id=\u0022fast-inner-loop\u0022\u003EFast inner loop\u003C/h2\u003E\n\u003Cp\u003EFast iterative development is the hallmark of any delightful and productive development platform. We\u0026#8217;ve started a new project that we\u0026#8217;re calling \u003Ca href=\u0022https://github.com/dotnet/core/issues/5510\u0022\u003Efast inner loop\u003C/a\u003E. The first part of the project is making the build run significantly faster with a set of performance-related projects. Another equally important part is creating new systems that will enable us to skip the build altogether, enabling your code edits to be applied to a live process without restarting it.\u003C/p\u003E\n\u003Cp\u003EWe\u0026#8217;ve been watching the Xamarin team innovate with the \u003Ca href=\u0022https://devblogs.microsoft.com/xamarin/public-preview-xaml-hot-reload-xamarin-forms/\u0022\u003EXAML Hot Reload experience\u003C/a\u003E over the last couple years and started to imagine enabling hot reload as a general .NET capability, and not just for XAML, but C#/IL. We\u0026#8217;re defining a new hot code reload model that we can offer for all app types. It\u0026#8217;s likely at least some of this feature will be implemented in the runtime, and we\u0026#8217;re committed to doing that with both CoreCLR and Mono. We want to enable a very fast build, and even faster operations for code changes that can skip the build entirely, as a new standard feature of .NET.\u003C/p\u003E\n\u003Ch2 id=\u0022arm64\u0022\u003EArm64\u003C/h2\u003E\n\u003Cp\u003EArm64 continues to be a big focus for us, and for the industry. We made major \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/arm64-performance-in-net-5/\u0022\u003Eimprovements in Arm64 performance with .NET 5.0\u003C/a\u003E, and will continue to invest in \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43629\u0022\u003EArm64 performance\u003C/a\u003E. For this release, we will focus our attention most on functional enablement.\u003C/p\u003E\n\u003Cp\u003EOn Windows, we\u0026#8217;re adding support for Windows Forms and Windows Presentation Framework (WPF), with initial support in Preview 1. This is on top of the Windows Arm64 capabilities we delivered with .NET 5. We will continue to make improvements with each preview based on \u003Ca href=\u0022https://github.com/dotnet/wpf/issues/4117\u0022\u003Efeedback\u003C/a\u003E. We said earlier that we planned to backport Windows Desktop app capabilities to .NET 5 after we\u0026#8217;d enabled it in early .NET 6 builds. That\u0026#8217;s still the plan, although I don\u0026#8217;t have a date to share yet. We are aiming for the first half of the year.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-windowsarm64-1.png\u0022\u003E\u003Cimg class=\u0022size-large wp-image-31814 aligncenter\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-windowsarm64-1-1024x568.png\u0022 alt=\u0022Image hello dotnet windowsarm64\u0022 width=\u0022640\u0022 height=\u0022355\u0022 srcset=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-windowsarm64-1-1024x568.png 1024w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-windowsarm64-1-300x166.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-windowsarm64-1-768x426.png 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/hello-dotnet-windowsarm64-1.png 1312w\u0022 sizes=\u0022(max-width: 640px) 100vw, 640px\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EThis image demonstrates a WPF running on a Windows Arm64 machine, using code adapted from \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/samples/dotnet-runtimeinfo/Program.cs\u0022\u003Edotnet-runtimeinfo\u003C/a\u003E. This is very similar to \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/36699\u0022\u003EWindows Forms examples\u003C/a\u003E that we demonstrated with .NET 5 (but didn\u0026#8217;t support until now).\u003C/p\u003E\n\u003Cp\u003EOn Mac, we are adding support for Apple Silicon (Arm64) chips (native and emulated), with initial support in Preview 1. We will support console apps, ASP.NET Core, Mac client apps (Mac and Mac Catalyst), and the .NET SDK. We will rely on x64 emulation for .NET 5 and earlier .NET Core releases. Apple Silicon is described in more detail later in the post.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.08.45-PM.png\u0022\u003E\u003Cimg class=\u0022aligncenter wp-image-31816 size-large\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.08.45-PM-1024x780.png\u0022 alt=\u0022Announcing .NET 6 Preview 1\u0022 width=\u0022640\u0022 height=\u0022488\u0022 srcset=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.08.45-PM-1024x780.png 1024w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.08.45-PM-300x228.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.08.45-PM-768x585.png 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.08.45-PM.png 1510w\u0022 sizes=\u0022(max-width: 640px) 100vw, 640px\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EThis image demonstrates support for Apple Silicon, using one of our ASP.NET samples. As you can see, it is running .NET 6.0 Arm64 on macOS (\u003Ca href=\u0022https://en.wikipedia.org/wiki/Darwin_(operating_system)\u0022\u003EDarwin\u003C/a\u003E is macOS and xnu is the kernel).\u003C/p\u003E\n\u003Ch2 id=\u0022containers\u0022\u003EContainers\u003C/h2\u003E\n\u003Cp\u003EContainers are a daily focus on the team, both as the basis of our \u003Ca href=\u0022https://github.com/dotnet/dotnet-buildtools-prereqs-docker\u0022\u003Ebuild infrastructure\u003C/a\u003E and as a \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/\u0022\u003Eproduct scenario\u003C/a\u003E. \u003Ca href=\u0022https://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/CSharp/aspnetcore\u0022\u003E.NET performance testing\u003C/a\u003E is also done in containers. We have multiple projects planned to improve containers in .NET 6.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EImprove \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/48094\u0022\u003Escaling in containers\u003C/a\u003E, and better support for \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/46889\u0022\u003EWindows process-isolated containers\u003C/a\u003E. We also plan a new form of container performance testing focused on density and aggregate machine performance.\u003C/li\u003E\n\u003Cli\u003EReduce container image size using PGO (more on that later; see \u0026#8220;very cold\u0026#8221; split).\u003C/li\u003E\n\u003Cli\u003EIncrease startup and throughput performance by using \u003Ca href=\u0022https://github.com/dotnet/coreclr/blob/v2.1.3/Documentation/botr/readytorun-overview.md#version-bubbles\u0022\u003Eready to run version bubbles\u003C/a\u003E.\u003C/li\u003E\n\u003Cli\u003EIncrease startup and throughput performance by using \u003Ca href=\u0022https://github.com/dotnet/designs/pull/173\u0022\u003Emodern vector instructions by default\u003C/a\u003E.\u003C/li\u003E\n\u003Cli\u003E[Advanced scenario] Enable large page support with \u003Ca href=\u0022https://github.com/dotnet/runtime/blob/master/docs/design/features/readytorun-composite-format-design.md\u0022\u003Eready to run composite images\u003C/a\u003E.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EAll (but the first) of these features are dependent on crossgen2, which is described later. Most of these features are not container-specific, however, we expect to use them in containers. In some cases, like version bubbles, containers may be the only distribution vehicle where a feature is enabled by default. An important benefit of containers is that we can offer .NET in a more opinionated configuration than the more general \u003Ccode\u003E.tar.gz\u003C/code\u003E, \u003Ccode\u003E.deb\u003C/code\u003E, or \u003Ccode\u003E.msi\u003C/code\u003E deliverables. We\u0026#8217;d rather offer containers in a higher-performance configuration with the downside that they may not be usable in all scenarios (like on old hardware).\u003C/p\u003E\n\u003Cp\u003EWhenever we start a new release, we look at the landscape of Linux distros to ensure we are making the best base-image version choices. .NET 6 images will be based on Alpine 3.13 (or later), Debian 11 (\u0026#8220;bullseye\u0026#8221;), and Ubuntu 20.04. We will not adopt a newer Ubuntu version (in containers) until Ubuntu 22.04 is released.\u003C/p\u003E\n\u003Cp\u003EThe Debian bullseye choice deserves more explanation. It is currently in a testing phase and we do not know when it will ship. There is an uncoordinated race between the Debian and .NET releases, and we\u0026#8217;re confident that .NET 6 will lose the race. Once we start releasing images for a new .NET release, we are not going to change the base image we use. We\u0026#8217;ve been using Debian 10 (\u0026#8220;buster\u0026#8221;) for multiple releases now. It\u0026#8217;s time to say goodbye to buster given that we\u0026#8217;ll support .NET 6 for three years.\u003C/p\u003E\n\u003Cp\u003EStarting with Preview 1, if you pull the \u003Ccode\u003E6.0\u003C/code\u003E tag, you will be using a \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/pull/2582\u0022\u003Ebullseye image\u003C/a\u003E. Bullseye has not been integrated into our CI environment yet, however, manual testing suggests that it is already a solid release, and compatible with buster. Please give us feedback if you have issues.\u003C/p\u003E\n\u003Cpre class=\u0022prettyprint\u0022\u003Erich@mazama:~$ docker run --rm mcr.microsoft.com/dotnet/sdk:6.0 cat /etc/debian_version\r\nbullseye/sid\r\nrich@mazama:~$ docker run --rm mcr.microsoft.com/dotnet/sdk:5.0 cat /etc/debian_version\r\n10.8\r\nrich@mazama:~$ docker run --rm mcr.microsoft.com/dotnet/sdk:3.1 cat /etc/debian_version\r\n10.8\r\nrich@mazama:~$ docker run --rm mcr.microsoft.com/dotnet/sdk:2.1 cat /etc/debian_version\r\n9.13\u003C/pre\u003E\n\u003Cp\u003EThis series of commands should make our bullseye adoption clearer and in contrast to choices we made for previous .NET versions. Once bullseye is released, the output of the first command will be 11.0.\u003C/p\u003E\n\u003Cp\u003ELet\u0026#8217;s continue with Apple Silicon examples. What happens when you pull our existing .NET 5 container samples with the knowledge that .NET 5 requires x64 emulation to run on Apple Silicon machines. Let\u0026#8217;s see.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.23.18-PM.png\u0022\u003E\u003Cimg class=\u0022aligncenter wp-image-31817 size-large\u0022 src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.23.18-PM-1024x755.png\u0022 alt=\u0022Announcing .NET 6 Preview 1\u0022 width=\u0022640\u0022 height=\u0022472\u0022 srcset=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.23.18-PM-1024x755.png 1024w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.23.18-PM-300x221.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.23.18-PM-768x566.png 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/02/Screen-Shot-2021-02-16-at-9.23.18-PM.png 1486w\u0022 sizes=\u0022(max-width: 640px) 100vw, 640px\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EThat\u0026#8217;s an Arm64 image. That might surprise you. .NET 5 already supports Arm64 on Linux, and that\u0026#8217;s what you see demonstrated in this image. So, no surprise. When you are running Linux containers, you are running Linux, not macOS. We\u0026#8217;ve tried \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/44897#issuecomment-780351923\u0022\u003Erunning amd64 .NET images on Apple Silicon\u003C/a\u003E, but that doesn\u0026#8217;t yet seem to be working correctly.\u003C/p\u003E\n\u003Cp\u003EAs a side note, we started a new blog post series on container images for 2021. The first is \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/staying-safe-with-dotnet-containers/\u0022\u003EStaying safe with .NET containers\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022theme-improve-startup-and-throughput-using-runtime-execution-information-pgo\u0022\u003ETheme: Improve startup and throughput using runtime execution information (PGO)\u003C/h2\u003E\n\u003Cp\u003EWith each of these previews, I\u0026#8217;ll describe one or two \u003Ca href=\u0022https://themesof.net/\u0022\u003E.NET 6 themes\u003C/a\u003E. I\u0026#8217;ll start with \u003Ca href=\u0022https://github.com/dotnet/core/issues/5491\u0022\u003EImprove startup and throughput using runtime execution information (PGO)\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EWe\u0026#8217;ve been using PGO since the early days of .NET. The goal of PGO is to optimize native code in binaries to make it more efficient to be executed by a CPU and other aspects of a computer. Optimized code makes apps launch and run faster, can reduce memory usage and even disk footprint. There are lots of techniques you can employ to that end. We take advantage of PGO \u0026#8212; for the native runtime \u0026#8212; that is offered by the C\u002B\u002B compilers that we use on Windows, macOS, and Linux. That\u0026#8217;s very related and important, but not what this theme is about.\u003C/p\u003E\n\u003Cp\u003EThis theme relates to the native code that the RyuJIT compiler generates, either at runtime or via the crossgen tool (into the \u003Ca href=\u0022https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md\u0022\u003Eready-to-run\u003C/a\u003E native code format). Crossgen and RyuJIT already support PGO, but we want to significantly improve this feature, both in terms of usability and performance benefit. We cannot use the C\u002B\u002B compiler PGO capabilities for RyuJIT, or by extension crossgen, because RyuJIT isn\u0026#8217;t built on top of a C\u002B\u002B compiler (in a codegen sense).\u003C/p\u003E\n\u003Cp\u003EThere is a lot to \u003Ca href=\u0022https://en.wikipedia.org/wiki/Profile-guided_optimization\u0022\u003Eprofile-guided optimization (PGO)\u003C/a\u003E. I\u0026#8217;ll start with an analogy. You are driving slowly down a big highway wishing you were already home. You think to yourself: \u0026#8220;most of the reason for this traffic jam isn\u0026#8217;t volume but the result of an uncoordinated set of drivers who are locally optimizing only in terms of the brake lights one car ahead of them. The tragedy of it all!\u0026#8221; In a world where traffic is profile-guided and optimized, a computer would record daily traffic patterns, and then compute optimal meter-by-meter paths for each car \u0026#8212; based on previously observed traffic patterns \u0026#8212; sent as a constant stream of instructions to each self-driving car computer. Traffic would be globally optimizing for efficiency and safety. You\u0026#8217;d get home at least a half hour earlier every day because of it. The government would be able to delay highway expansion projects, and instead use the money to fund schools and parks.\u003C/p\u003E\n\u003Cp\u003EOne PGO technique is \u003Ca href=\u0022https://reviews.llvm.org/rG94faadaca4e\u0022\u003Ehot-cold splitting\u003C/a\u003E: the code that is called most frequently in a binary is placed together and code that is used infrequently is placed in a separate grouping. Ideally, the code needed next in series of method calls (or basic blocks accesses) is already loaded in a CPU cache by virtue of being in the same physical sequence of loaded pages from disk. In that case, method or basic block invocation is lightning fast (as fast as the CPU allows). We also have a third split \u0026#8212; the \u0026#8220;very cold\u0026#8221; grouping \u0026#8212; which has no native code pre-compiled at all, for example for an else clause that throws an exception. That very cold code will be JITed if it is ever needed, which might not be a performance concern. We can produce significantly smaller binaries if we can identify a lot of candidates for the very cold state.\u003C/p\u003E\n\u003Cp\u003EPGO (in the general case, not just .NET) isn\u0026#8217;t generally popular because it very challenging to do well, at least with traditional models. The tools are often clunky and the process requires incredible attention to detail. You have to regularly go through a \u0026#8220;training\u0026#8221; exercise, where you run your app through various scenarios while a tool collects data about your app. You then feed that data into your compiler (in this case, crossgen). You then have to validate that you are happy with the results. You then have to rinse and repeat, both in terms of improving the set of scenarios you train with but also account for your app changing during development. You have to methodically follow all the prescribed steps with PGO if you want optimal results. It is a very tiring and frustrating process.\u003C/p\u003E\n\u003Cp\u003EThat\u0026#8217;s a description of PGO for .NET to date. In .NET 6, we plan to do the following:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ECreate a new set of tools for PGO training and data manipulation that are oriented around ease-of-use.\u003C/li\u003E\n\u003Cli\u003EPublish training data for the .NET libraries so that others (like Red Hat) can use, augment it, and also share training data.\u003C/li\u003E\n\u003Cli\u003EEnable collecting training data for apps running in production.\u003C/li\u003E\n\u003Cli\u003EEnable the JIT to use static training data at runtime.\u003C/li\u003E\n\u003Cli\u003EEnable the JIT to \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43618\u0022\u003Egenerate and use dynamic training data\u003C/a\u003E at runtime (training-less scenario).\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EWe expect that PGO can deliver wins on the order of 10% for startup and throughput. For compute-intensive workloads, the benefit could be greater. We expect to need two releases to deliver the full breadth of our vision. We are still defining the exact set of .NET 6 deliverables for PGO. We want to build the right long-term architecture (that avoids re-work down the road or cutting off future opportunities) while delivering compelling new value in this release. We hope to transition to using the new PGO tools (ourselves) in this release. Enabling PGO as a standard feature of .NET will be a significant step forward for the ecosystem.\u003C/p\u003E\n\u003Cp\u003EThe remainder of the post describes \u003Ca href=\u0022https://github.com/dotnet/core/issues/5853\u0022\u003Efeatures that are included in Preview 1\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022targeting-net-6\u0022\u003ETargeting .NET 6\u003C/h2\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/dotnet/designs/pull/174\u0022\u003Etarget framework monikers (TFMs) for .NET 6\u003C/a\u003E follow the approach that we adopted with \u003Ca href=\u0022https://github.com/dotnet/designs/blob/main/accepted/2020/net5/net5.md\u0022\u003E.NET 5\u003C/a\u003E. New TFMs have been added as a result of adding support for new platforms.\u003C/p\u003E\n\u003Cp\u003ETo target .NET 6, you need to use a .NET 6 TFM, for example:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022xml\u0022\u003E\u0026lt;TargetFramework\u0026gt;net6.0\u0026lt;/TargetFramework\u0026gt;\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThe full set of .NET 6 TFMs, including operating-specific ones follows.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Enet6.0\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003Enet6.0-android\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003Enet6.0-ios\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003Enet6.0-maccatalyst\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003Enet6.0-macos\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003Enet6.0-tvos\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003Enet6.0-windows\u003C/code\u003E\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThe compatibility relationships for each of these TFMs, both among this set, and with existing TFMs is discussed in \u003Ca href=\u0022https://github.com/dotnet/designs/pull/174\u0022\u003E.NET 6.0 Target Frameworks\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EWe expect that upgrading from .NET 5 to .NET 6 should be straightforward. Please report any breaking changes that you discover in the process of testing existing apps with .NET 6.\u003C/p\u003E\n\u003Ch2 id=\u0022net-cli\u0022\u003E.NET CLI\u003C/h2\u003E\n\u003Cp\u003EThe .NET CLI has enabled additional convenience experiences as a result of adopting the \u003Ca href=\u0022https://github.com/dotnet/command-line-api\u0022\u003ESystem.CommandLine\u003C/a\u003E libraries.\u003C/p\u003E\n\u003Ch3 id=\u0022response-files\u0022\u003EResponse files\u003C/h3\u003E\n\u003Cp\u003EA response file is a file that contains a set of command-line arguments for a tool. Response files satisfy two primary use cases: enables a command-line invocation to extend past the character limit of the terminal, and it is a convenience over typing the same commands repeatedly. Response file support has been added for the .NET CLI. The syntax is \u003Ccode\u003E@file.rsp\u003C/code\u003E. The format of the response file is a single line of text, just as it would be structured in a terminal.\u003C/p\u003E\n\u003Cp\u003EThe following animation illustrates using a response file with \u003Ccode\u003Edotnet build\u003C/code\u003E, demonstrated as: \u003Ccode\u003Edotnet build @demo.rsp\u003C/code\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cimg class=\u0022aligncenter size-large\u0022 src=\u0022https://user-images.githubusercontent.com/12663534/106341278-83eaac80-6251-11eb-82d1-c4e88ff370ba.gif\u0022 alt=\u0022.NET CLI response files\u0022 width=\u0022600\u0022 height=\u0022329\u0022 /\u003E\u003C/p\u003E\n\u003Ch3 id=\u0022directives\u0022\u003EDirectives\u003C/h3\u003E\n\u003Cp\u003EDirectives are a System.CommandLine experience for interacting with commands directly. Within the System.CommandLine model, commands are a set of objects that can be invoked or explored, as data with associated behavior.\u003C/p\u003E\n\u003Cp\u003EThe suggest \u003Ca href=\u0022https://github.com/dotnet/command-line-api/blob/main/docs/Syntax-Concepts-and-Parser.md#directives\u0022\u003Edirective\u003C/a\u003E enables you to search for commands if you don\u0026#8217;t know the exact command. This directive exists to enable the \u003Ca href=\u0022https://github.com/dotnet/command-line-api/blob/main/docs/dotnet-suggest.md\u0022\u003Edotnet-suggest global tool\u003C/a\u003E\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022console\u0022\u003Edotnet [suggest] buil\r\nbuild\r\nbuild-server\r\nmsbuild\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/dotnet/command-line-api/blob/main/docs/Features-overview.md#parse-preview\u0022\u003Eparse\u003C/a\u003E directive demonstrates the manner in which the CLI parses your commands. It can be useful to understand why a command doesn\u0026#8217;t work or has different results than you expect.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022console\u0022\u003Edotnet [parse] build -f net5.0\r\n[ dotnet [ build [ -f \u0026lt;net5.0\u0026gt; ] ] ]\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2 id=\u0022libraries\u0022\u003ELibraries\u003C/h2\u003E\n\u003Cp\u003EThe following APIs have been added to the .NET libraries.\u003C/p\u003E\n\u003Ch3 id=\u0022new-math-apis\u0022\u003ENew math APIs\u003C/h3\u003E\n\u003Cp\u003EThe following performance-oriented math APIs have been added to System.Math. Their implementation will be hardware accelerated if the underlying hardware supports it.\u003C/p\u003E\n\u003Cp\u003ENew APIs:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003ESinCos\u003C/code\u003E for simultaneously computing \u003Ccode\u003ESin\u003C/code\u003E and \u003Ccode\u003ECos\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003EReciprocalEstimate\u003C/code\u003E for computing an approximate of \u003Ccode\u003E1 / x\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003EReciprocalSqrtEstimate\u003C/code\u003E for computing an approximate of \u003Ccode\u003E1 / Sqrt(x)\u003C/code\u003E\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ENew overloads:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EClamp\u003C/code\u003E, \u003Ccode\u003EDivRem\u003C/code\u003E, \u003Ccode\u003EMin\u003C/code\u003E, and \u003Ccode\u003EMax\u003C/code\u003E supporting \u003Ccode\u003Enint\u003C/code\u003E and \u003Ccode\u003Enuint\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003EAbs\u003C/code\u003E and \u003Ccode\u003ESign\u003C/code\u003E supporting \u003Ccode\u003Enint\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003EDivRem\u003C/code\u003E variants which return a tuple\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3 id=\u0022improved-support-for-windows-acls\u0022\u003EImproved support for Windows ACLs\u003C/h3\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://www.nuget.org/packages/System.Threading.AccessControl/\u0022\u003ESystem.Threading.AccessControl\u003C/a\u003E now includes improved support for interacting with Windows access control lists (ACLs). New overloads were added to the \u003Ccode\u003EOpenExisting\u003C/code\u003E and \u003Ccode\u003ETryOpenExisting\u003C/code\u003E methods for \u003Ccode\u003EEventWaitHandle\u003C/code\u003E, \u003Ccode\u003EMutex\u003C/code\u003E and \u003Ccode\u003ESemaphore\u003C/code\u003E. These overloads \u0026#8212; with \u0026#8220;security rights\u0026#8221; instances \u0026#8212; enable opening existing instances of threading synchronization objects that were created with special Windows security attributes. This update matches APIs already available in .NET Framework and has the same behavior.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022cs\u0022\u003Enamespace System.Threading\r\n{\r\n    public static partial class EventWaitHandleAcl\r\n    {\r\n        public static EventWaitHandle OpenExisting(string name, EventWaitHandleRights rights);\r\n        public static bool TryOpenExisting(string name, EventWaitHandleRights rights, out EventWaitHandle result);\r\n    }\r\n    public static partial class MutexAcl\r\n    {\r\n        public static Mutex OpenExisting(string name, MutexRights rights);\r\n        public static bool TryOpenExisting(string name, MutexRights rights, out Mutex result);\r\n    }\r\n    public static partial class SemaphoreAcl\r\n    {\r\n        public static Semaphore OpenExisting(string name, SemaphoreRights rights);\r\n        public static bool TryOpenExisting(string name, SemaphoreRights rights, out Semaphore result);\r\n    }\r\n}\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch3 id=\u0022portable-thread-pool\u0022\u003EPortable thread pool\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/dotnet/runtime/pull/38225\u0022\u003E.NET thread pool has been re-implemented\u003C/a\u003E as a managed implementation and is now used as the default thread pool in .NET 6. We made this change to enable applications to have access to the same thread pool \u0026#8212; with identical behavior \u0026#8212; independent of whether the CoreCLR, Mono, or any other runtime was being used. We consider this thread pool the standard for .NET going forward. We have not observed or expect any functional or performance impact as part of this change.\u003C/p\u003E\n\u003Cp\u003EWe expect that the thread pool will now be more accessible for experimentation or customization by virtue of being written in C#.\u003C/p\u003E\n\u003Cp\u003EYou can revert to using the native-implement runtime thread pool with: \u003Ccode\u003ECOMPlus_ThreadPool_UsePortableThreadPool=0\u003C/code\u003E. We have not decided how long we will maintain the old thread pool.\u003C/p\u003E\n\u003Ch2 id=\u0022runtime\u0022\u003ERuntime\u003C/h2\u003E\n\u003Cp\u003EThere are several new runtime features that are part of Preview 1, include Apple Silicon support, crossgen 2, and the beginnings of delivering on the PGO theme discussed earlier.\u003C/p\u003E\n\u003Ch3 id=\u0022support-for-apple-silicon\u0022\u003ESupport for Apple Silicon\u003C/h3\u003E\n\u003Cp\u003EThe new Apple M1 Arm64 chips received a lot of industry fanfare earlier this year. \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43313\u0022\u003EApple Silicon support\u003C/a\u003E is a key deliverable of .NET 6. The team has been working on enabling support for the Apple Silicon chip ever since we received \u003Ca href=\u0022https://en.wikipedia.org/wiki/Developer_Transition_Kit\u0022\u003EDeveloper Transition Kits (DTKs)\u003C/a\u003E from Apple in 2020. .NET 6 Preview 1 includes the first enablement of Apple Silicon; however, you should consider our builds alpha-quality at this stage. We have several design issues to work through and significant validation to ensure a high-quality product.\u003C/p\u003E\n\u003Cp\u003ENote: We use the terms \u0026#8220;Apple Silicon\u0026#8221;, \u0026#8220;Apple M1\u0026#8221;, and \u0026#8220;Apple Arm64\u0026#8221; largely interchangeably in this post and issues on GitHub. We consider \u0026#8220;Apple Silicon\u0026#8221; to be the best general term unless specifically referring to a given chip\u0026#8217;s capabilities, which will make more sense once Apple releases later variants of its chip (perhaps an \u0026#8220;M2\u0026#8221;).\u003C/p\u003E\n\u003Cp\u003EApple Silicon chips have two different modes: native and (x64) emulated. Emulation is implemented (in part) in the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Rosetta_(software)#Rosetta_2\u0022\u003ERosetta 2 component\u003C/a\u003E. x64 emulation has been widely reported to be very good on Apple M1 devices.\u003C/p\u003E\n\u003Cp\u003EFor .NET 6, we will deliver both Arm64 and x64 builds for macOS. We will continue to deliver only x64 builds for earlier .NET and .NET Core releases, and will rely on Rosetta 2 emulation for their use on Apple Silicon machines. The project to enable Apple Silicon support has been significant and required a large enough set of code changes that we are not considering backporting them to .NET 5 or earlier .NET Core versions.\u003C/p\u003E\n\u003Cp\u003EHere are examples of .NET 5 and .NET 6 running on an Apple Silicon machine.\u003C/p\u003E\n\u003Cpre class=\u0022prettyprint\u0022\u003Erich@MacBook-Air dotnet-runtimeinfo % pwd\r\n/Users/rich/git/core/samples/dotnet-runtimeinfo\r\nrich@MacBook-Air dotnet-runtimeinfo % dotnet run\r\n**.NET information\r\nVersion: 5.0.3\r\nFrameworkDescription: .NET 5.0.3\r\nLibraries version: 5.0.3\r\nLibraries hash: c636bbdc8a2d393d07c0e9407a4f8923ba1a21cb\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Jan 22 03:28:00 PST 2021; root:xnu-7195.100.296.111.3~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.0.0\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\nrich@MacBook-Air dotnet-runtimeinfo % export DOTNET_ROLL_FORWARD=Major\r\nrich@MacBook-Air dotnet-runtimeinfo % export DOTNET_ROLL_TO_PRERELEASE=1\r\nrich@MacBook-Air dotnet-runtimeinfo % dotnet run\r\n**.NET information\r\nVersion: 6.0.0\r\nFrameworkDescription: .NET 6.0.0-preview.1.21102.12\r\nLibraries version: 6.0.0-preview.1.21102.12\r\nLibraries hash: 9b2776d48183632662e0be873cef029cdb57f8d6\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Jan 22 03:28:00 PST 2021; root:xnu-7195.100.296.111.3~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\u003C/pre\u003E\n\u003Cp\u003EThis example is misleading. I\u0026#8217;ll explain why in the known issues section.\u003C/p\u003E\n\u003Cp\u003EWe are also validating that .NET container images \u0026#8212; both x64 and Arm64 \u0026#8212; work correctly on Apple Silicon machines. You saw examples of that earlier in that post.\u003C/p\u003E\n\u003Cp\u003EApple has been a great partner with our Apple Silicon work. They have helped us in multiple ways and have expressed that they want .NET developers and users to be productive and happy on Apple Silicon devices. Thanks Apple folks!\u003C/p\u003E\n\u003Ch4 id=\u0022native-apple-silicon\u0022\u003ENative Apple Silicon\u003C/h4\u003E\n\u003Cp\u003EThe new Apple chip has stricter requirements than other Arm64 chips that we support. Apple published \u003Ca href=\u0022https://developer.apple.com/documentation/apple_silicon/porting_just-in-time_compilers_to_apple_silicon\u0022\u003EPorting Just-In-Time Compilers to Apple Silicon\u003C/a\u003E, and associated new APIs, realizing that application runtimes that rely on a JIT compiler would require changes. At least half of our discussions with Apple centered on the topics outlined in this document. These new requirements are satisfied in the .NET 6 Preview 1 build.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://developer.apple.com/documentation/xcode/building_a_universal_macos_binary\u0022\u003EUniversal binaries\u003C/a\u003E is another new requirement for apps that are published via the Mac app store. Publishing via the store isn\u0026#8217;t a capability we currently support, nor is it something that we hear requested much from .NET developers. We will not be enabling a workflow to publish universal binaries for .NET apps this release. We will reconsider this need with .NET 7.\u003C/p\u003E\n\u003Cp\u003ENote: Mac supports both native and emulated apps to be run concurrently, however a single process is always either native or emulated. That isn\u0026#8217;t a problem for .NET apps, but is something you should be aware of (with any app platform). Activity Monitor displays the architecture of each process on your Mac so that it is easy to tell if apps have been ported to native or are relying on emulation.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://developer.apple.com/documentation/apple_silicon/addressing_architectural_differences_in_your_macos_code\u0022\u003EApple Silicon ABI\u003C/a\u003E requirements are different from both Mac Intel and from other Arm64 platforms we support. The .NET runtime supports several different calling conventions due to \u003Ca href=\u0022https://en.wikipedia.org/wiki/Application_binary_interface\u0022\u003EABI\u003C/a\u003E differences, such that \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/41130\u0022\u003Esupporting Apple Silicon ABI requirements\u003C/a\u003E are not a unique challenge.\u003C/p\u003E\n\u003Cp\u003EThe following changes have been made to \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/41130\u0022\u003Esupport Apple Silicon Arm64 ABI requirements\u003C/a\u003E.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/42503\u0022\u003EUse bytes in \u003Ccode\u003EfgArgTabEntry\u003C/code\u003E\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/43024\u0022\u003ESupport byte sizes from lowering to codegen\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/43130\u0022\u003EPreserve precise argument sizes\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/46034\u0022\u003EUse 4-byte stack alignment for \u003Ccode\u003Ehfa\u0026lt;float\u0026gt;\u003C/code\u003E\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/46665\u0022\u003EArg alignment\u003C/a\u003E\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch5 id=\u0022debugging\u0022\u003EDebugging\u003C/h5\u003E\n\u003Cp\u003EDebugging a .NET app running natively doesn\u0026#8217;t currently work, locally or remotely, in any Visual Studio product. Debugging will be enabled in a later preview (we hope Preview 3).\u003C/p\u003E\n\u003Cp\u003EYou can use one of the following workaround options in absence of native debugging being available.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ELaunch and debug the app using the \u003Ccode\u003Ex64\u003C/code\u003E runtime, using Rosetta 2 emulation.\u003C/li\u003E\n\u003Cli\u003EDebug on another platform, such as an Intel Mac or Linux Arm64.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EFor advanced users: use the lldb native debugger with the \u003Ca href=\u0022https://docs.microsoft.com/dotnet/core/diagnostics/sos-debugging-extension\u0022\u003Esos-debugging-extension\u003C/a\u003E. You must build the extension from the \u003Ca href=\u0022https://github.com/dotnet/diagnostics\u0022\u003Edotnet/diagnostics repo\u003C/a\u003E and then load it as an lldb plugin, as follows.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022console\u0022\u003E(lldb) plugin load /Users/stmaclea/git/diagnostics/artifacts/bin/OSX.arm64.Debug/libsosplugin.dylib\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch5 id=\u0022known-issues\u0022\u003EKnown issues\u003C/h5\u003E\n\u003Cp\u003EThe following issues are present in Preview 1 and will be resolved in a later Preview.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFor large stack allocations, the \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/42023\u0022\u003EJIT can fail to generate stack clear code\u003C/a\u003E since the Apple Silicon page size is 16K.\u003C/li\u003E\n\u003Cli\u003EReliability isn\u0026#8217;t yet at parity with x64.\n\u003Cul\u003E\n\u003Cli\u003EA small number of tests are failing GC Stress testing.\u003C/li\u003E\n\u003Cli\u003EA small number of tests exhibit intermittent failures.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003ECI testing is not enabled (due to machine availability) so test coverage is from manual testing.\u003C/li\u003E\n\u003Cli\u003EWe have not yet designed an experience to use emulated and native .NET versions together on Apple Silicon. If you want to use .NET 6 and .NET 5, for example, on the same machine, you should probably use the \u003Ccode\u003E.tar.gz.\u003C/code\u003E distribution rather that \u003Ccode\u003E.pkg\u003C/code\u003E, so that you can control the version (if any) that is in the path.\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003E.tar.gz.\u003C/code\u003E packages are reported as malicious software.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EIn the example shown earlier, with both .NET 5 and .NET 6 in the same flow, I installed the .NET 5 \u003Ccode\u003E.pkg\u003C/code\u003E, ran the example, deleted the entire machine-wide dotnet directory and then installed the .NET 6 \u003Ccode\u003E.pkg\u003C/code\u003E. One of the key problems that there is only one dotnet executable on the machine, and it has to be loaded in both native and emulated processes. We haven\u0026#8217;t enabled that yet, but we are looking into it.\u003C/p\u003E\n\u003Ch4 id=\u0022net-rosetta-2-emulation\u0022\u003E.NET Rosetta 2 Emulation\u003C/h4\u003E\n\u003Cp\u003EA shared goal between Apple and Microsoft is that \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/44897\u0022\u003E.NET x64 products will run in Rosetta 2 emulation\u003C/a\u003E without changes. We\u0026#8217;ve found that .NET 5 macOS x64 builds work well with Big Sur 11.2\u002B. Please make sure that you have the latest build of Big Sur if you are using .NET with emulation. Earlier Big Sur builds were found to be problematic.\u003C/p\u003E\n\u003Cp\u003E.NET 5 x64 testing by Microsoft, Apple, and the community shows:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EStability and performance are good.\u003C/li\u003E\n\u003Cli\u003EDebugging is fully functional.\u003C/li\u003E\n\u003Cli\u003EPerformance is slow when debugging.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EWe have not yet performed a full test pass on .NET and .NET Core x64 versions running in Rosetta 2 emulation. We will work through the process of validating current behavior, and then determine how to resolve issues, as needed, to ensure high-quality and high-performance x64 product experiences on Apple Silicon.\u003C/p\u003E\n\u003Cp\u003EWe do not expect that Rosetta 2 emulation will be supported on Apple Silicon forever, but that it is intended as a temporary migration bridge to Arm64. Our primary focus is on enabling a competitive Arm64 experience on Apple Silicon. We will continue to support .NET on Mac Intel machines as long as Apple supports them.\u003C/p\u003E\n\u003Ch3 id=\u0022improving-single-file-apps\u0022\u003EImproving single file apps\u003C/h3\u003E\n\u003Cp\u003EIn .NET 6, \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43072\u0022\u003Esingle file apps have been enabled for Windows and macOS\u003C/a\u003E. In .NET 5, \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/announcing-net-5-0/#single-file-applications\u0022\u003Esingle files apps were limited to Linux\u003C/a\u003E. In .NET 6, for all supported operating systems, you can publish a single-file binary that has exactly one file on disk and does not need to extract any of the \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43072\u0022\u003Ecore runtime assemblies\u003C/a\u003E to temporary directories.\u003C/p\u003E\n\u003Cp\u003EThis capability is based on a building block called \u0026#8220;superhost\u0026#8221;. The normal \u0026#8220;apphost\u0026#8221; is the executable that launches your application, like \u003Ccode\u003Emyapp.exe\u003C/code\u003E or \u003Ccode\u003E./myapp\u003C/code\u003E. Apphost contains code to find the runtime, load it, and start your app with that runtime. Superhost still performs those tasks, but also includes a statically linked copy of all the CoreCLR native binaries. That removes the need for CoreCLR native binaries to be made available elsewhere.\u003C/p\u003E\n\u003Cp\u003EThere are cases where a single file app will have more than one file. WPF native dependencies are not part of the superhost, resulting in additional files beside the single file app. The same is true for any other native binaries that you happen to depend on.\u003C/p\u003E\n\u003Ch3 id=\u0022single-file-signing-on-macos\u0022\u003ESingle-file signing on macOS\u003C/h3\u003E\n\u003Cp\u003ESingle file apps now satisfy Apple notarization and signing requirements on macOS. The \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/3671\u0022\u003Especific changes\u003C/a\u003E relate to the way that we construct single file apps in terms of discrete file layout.\u003C/p\u003E\n\u003Cp\u003EApple started \u003Ca href=\u0022https://developer.apple.com/news/?id=09032019a\u0022\u003Eenforcing new requirements\u003C/a\u003E for \u003Ca href=\u0022https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution\u0022\u003Esigning and notarization\u003C/a\u003E with \u003Ca href=\u0022https://support.apple.com/kb/SP803\u0022\u003EmacOS Catalina\u003C/a\u003E. We\u0026#8217;ve been working closely with Apple to understand the requirements, and to find solutions that enable a development platform like .NET to work well in that environment. We\u0026#8217;ve made \u003Ca href=\u0022https://docs.microsoft.com/dotnet/core/install/macos-notarization-issues\u0022\u003Eproduct changes and documented user workflows\u003C/a\u003E that are required to satisfy Apple requirements in each of the last few.NET releases. One of the remaining gaps was single-file signing, which is a requirement to distribute a .NET app on macOS, including in the macOS store.\u003C/p\u003E\n\u003Ch3 id=\u0022crossgen2\u0022\u003ECrossgen2\u003C/h3\u003E\n\u003Cp\u003ECrossgen2 is a replacement of the \u003Ca href=\u0022https://github.com/dotnet/runtime/blob/master/docs/workflow/building/coreclr/crossgen.md\u0022\u003Ecrossgen tool\u003C/a\u003E. It is intended to satisfy two outcomes: make crossgen development more efficient and enable a set of capabilities that are not currently possible with crossgen. This transition is somewhat similar to the native code csc.exe to managed-code Roslyn-based compiler (if you recall the Roslyn project). Crossgen2 is written in C#, however, it doesn\u0026#8217;t expose a fancy API like Roslyn does.\u003C/p\u003E\n\u003Cp\u003EThe PGO plans we have are contingent on crossgen2, as are \u003Ca href=\u0022https://github.com/dotnet/designs/pull/173\u0022\u003Eother plans that affect ready-to-run code generation\u003C/a\u003E. There are perhaps a half-dozen projects we have planned for .NET 6 that are dependent on crossgen2. I\u0026#8217;ll be describing those in later previews. Suffice to say, crossgen2 is a very important project.\u003C/p\u003E\n\u003Cp\u003ECrossgen2 will enable cross-compilation (hence the name \u0026#8220;crossgen\u0026#8221;) across operating system and architecture dimensions. That means that you will be able to use a single build machine to generate native code for all targets, at least as it relates to ready-to-run code. Running and testing that code is a different story, however, and you\u0026#8217;ll need appropriate hardware and operating systems for that.\u003C/p\u003E\n\u003Cp\u003EThe first step (and test) for us is to compile the platform itself with crossgen2. The System.Private.Corelib assembly is compiled by crossgen2 in Preview 1. In subsequent previews, we will target progressively broader parts of the product until the entire .NET SDK is compiled with crossgen2 for all platforms and architectures. That\u0026#8217;s our goal for the release and a necessary pre-condition for retiring the existing crossgen. Note that crossgen2 only applies to CoreCLR and not to Mono-based applications (which have a separation set of native code tools).\u003C/p\u003E\n\u003Cp\u003EThis project \u0026#8212; at least at first \u0026#8212; is not oriented on performance. The goal is to enable a much better architecture for hosting the RyuJIT (or any other) compiler to generate code in an offline manner (not requiring or starting the runtime). In our early testing, we haven\u0026#8217;t observed any performance differences, which is exactly what is expected.\u003C/p\u003E\n\u003Cp\u003EYou might say \u0026#8220;hey \u0026#8230; don\u0026#8217;t you have to start the runtime to run crossgen2 if it is written in C#?\u0026#8221; Yes, but that\u0026#8217;s not what is meant by \u0026#8220;offline\u0026#8221; in this context. When crossgen2 runs, we\u0026#8217;re not using the JIT that comes with the runtime that crossgen2 is running on to generate \u003Ca href=\u0022https://github.com/dotnet/runtime/blob/master/docs/design/coreclr/botr/readytorun-format.md\u0022\u003Eready-to-run (R2R) code\u003C/a\u003E. That won\u0026#8217;t work, at least not with the goals we have. Imagine crossgen2 is running on an x64 machine, and we need to generate code for Arm64. Crossgen2 loads the Arm64 RyuJIT \u0026#8212; compiled for x64 \u0026#8212; as a native plugin, and then uses it to generate Arm64 R2R code. The machine instructions are just a stream of bytes that are saved to a file. It can also work in the opposite direction. On Arm64, crossgen2 can generate x64 code using the x64 RyuJIT compiled to Arm64. We use the same approach to target x64 code on x64 machines. Crossgen2 loads a RyuJIT built for that configuration. That may seem complicated, but it\u0026#8217;s the sort of system you need in place if you want to enable seamless user experiences, and that\u0026#8217;s exactly what we want.\u003C/p\u003E\n\u003Cp\u003EFor now, the SDK still defaults to using the existing crossgen. The default will change to crossgen2 in an upcoming preview.\u003C/p\u003E\n\u003Cp\u003EWe hope to use the term \u0026#8220;crossgen2\u0026#8221; for just one release, after which it will replace the existing crossgen, and then we\u0026#8217;ll go back to using the \u0026#8220;crossgen\u0026#8221; term for \u0026#8220;crossgen2\u0026#8221;. In the rare case we need to, we\u0026#8217;ll say \u0026#8220;the old crossgen\u0026#8221; or \u0026#8220;crossgen1\u0026#8221; to refer to the old one.\u003C/p\u003E\n\u003Ch3 id=\u0022dynamic-pgo\u0022\u003EDynamic PGO\u003C/h3\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43618\u0022\u003EDynamic PGO\u003C/a\u003E is one of the PGO modalities that we are exploring and enabling. On one hand, it can be thought of as \u0026#8220;training-less\u0026#8221; PGO. Earlier in the post, I described a challenging process for PGO. The advantage of dynamic PGO is that it doesn\u0026#8217;t require any of that. The disadvantage is that it takes longer for a process to get to optimal performance. On the other hand, dynamic PGO can be thought of as a replacement for the much simpler (and less effective) policies used by tiered compilation today.\u003C/p\u003E\n\u003Cp\u003EIn the most compelling case, dynamic and static PGO compose together. At runtime, the JIT can refine a small subset of statically compiled PGO-optimized code to provide the most high-value benefits. For example, the JIT can notice that there is only one class in the process (loaded so far) that implements a given interface. The JIT can then generate direct calls (via the class) instead of indirect calls (via the interface). This classic compiler technique is called \u003Ca href=\u0022https://en.wikipedia.org/wiki/Virtual_method_table#Efficiency\u0022\u003Edevirtualizion\u003C/a\u003E, and results in higher performance by removing indirections in method invocation (small win) and enabling inlining (big win).\u003C/p\u003E\n\u003Cp\u003EThe following changes have been made as part of enabling dynamic PGO:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/45133\u0022\u003EGuarded devirtualization\u003C/a\u003E \u0026#8212; Enable guarded devirtualization by class profile and probes for class types.\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/42657\u0022\u003EFlowgraph visualizations\u003C/a\u003E \u0026#8212; Graphical dump of flow graph with profile data.\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/46257\u0022\u003ERedundant branch elimination\u003C/a\u003E \u0026#8212; Optimize branches where a branch outcome is fully determined.\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/45854\u0022\u003EEnable CSE for PGO scenarios\u003C/a\u003E \u0026#8212; Enable \u003Ca href=\u0022https://en.wikipedia.org/wiki/Common_subexpression_elimination\u0022\u003ECSE\u003C/a\u003E of PGO introduced type tests.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3 id=\u0022arm64-performance\u0022\u003EArm64 performance\u003C/h3\u003E\n\u003Cp\u003EWe are planning another round of \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43629\u0022\u003EArm64 performance improvements in .NET 6\u003C/a\u003E, to add to \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/arm64-performance-in-net-5/\u0022\u003EArm64 Performance in .NET 5\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EThe following change is included in Preview 1.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/46609\u0022\u003EStack frame zeroing\u003C/a\u003E \u0026#8212; Use SIMD register to zero init frame\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\u003Cimg class=\u0022aligncenter\u0022 src=\u0022https://user-images.githubusercontent.com/63486087/106191399-ac927980-615f-11eb-83cf-a7647c342618.png\u0022 alt=\u0022Announcing .NET 6 Preview 1\u0022 width=\u00223303\u0022 height=\u00221983\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThis image demonstrates an improvement in zeroing out the contents of stack frames, which is a common operation. The green line is the new behavior, while the orange line is another (less beneficial) experiment, both of which improve relative to the baseline, represented by the blue line. For this test, lower is better.\u003C/p\u003E\n\u003Ch3 id=\u0022hardware-accelerating-structs\u0022\u003EHardware-accelerating structs\u003C/h3\u003E\n\u003Cp\u003EStructs are an important part of the CLR type system. In recent years, they have been frequently used as a performance tool, way up at the level of C#. Examples are \u003Ccode\u003EValueTask\u003C/code\u003E, \u003Ccode\u003EValueTuple\u003C/code\u003E and \u003Ccode\u003ESpan\u0026lt;T\u0026gt;\u003C/code\u003E. Sadly, structs have not been given the performance love they deserve in the JIT. In .NET 5 and \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43867\u0022\u003E.NET 6\u003C/a\u003E, we\u0026#8217;ve been improving performance for structs, in part by ensuring that they can be loaded and accessed in CPU registers (as the arguments of methods).\u003C/p\u003E\n\u003Cp\u003EThe following changes are included in Preview 1:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/43870\u0022\u003EStruct promotion for HFAs\u003C/a\u003E \u0026#8212; Struct promotion for HFA and non-HFA multireg args on x64 and Arm64\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/runtime/pull/39326\u0022\u003EEnregister HFAs\u003C/a\u003E \u0026#8212; Enregister HFAs and other structs with matching fields.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ENote: See \u003Ca href=\u0022https://docs.microsoft.com/en-us/cpp/build/arm64-windows-abi-conventions\u0022\u003EOverview of ABI conventions\u003C/a\u003E for terms.\u003C/p\u003E\n\u003Ch3 id=\u0022stabilize-performance-measurements\u0022\u003EStabilize performance measurements\u003C/h3\u003E\n\u003Cp\u003EThere is a tremendous amount of engineering systems work on the team that never appears on the blog. That will be true for any hardware or software product you use. The JIT team recently took on a project to \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43227\u0022\u003Estabilize performance measurements\u003C/a\u003E with the goal of increasing the value of regressions that are auto-reported by our internal performance lab automation. This project is interesting because of the \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43227\u0022\u003Ein-depth investigation\u003C/a\u003E and the \u003Ca href=\u0022https://github.com/dotnet/runtime/pull/44370\u0022\u003Eproduct changes\u003C/a\u003E that were required to enable stability. It also demonstrates the scale at which we need to measure to maintain and improve performance.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg class=\u0022aligncenter\u0022 src=\u0022https://user-images.githubusercontent.com/63486087/106191620-f8452300-615f-11eb-934d-e00495992f1d.png\u0022 alt=\u0022perf-#43227\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThis image demonstrates unstable performance measurements. The scale is hundredths of a nanosecond. By the end of the chart (after these changes were committed), you can see that measurements stabilized. This image demonstrates a single test. There are many more tests that are demonstrated to have similar behavior at \u003Ca href=\u0022https://github.com/dotnet/runtime/issues/43227\u0022\u003Edotnet/runtime #43227\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022closing\u0022\u003EClosing\u003C/h2\u003E\n\u003Cp\u003E.NET 6 promises to be another exciting release with many compelling improvements. It is a particularly interesting release because it contains changes as a result of needing to adapt to externally focused operating system evolution, and also continuing to innovate within the .NET platform itself. It is also the continuation of increased openness from the .NET team, both in terms of open planning but also sharing previously proprietary performance tools. We haven\u0026#8217;t achieved it just yet, but .NET 6 will be the second November release in a row, in our new annual cadence. Given the success of \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/announcing-net-5-0/\u0022\u003Eshipping .NET 5 in November 2020\u003C/a\u003E, in a very challenging environment, there is every reason to expect .NET 6 will also be released on time.\u003C/p\u003E\n\u003Cp\u003EIn the past release, there was a little ambiguity in blog posts, docs, and other websites about the actual name of the release. Now that we have switched to an annual cadence, and do not see much likelihood of releasing minor releases in between, we have stopped using the \u0026#8220;.0\u0026#8221; branding of the release. In the .NET 5 blog posts, I used the \u0026#8220;5.0\u0026#8221; branding throughout. Going forward, I intend to call .NET 6 simply \u0026#8220;.NET 6\u0026#8221; and not \u0026#8220;.NET 6.0\u0026#8221;. I encourage you to do the same. It\u0026#8217;s not a big deal, but I wanted to clarify our intentions.\u003C/p\u003E\n\u003Cp\u003EA big change this release is fully integrating Android and iOS as part of the existing Xamarin workloads. That requires the obvious requirement to integrating a bunch of code, build systems, and other technology. It also requires integrating blogs, docs, and samples. While we\u0026#8217;ve worked with the Xamarin team for many years, we welcome all of our Xamarin friends to the .NET 6 project. We also welcome Xamarin users to being a part of .NET 6. These releases are quite a ride. You can expect new previews, pretty much like clockwork, once a month. I\u0026#8217;ll try and include more and more mobile-related content in each of the monthly posts as we go on this journey together. It\u0026#8217;s going to be fun, and like I said at the start of the post, .NET unification is the heart of this release.\u003C/p\u003E\n\u003Cp\u003EWelcome to .NET 6.\u003C/p\u003E\n\u003Cdiv class=\u0022ms-editor-squiggler\u0022 style=\u0022color: initial; font: initial; font-feature-settings: initial; font-kerning: initial; font-optical-sizing: initial; font-variation-settings: initial; forced-color-adjust: initial; text-orientation: initial; text-rendering: initial; -webkit-font-smoothing: initial; -webkit-locale: initial; -webkit-text-orientation: initial; -webkit-writing-mode: initial; writing-mode: initial; zoom: initial; place-content: initial; place-items: initial; place-self: initial; alignment-baseline: initial; animation: initial; appearance: initial; aspect-ratio: initial; backdrop-filter: initial; backface-visibility: initial; background: initial; background-blend-mode: initial; baseline-shift: initial; block-size: initial; border-block: initial; border: initial; border-radius: initial; border-collapse: initial; border-inline: initial; inset: initial; box-shadow: initial; box-sizing: initial; break-after: initial; break-before: initial; break-inside: initial; buffered-rendering: initial; caption-side: initial; caret-color: initial; clear: initial; clip: initial; clip-path: initial; clip-rule: initial; color-interpolation: initial; color-interpolation-filters: initial; color-rendering: initial; color-scheme: initial; columns: initial; column-fill: initial; gap: initial; column-rule: initial; column-span: initial; contain: initial; contain-intrinsic-size: initial; content: initial; content-visibility: initial; counter-increment: initial; counter-reset: initial; counter-set: initial; cursor: initial; cx: initial; cy: initial; d: initial; display: block; dominant-baseline: initial; empty-cells: initial; fill: initial; fill-opacity: initial; fill-rule: initial; filter: initial; flex: initial; flex-flow: initial; float: initial; flood-color: initial; flood-opacity: initial; grid: initial; grid-area: initial; height: 0px; hyphens: initial; image-orientation: initial; image-rendering: initial; inline-size: initial; inset-block: initial; inset-inline: initial; isolation: initial; letter-spacing: initial; lighting-color: initial; line-break: initial; list-style: initial; margin-block: initial; margin: initial; margin-inline: initial; marker: initial; mask: initial; mask-type: initial; max-block-size: initial; max-height: initial; max-inline-size: initial; max-width: initial; min-block-size: initial; min-height: initial; min-inline-size: initial; min-width: initial; mix-blend-mode: initial; object-fit: initial; object-position: initial; offset: initial; opacity: initial; order: initial; origin-trial-test-property: initial; orphans: initial; outline: initial; outline-offset: initial; overflow-anchor: initial; overflow-wrap: initial; overflow: initial; overscroll-behavior-block: initial; overscroll-behavior-inline: initial; overscroll-behavior: initial; padding-block: initial; padding: initial; padding-inline: initial; page: initial; page-orientation: initial; paint-order: initial; perspective: initial; perspective-origin: initial; pointer-events: initial; position: initial; quotes: initial; r: initial; resize: initial; ruby-position: initial; rx: initial; ry: initial; scroll-behavior: initial; scroll-margin-block: initial; scroll-margin: initial; scroll-margin-inline: initial; scroll-padding-block: initial; scroll-padding: initial; scroll-padding-inline: initial; scroll-snap-align: initial; scroll-snap-stop: initial; scroll-snap-type: initial; shape-image-threshold: initial; shape-margin: initial; shape-outside: initial; shape-rendering: initial; size: initial; speak: initial; stop-color: initial; stop-opacity: initial; stroke: initial; stroke-dasharray: initial; stroke-dashoffset: initial; stroke-linecap: initial; stroke-linejoin: initial; stroke-miterlimit: initial; stroke-opacity: initial; stroke-width: initial; tab-size: initial; table-layout: initial; text-align: initial; text-align-last: initial; text-anchor: initial; text-combine-upright: initial; text-decoration: initial; text-decoration-skip-ink: initial; text-indent: initial; text-overflow: initial; text-shadow: initial; text-size-adjust: initial; text-transform: initial; text-underline-offset: initial; text-underline-position: initial; touch-action: initial; transform: initial; transform-box: initial; transform-origin: initial; transform-style: initial; transition: initial; user-select: initial; vector-effect: initial; vertical-align: initial; visibility: initial; -webkit-app-region: initial; border-spacing: initial; -webkit-border-image: initial; -webkit-box-align: initial; -webkit-box-decoration-break: initial; -webkit-box-direction: initial; -webkit-box-flex: initial; -webkit-box-ordinal-group: initial; -webkit-box-orient: initial; -webkit-box-pack: initial; -webkit-box-reflect: initial; -webkit-highlight: initial; -webkit-hyphenate-character: initial; -webkit-line-break: initial; -webkit-line-clamp: initial; -webkit-mask-box-image: initial; -webkit-mask: initial; -webkit-mask-composite: initial; -webkit-perspective-origin-x: initial; -webkit-perspective-origin-y: initial; -webkit-print-color-adjust: initial; -webkit-rtl-ordering: initial; -webkit-ruby-position: initial; -webkit-tap-highlight-color: initial; -webkit-text-combine: initial; -webkit-text-decorations-in-effect: initial; -webkit-text-emphasis: initial; -webkit-text-emphasis-position: initial; -webkit-text-fill-color: initial; -webkit-text-security: initial; -webkit-text-stroke: initial; -webkit-transform-origin-x: initial; -webkit-transform-origin-y: initial; -webkit-transform-origin-z: initial; -webkit-user-drag: initial; -webkit-user-modify: initial; white-space: initial; widows: initial; width: initial; will-change: initial; word-break: initial; word-spacing: initial; x: initial; y: initial; z-index: initial;\u0022\u003E\u003C/div\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-1/\u0022\u003EAnnouncing .NET 6 Preview 1\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/content:encoded\u003E\n\t\t\t\t\t\n\t\t\t\t\t\u003Cwfw:commentRss\u003Ehttps://devblogs.microsoft.com/dotnet/announcing-net-6-preview-1/feed/\u003C/wfw:commentRss\u003E\n\t\t\t\u003Cslash:comments\u003E161\u003C/slash:comments\u003E\n\t\t\n\t\t\n\t\t\t\u003C/item\u003E\n\t\t\u003Citem\u003E\n\t\t\u003Ctitle\u003E.NET Framework February 2021 Cumulative Update Preview for .NET Framework.\u003C/title\u003E\n\t\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet/net-framework-february-2021-cumulative-update-preview-for-net-framework/\u003C/link\u003E\n\t\t\t\t\t\u003Ccomments\u003Ehttps://devblogs.microsoft.com/dotnet/net-framework-february-2021-cumulative-update-preview-for-net-framework/#comments\u003C/comments\u003E\n\t\t\n\t\t\u003Cdc:creator\u003E\u003C![CDATA[Tara Overfield]]\u003E\u003C/dc:creator\u003E\n\t\t\u003CpubDate\u003EWed, 17 Feb 2021 15:05:57 \u002B0000\u003C/pubDate\u003E\n\t\t\t\t\u003Ccategory\u003E\u003C![CDATA[.NET Framework]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[WinForms]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[WPF]]\u003E\u003C/category\u003E\n\t\t\u003Cguid isPermaLink=\u0022false\u0022\u003Ehttps://devblogs.microsoft.com/dotnet/?p=31805\u003C/guid\u003E\n\n\t\t\t\t\t\u003Cdescription\u003E\u003C![CDATA[\u003Cp\u003EYesterday, we released the February 2021 Cumulative Update Preview for .NET Framework.\u003Cbr /\u003E\nQuality and Reliability\u003Cbr /\u003E\nThis release contains the following quality and reliability improvements.\u003Cbr /\u003E\nCLR1\u003C/p\u003E\n\u003Cp\u003EAddresses an issue where the entire process would be torn down when a NullReferenceException propagated out of an exception filter.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-february-2021-cumulative-update-preview-for-net-framework/\u0022\u003E.NET Framework February 2021 Cumulative Update Preview for .NET Framework.\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/description\u003E\n\t\t\t\t\t\t\t\t\t\t\u003Ccontent:encoded\u003E\u003C![CDATA[\u003Cp\u003EYesterday, we released the February 2021 Cumulative Update Preview for .NET Framework.\u003C/p\u003E\n\u003Ch3 id=\u0022quality-and-reliability\u0022\u003EQuality and Reliability\u003C/h3\u003E\n\u003Cp\u003EThis release contains the following quality and reliability improvements.\u003C/p\u003E\n\u003Ch5 id=\u0022clr1\u0022\u003ECLR\u003Cspan style=\u0022font-size: 12pt;\u0022\u003E\u003Csup\u003E1\u003C/sup\u003E\u003C/span\u003E\u003C/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EAddresses an issue where the entire process would be torn down when a NullReferenceException propagated out of an exception filter.\u003C/li\u003E\n\u003Cli\u003EAddresses an issue with slowdowns that could occur when making large numbers of devirtualized calls into MarshalByRefObject-derived code.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch5 id=\u0022wpf2\u0022\u003EWPF\u003Cspan style=\u0022font-size: 12pt;\u0022\u003E\u003Csup\u003E2\u003C/sup\u003E\u003C/span\u003E\u003C/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EAddresses an issue with lag responding to typing in TextBox, when spell-checking is enabled that was introduced in an update earlier this year.\u003C/li\u003E\n\u003Cli\u003EAddresses an issue with a leak of touch-related resources, including OS handles, when closing a window. The leak only occurs when a touch device is active, and only for windows whose HwndSource is created directly by the app.\u003C/li\u003E\n\u003Cli\u003EAddresses a crash when docking a window within Visual Studio, or, more generally, disposing an HwndSource whose RootVisual is null.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch5 id=\u0022winforms\u0022\u003EWinforms\u003C/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EAddresses an issue in ComboBox drop down item bounding rectangle as exposed to the accessibility tools, where we did not take into account that some items might be scrolled out of view, we had always started counting items from the first visible one, and thus item rectangle location was incorrect.\u003C/li\u003E\n\u003Cli\u003EImplemented ScrollItemPattern \u003Ca href=\u0022https://docs.microsoft.com/en-us/windows/win32/api/uiautomationcore/nn-uiautomationcore-iscrollitemprovider\u0022 rel=\u0022nofollow\u0022\u003E(IScrollItemProvider (uiautomationcore.h) \u0026#8211; Win32 apps | Microsoft Docs)\u003C/a\u003E for ComboBox drop down items.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\u003Csup\u003E1 \u003C/sup\u003ECommon Language Runtime (CLR)\n\u003Csup\u003E2 \u003C/sup\u003EWindows Presentation Foundation (WPF)\u003C/p\u003E\n\u003Ch3 id=\u0022known-issues-in-this-update\u0022\u003EKnown issues in this update\u003C/h3\u003E\n\u003Cp\u003EMicrosoft is not currently aware of any issues in this update.\u003C/p\u003E\n\u003Ch3\u003E\u003Ca id=\u0022user-content-getting-the-update\u0022 class=\u0022anchor\u0022 href=\u0022#getting-the-update\u0022\u003E\u003C/a\u003EGetting the Update\u003C/h3\u003E\n\u003Cp\u003EThe Cumulative Update Preview is available via Windows Update and Microsoft Update Catalog.\u003C/p\u003E\n\u003Ch5\u003E\u003Ca id=\u0022user-content-microsoft-update-catalog\u0022 class=\u0022anchor\u0022 href=\u0022#microsoft-update-catalog\u0022\u003E\u003C/a\u003EMicrosoft Update Catalog\u003C/h5\u003E\n\u003Cp\u003EYou can get the update via the Microsoft Update Catalog.\u00A0 Customers that rely on Windows Update will automatically receive the .NET Framework version-specific updates. Advanced system administrators can also take use of the below direct Microsoft Update Catalog download links to .NET Framework-specific updates. Before applying these updates, please ensure that you carefully review the .NET Framework version applicability, to ensure that you only install updates on systems where they apply.\u003C/p\u003E\n\u003Cp\u003EThe following table is for Windows 10 and Windows Server 2016\u002B versions.\u003C/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00228px\u0022\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003EProduct Version\u003C/th\u003E\n\u003Cth colspan=\u00222\u0022\u003ECumulative Update\u003C/th\u003E\n\u003C/tr\u003E\n\u003C/thead\u003E\n\u003Ctbody\u003E\n\u003Ctr bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd\u003E\u003Cstrong\u003EWindows 10 1909 and Windows Server, version 1909\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.8\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601556\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601556\u0022 rel=\u0022nofollow\u0022\u003E4601556\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd\u003E\u003Cstrong\u003EWindows 10 1809 (October 2018 Update) and Windows Server 2019\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4602298\u0022 rel=\u0022nofollow\u0022\u003E4602298\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.7.2\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601558\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601558\u0022 rel=\u0022nofollow\u0022\u003E4601558\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.8\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601555\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601055\u0022 rel=\u0022nofollow\u0022\u003E4601055\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/tbody\u003E\n\u003C/table\u003E\n\u003Cp\u003E\u0026nbsp;\u003C/p\u003E\n\u003Ch5 id=\u0022previous-monthly-rollups\u0022\u003EPrevious Monthly Rollups\u003C/h5\u003E\n\u003Cp\u003EThe last few .NET Framework Monthly updates are listed below for your convenience:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-february-security-and-quality-rollup/\u0022 rel=\u0022nofollow\u0022\u003E.NET Framework February Security and Quality Rollup Update\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-january-security-and-quality-rollup-update/\u0022 rel=\u0022nofollow\u0022\u003E.NET Framework January Security and Quality Rollup Update\u003C/a\u003E\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-february-2021-cumulative-update-preview-for-net-framework/\u0022\u003E.NET Framework February 2021 Cumulative Update Preview for .NET Framework.\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/content:encoded\u003E\n\t\t\t\t\t\n\t\t\t\t\t\u003Cwfw:commentRss\u003Ehttps://devblogs.microsoft.com/dotnet/net-framework-february-2021-cumulative-update-preview-for-net-framework/feed/\u003C/wfw:commentRss\u003E\n\t\t\t\u003Cslash:comments\u003E1\u003C/slash:comments\u003E\n\t\t\n\t\t\n\t\t\t\u003C/item\u003E\n\t\t\u003Citem\u003E\n\t\t\u003Ctitle\u003EStaying safe with .NET containers\u003C/title\u003E\n\t\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet/staying-safe-with-dotnet-containers/\u003C/link\u003E\n\t\t\t\t\t\u003Ccomments\u003Ehttps://devblogs.microsoft.com/dotnet/staying-safe-with-dotnet-containers/#comments\u003C/comments\u003E\n\t\t\n\t\t\u003Cdc:creator\u003E\u003C![CDATA[Richard Lander]]\u003E\u003C/dc:creator\u003E\n\t\t\u003CpubDate\u003EThu, 11 Feb 2021 19:01:56 \u002B0000\u003C/pubDate\u003E\n\t\t\t\t\u003Ccategory\u003E\u003C![CDATA[.NET]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[.NET Core]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[Containers]]\u003E\u003C/category\u003E\n\t\t\u003Cguid isPermaLink=\u0022false\u0022\u003Ehttps://devblogs.microsoft.com/dotnet/?p=31748\u003C/guid\u003E\n\n\t\t\t\t\t\u003Cdescription\u003E\u003C![CDATA[\u003Cp\u003EContainer-based application deployment and execution has become very common. Nearly all cloud and server app developers we talk to use containers in some way. We mostly hear about public cloud use, but also IoT and have even heard of .NET containers pulled and used over satellite links on cruise ships.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/staying-safe-with-dotnet-containers/\u0022\u003EStaying safe with .NET containers\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/description\u003E\n\t\t\t\t\t\t\t\t\t\t\u003Ccontent:encoded\u003E\u003C![CDATA[\u003Cp\u003EContainer-based application deployment and execution has become very common. Nearly all cloud and server app developers we talk to use containers in some way. We mostly hear about public cloud use, but also IoT and have even heard of .NET containers pulled and used over satellite links on cruise ships. In the early days, we would share compelling reasons why people should consider containers. We no longer do that because containers are so widely used now. We are focused on making .NET a great container platform, and adapting as the container ecosystem evolves.\u003C/p\u003E\n\u003Cp\u003EIn this post, I\u0026#8217;m going to tackle staying safe and up-to-date with containers. Doing that can be challenging and not always intuitive. This post describes our approach to helping you with that \u0026#8212; largely via our container image publishing system \u0026#8212; and with associated guidance of the images we publish. The post has a strong bias to Linux, because there is more to know and more nuance on Linux. It replaces a similar 2018 post, \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/staying-up-to-date-with-net-container-images/\u0022\u003EStaying up-to-date with .NET Container Images\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EI decided to start 2021 with an update on .NET containers, and answer common questions we hear. I posted similar content in past years: \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/using-net-and-docker-together/\u0022\u003E2017\u003C/a\u003E, \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2018-update/\u0022\u003E2018\u003C/a\u003E, and \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/\u0022\u003E2019\u003C/a\u003E. This year, I\u0026#8217;m planning on publishing a series of posts, each dedicated to a thematic slice of the container experience. I\u0026#8217;m hoping to get some of my colleagues to post, too. These posts will cover how we\u0026#8217;ve made .NET into a great container platform, but also suggestions on how you can be a great container user.\u003C/p\u003E\n\u003Ch2 id=\u0022meet-the-team\u0022\u003EMeet the team\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003EThe team is responsible for maintaining and improving container image publishing infrastructure not manually publishing images. This infrastructure runs day and night, including when the team is sleeping.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003EI\u0026#8217;ll start by telling you a little about the team that works on the image publishing slice of our container experience. Knowing more about what we do helps you better understand the images you are using.\u003C/p\u003E\n\u003Cp\u003EThe container publishing team is made up of three developers \u0026#8212; Dan, Matt, and Michael \u0026#8212; and one Program Manager \u0026#8212; Rich (me). You can follow what we\u0026#8217;re doing in our two primary repos: \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker\u0022\u003Edotnet/dotnet-docker\u003C/a\u003E, \u003Ca href=\u0022https://github.com/microsoft/dotnet-framework-docker\u0022\u003Emicrosoft/dotnet-framework-docker\u003C/a\u003E. We triage issues in those repos every week, and try to address everything reported or asked for in issues, discussions, or pull requests. You\u0026#8217;ll also find \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/tree/master/src\u0022\u003EDockerfiles\u003C/a\u003E for all .NET images, and \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md\u0022\u003Esamples\u003C/a\u003E that demonstrate common ways of using them.\u003C/p\u003E\n\u003Cp\u003EOn the face of it, our job is easy. We produce new \u003Ca href=\u0022https://hub.docker.com/_/microsoft-dotnet\u0022\u003Econtainer images for .NET\u003C/a\u003E servicing and preview releases. We are not responsible for building .NET (a larger team takes care of that). We only need to write \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/blob/d985263c5fad70046004c02b3427686256168e63/src/sdk/5.0/alpine3.12/amd64/Dockerfile#L22-L28\u0022\u003EDockerfiles that unpack and copy .NET builds into a container image\u003C/a\u003E. As is often the case, theory doesn\u0026#8217;t track closely to reality.\u003C/p\u003E\n\u003Cp\u003EContainer pulls are hard to count (layers vs manifest-only pulls) but it is safe to say there are ten million .NET image pulls a month. There are two things that are ever-present in our minds, as fundamental requirements of that scale. The first is that a lot of people are counting on us to deliver software that is high-quality and safe. The second is that there is an inherent diversity of needs demanded by the developers and devops professionals driving all those image pulls. The pull rate has grown to that level, in part, because we satisfy a lot of those needs. Those needs are what we continue to focus on as we consider what to do next. For example, we publish images for three Linux distros, as opposed to just one.\u003C/p\u003E\n\u003Cp\u003EMuch of that will come as no surprise. Less obvious is how we \u003Ca href=\u0022https://github.com/dotnet/docker-tools/blob/main/documentation/base-image-dependency-flow.md\u0022\u003Emanage updates for Linux distro base images\u003C/a\u003E that we support \u0026#8212; Alpine, Debian, and Ubuntu \u0026#8212; that we (and by extension you) rely on. It was obvious from our early container days that managing base image updates was a task for a cloud service and not people. In response, we built \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/how-the-net-team-uses-azure-pipelines-to-produce-docker-images/\u0022\u003Esignificant infrastructure\u003C/a\u003E that watches for base image updates and then re-builds and re-publishes .NET images in response. This happens multiple times a month, and in rare cases, multiple times a day.\u003C/p\u003E\n\u003Ch2 id=\u0022dockerfiles\u0022\u003EDockerfiles\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003E.NET Dockerfiles rely on versioned URLs that reference public and immutable SHA2-validated .NET builds and other resources via HTTPS.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://docs.docker.com/engine/reference/builder/\u0022\u003EDockerfiles\u003C/a\u003E are a text-based recipe format for defining container images, part shell script, part declarative format, part (arguably) functional programming language. There are many positive aspects to Dockerfiles. Perhaps the the most compelling part is the concept of layers, their hash-based identity and the caching system that is built of top of those characteristics.\u003C/p\u003E\n\u003Cp\u003EWe know many people use our Dockerfiles to produce their own images or as a starting point to producing images that are different in some way. We endeavor to make our Dockerfiles best practice, self-consistent, and easy to use. We\u0026#8217;ve always thought of the Dockerfiles and the resulting images as equally important deliverables of our team.\u003C/p\u003E\n\u003Cp\u003EFrom very early on, we decided that the \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/tree/master/src\u0022\u003EDockerfiles we maintain on GitHub\u003C/a\u003E must be the true source of the images we publish. We\u0026#8217;ve kept to that idea, and see it as a contract with you. This topic is both subtle and incredibly foundational. I\u0026#8217;ll explain.\u003C/p\u003E\n\u003Cblockquote\u003E\u003Cp\u003ECritical note: The following workflow \u0026#8212; using container-diff \u0026#8212; was a good and well-intentioned attempt to demonstrate the fidelity of the Dockerfiles in our GitHub repository with the container images in our registry. The workflow is correct and produces the results that are suggested, BUT it is subject to a certain type of attack that I was unaware of prior to publishing this post.\u00A0\u003Ca href=\u0022https://twitter.com/justinsteven\u0022 rel=\u0022nofollow\u0022\u003EJustin Steven\u003C/a\u003E\u00A0reached out to me to inform me of this weakness in my guidance. Thanks! He also wrote an\u00A0\u003Ca href=\u0022https://www.justinsteven.com/posts/2021/02/14/docker-image-history-modification/\u0022 rel=\u0022nofollow\u0022\u003Ein-depth explanation of the attack\u003C/a\u003E. As a result of this new information, I\u0026#8217;m no longer recommending using the following workflow to make any important decisions. Using container-diff is still a useful and fun exercise to do and it can help you understand more about how Docker images are constructed. If you have two images that you trust have had their integrity maintained, it is an effective way of answering the question \u0026#8220;What differs in the construction of these images?\u0026#8221; However, you cannot draw any security-critical conclusions from the output if you don\u0026#8217;t trust the provenance of the images. My goal with this post was to raise visibility on critical topics. I have left the remaining text in this section unchanged to that end.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003EImagine you pull and inspect a .NET image (from our registry) and then rebuild the same image from the Dockerfile we\u0026#8217;ve shared as its apparent source, on your own machine. You get the same result (I\u0026#8217;ll define that shortly). That\u0026#8217;s comforting. It means that using official .NET images is just a convenience as you can build them yourself. But what happens if you get a different result. That\u0026#8217;s concerning, particularly if no explanation is provided. What are you to think? Your mind races. The difference could be the result of something nefarious or accidental. Only an investigation could help answer that question, and who has time for that?\u003C/p\u003E\n\u003Cp\u003EThe following workflow demonstrates how to compare a registry image with a locally built one (both from the same \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/blob/fb30bdce6e982de944d25bc07b6f5d701ec91a1e/src/sdk/5.0/alpine3.12/amd64/Dockerfile\u0022\u003Esource Dockerfile\u003C/a\u003E) using the Google \u003Ca href=\u0022https://github.com/GoogleContainerTools/container-diff\u0022\u003Econtainer-diff\u003C/a\u003E tool:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022console\u0022\u003EC:\u0026gt;curl https://storage.googleapis.com/container-diff/latest/container-diff-windows-amd64.exe -o container-diff.exe\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100 14.6M  100 14.6M    0     0  14.6M      0  0:00:01 --:--:--  0:00:01 20.3M\r\n\r\nC:\u0026gt;git clone https://github.com/dotnet/dotnet-docker\r\nCloning into \u0027dotnet-docker\u0027...\r\n\r\nC:\u0026gt;cd dotnet-docker\\src\\sdk\\5.0\\alpine3.12\\amd64\r\n\r\nC:\\dotnet-docker\\src\\sdk\\5.0\\alpine3.12\\amd64\u0026gt;git pull\r\nAlready up to date.\r\n\r\nC:\\dotnet-docker\\src\\sdk\\5.0\\alpine3.12\\amd64\u0026gt;docker pull mcr.microsoft.com/dotnet/sdk:5.0-alpine\r\n5.0-alpine: Pulling from dotnet/sdk\r\nDigest: sha256:fb1a43b50c7047e5f28e309268a8f5425abc9cb852124f6828dcb0e4f859a4a1\r\nStatus: Image is up to date for mcr.microsoft.com/dotnet/sdk:5.0-alpine\r\nmcr.microsoft.com/dotnet/sdk:5.0-alpine\r\n\r\nC:\\dotnet-docker\\src\\sdk\\5.0\\alpine3.12\\amd64\u0026gt;docker build --pull -t dotnet-sdk:5.0-alpine .\r\nSending build context to Docker daemon  4.096kB\r\n\r\n\u0026lt;snip/\u0026gt;\r\n\r\nC:\\dotnet-docker\\src\\sdk\\5.0\\alpine3.12\\amd64\u0026gt;container-diff.exe diff mcr.microsoft.com/dotnet/sdk:5.0-alpine daemon://dotnet-sdk:5.0-alpine --type=history\r\n\r\n\u0026lt;snip/\u0026gt;\r\n\r\n-----History-----\r\n\r\nDocker history lines found only in mcr.microsoft.com/dotnet/sdk:5.0-alpine: None\r\n\r\nDocker history lines found only in dotnet-sdk:5.0-alpine: None\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis result tells you that the Dockerfiles used to build the two images are the same. That\u0026#8217;s \u0026#8212; as far as I\u0026#8217;m aware \u0026#8212; the most straightforward test to validate the fidelity of a registry image with its apparent source. The test passed. Comparing image digests won\u0026#8217;t work; they will not match with normal practices.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EUpdate:\u003C/strong\u003E Please see the critical note above. It turns out that in certain circumstances this result is not trustworthy.\u003C/p\u003E\n\u003Cp\u003ELet\u0026#8217;s inspect .NET Dockerfiles one layer deeper. .NET Dockerfiles reference both \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/blob/c0e8be8a44b47b1dcc2a5b4b2ebd92022087ac0b/src/runtime-deps/3.1/alpine3.12/amd64/Dockerfile\u0022\u003ELinux\u003C/a\u003E and \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/blob/fb30bdce6e982de944d25bc07b6f5d701ec91a1e/src/sdk/5.0/alpine3.12/amd64/Dockerfile\u0022\u003E.NET\u003C/a\u003E resources. For Linux resources, we reference operating system tags and packages whose content will change over time. For .NET resources, we rely on publicly available Azure blob resources (that our team maintains) that don\u0026#8217;t change.\u003C/p\u003E\n\u003Cp\u003EIf you look at \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/commits/master\u0022\u003Egit history on our repos\u003C/a\u003E, you will notice that the Linux-specific references never change, and the .NET references are updated once a month. The diffs are a direct outcome of the different patterns that I just explained between Linux and .NET resources.\u003C/p\u003E\n\u003Cp\u003EThere are two cases where the container-diff tool will report that the registry and local images that you are comparing are the same (in terms of Docker history lines), but will be misleading because the images are actually different. The first is that Debian, for example, has been updated and we haven\u0026#8217;t pushed a .NET update on top of it yet. As you\u0026#8217;ll soon read, there is a very small window of time where that is at all likely. The second is that a package that .NET relies on has been updated since we last built and published .NET images. This case is quite likely after even a couple days after we publish an image. We don\u0026#8217;t proactively re-build images when packages are updated, which I\u0026#8217;ll explain more later.\u003C/p\u003E\n\u003Cp\u003ESidebar: Various folks in the container ecosystem are looking at enabling deterministic images. We welcome that. See \u003Ca href=\u0022https://blog.bazel.build/2015/07/28/docker_build.html\u0022\u003EBuilding deterministic Docker images with Bazel\u003C/a\u003E and \u003Ca href=\u0022https://www.thestrangeloop.com/2019/deterministic-docker-images-with-go-microservices.html\u0022\u003EDETERMINISTIC DOCKER IMAGES WITH GO MICROSERVICES\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EPulling this all together: since our Dockerfiles are public, and only use publicly-available resources, you can produce the same results we do to produce your own images or to validate the fidelity of the images relative to our published Dockerfiles. Transparency is a key tenet for developing trust with containers.\u003C/p\u003E\n\u003Cp\u003EThere is an industry effort called \u003Ca href=\u0022https://openssf.org/\u0022\u003Esecure supply chain\u003C/a\u003E. It\u0026#8217;s not new, but it is as important now as ever. We are strong advocates of secure supply chain goals and principles on the .NET Team and at \u003Ca href=\u0022https://openssf.org/about/governing-board/\u0022\u003EMicrosoft\u003C/a\u003E generally. The topics that I\u0026#8217;m touching on with transparency and verifiable artifacts are fundamental tenets of that effort.\u003C/p\u003E\n\u003Ch2 id=\u0022pedigree-and-provenance\u0022\u003EPedigree and provenance\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003EWhen you use official .NET images, you place significant trust in Microsoft. That trust should be grounded in the published policies that we use to produce and distribute software.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003EI\u0026#8217;ll start by defining these two terms, per our use. Pedigree defines \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/blob/master/documentation/image-artifact-details.md\u0022\u003Ewhere source code comes from\u003C/a\u003E and its ownership (licensing). Provenance defines the manner and environment in which source code is managed and then built into binaries and made available to you. Let\u0026#8217;s focus on the layer above the operating system, which we\u0026#8217;ll call the \u0026#8220;.NET layer\u0026#8221;.\u003C/p\u003E\n\u003Cp\u003EOn pedigree, our policy is to only include code (typically in binary form) that is owned and maintained by the \u003Ca href=\u0022https://dotnetfoundation.org/\u0022\u003E.NET Foundation\u003C/a\u003E or \u003Ca href=\u0022https://dotnet.microsoft.com/\u0022\u003EMicrosoft\u003C/a\u003E. The code must be licensed as \u003Ca href=\u0022https://github.com/dotnet/runtime/blob/master/LICENSE.TXT\u0022\u003EMIT\u003C/a\u003E (or compatible) or with a \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/license-information-windows.md\u0022\u003EMicrosoft license\u003C/a\u003E. We scan that code for pedigree violations as a due diligence exercise. It mitigates another party (successfully) making a copyright claim on the software in the .NET layer. In some cases, there may be packages (templates would be a good example, in SDK images) that are not owned by the Microsoft or the .NET Foundation, and those are scrutinized.\u003C/p\u003E\n\u003Cp\u003EDetermining pedigree with Linux distros and packages can be difficult. We documented a workflow for \u003Ca href=\u0022https://github.com/microsoft/containerregistry/blob/master/legal/Linux-Legal-Metadata.md\u0022\u003Efinding Linux legal metadata\u003C/a\u003E in container images that may be helpful to you. It was produced in collaboration with the \u003Ca href=\u0022https://opensource.microsoft.com/\u0022\u003Eopen source programs office\u003C/a\u003E at Microsoft.\u003C/p\u003E\n\u003Cp\u003EOn provenance, we build and publish .NET containers images per Microsoft security practices (including regular mandatory security training for engineers). We use \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/how-the-net-team-uses-azure-pipelines-to-produce-docker-images/\u0022\u003EAzure Pipelines\u003C/a\u003E to build .NET images. The .NET product build also uses Pipelines. GitHub is currently working on satisfying our feature requirements so that we can adopt GitHub Actions in the future. .NET images are published to the Microsoft Container Registry (MCR). By using MCR, we extend our provenance promise all the way to, and including, the registry.\u003C/p\u003E\n\u003Cp\u003EAs stated earlier, our Dockerfiles rely on public resources, via HTTPS URLs. HTTPS on its own isn\u0026#8217;t good enough. It protects the transport, but not the source from tampering or accidental change. .NET Dockerfiles contain SHA2-based \u003Ca href=\u0022https://docs.microsoft.com/dotnet/standard/security/ensuring-data-integrity-with-hash-codes\u0022\u003Econtent integrity checks\u003C/a\u003E for each external resource. If these checks fail, the build fails (which is good). I recall that our container build failed once due to these checks failing as a result of a failure in our release publishing. The issue was resolved immediately.\u003C/p\u003E\n\u003Ch2 id=\u0022building-images\u0022\u003EBuilding images\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003EOur infrastructure re-builds and publishes .NET images after Linux base image updates, within twelve hours.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003EI just described that .NET images have a high-fidelity relationship with their published Dockerfiles. To deliver on that promise, we have to build official .NET container images with the public (unmodified) Dockerfiles. Think \u0026#8220;clone and build\u0026#8221;, with nothing in-between. That\u0026#8217;s exactly what we do. If you look at git history, you\u0026#8217;ll notice Dockerfile pull request merges on release-day, prior to image availability. This behavior is (to some degree) demonstrating the practices I\u0026#8217;m describing.\u003C/p\u003E\n\u003Cp\u003E.NET release day \u0026#8212; as much as people on the team are always excited about delivering new features \u0026#8212; is a mundane affair. It is mundane because we can predict the day and hour of the release. The more interesting case is when Linux base images are updated. Our infrastructure checks for new images every four hours. We could check more often, but we don\u0026#8217;t believe that there is a compelling need, nor do we want to put unnecessary stress on someone else\u0026#8217;s cloud infrastructure.\u003C/p\u003E\n\u003Cp\u003EOver time, we\u0026#8217;ve come to the viewpoint that a twelve-hour \u003Ca href=\u0022https://en.wikipedia.org/wiki/Service-level_agreement\u0022\u003ESLA\u003C/a\u003E for publishing Linux base image updates is the sweet spot. Certainly, it doesn\u0026#8217;t take near that long to run through the process. In fact, most of the time within that duration is intentional delay. I\u0026#8217;ll explain why.\u003C/p\u003E\n\u003Cp\u003EWe analyzed the logs from our infrastructure and found that some distros publish base images updates multiple times across the same day. For example, Ubuntu x64 images might be published in the morning, and Arm64 images in the afternoon, all for the same logical Ubuntu update. We\u0026#8217;ve also seen cases where there have been multiple updates for the same architecture in the same day. We don\u0026#8217;t know why, and it isn\u0026#8217;t important for us to know. Our infrastructure notices these updates, but then waits to see if anything else happens across an approximately twelve hour period. There are benefits to waiting, and no real downsides.\u003C/p\u003E\n\u003Cp\u003EWe know that many of you have infrastructure that watches for .NET updates (just like we do with Linux distro base images). We\u0026#8217;d rather not unnecessarily spin your infrastructure if we can avoid it. If we can collapse two updates into one across a short period, that seems like a win.\u003C/p\u003E\n\u003Ch2 id=\u0022vulnerabilities\u0022\u003EVulnerabilities\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003EVulnerabilities, and the CVEs that track them, are one the most challenging and confusing aspects of using containers.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003ESecurity vulnerabilities are the most common topic we get asked about. This is because there is a lot of danger associated with them, but best practices in managing them are lacking. Vulnerability management differs between Windows and Linux, although the general landscape is the same. In this section, I\u0026#8217;ll address the topic in broad terms, and then Windows and Linux specifically.\u003C/p\u003E\n\u003Cp\u003EVulnerability lifecycle: introduction -\u0026gt; discovery -\u0026gt; disclosure (as \u003Ca href=\u0022https://cve.mitre.org/\u0022\u003ECVEs\u003C/a\u003E) -\u0026gt; resolution (patch distributed) -\u0026gt; all machines patched.\u003C/p\u003E\n\u003Cp\u003EThis sequence does not address a vulnerability being exercised maliciously, which can happen any time after the point of discovery, and past resolution. Malicious use isn\u0026#8217;t really part of the sequence but overlays it, and is also subject to software vendor and user behavior.\u003C/p\u003E\n\u003Cp\u003ESidebar: CVE reports are most often created for vulnerabilities that need action on the part of an end user, be it installing the latest OS update, or changing a config file. If something can be fixed automatically it might not get a CVE. A CVE can be created in response to a request by the software or hardware vendor (like Debian or Microsoft), or security researchers.\u003C/p\u003E\n\u003Cp\u003EThe time between each of the points in the vulnerability lifecycle is undefined, particularly between discovery and disclosure. The time gaps are primarily influenced on who initially discovers the vulnerability. If a vulnerability is discovered by someone that reports it through a vendor\u2019s \u003Ca href=\u0022https://www.microsoft.com/en-us/msrc/faqs-report-an-issue\u0022\u003Ereporting mechanisms\u003C/a\u003E (including \u003Ca href=\u0022https://www.microsoft.com/msrc/bounty-dot-net-core\u0022\u003Ebug bounties\u003C/a\u003E) or internally by the software vendor, then the gap between discovery, correction and public disclosure is likely to be short and uneventful. Vulnerabilities may be discovered by individuals or groups that prefer not to report them to vendors for any number of reasons. In this case the timeline between discovery, disclosure and patches to address the issue is unpredictable.\u003C/p\u003E\n\u003Cp\u003EIn the general case, vulnerabilities don\u0026#8217;t just magically appear. There are no tricky vulnerability fairies that cause the latest build to be bad. The majority of vulnerabilities are present in system software months and years before they are disclosed as CVEs. It\u0026#8217;s a bit like diamonds and oil. They are present in the ground long before they are discovered and sold in a marketplace.\u003C/p\u003E\n\u003Cp\u003EIn any given operating system update, there may be a mix of unpatched and recently patched CVEs. How does one reason about that from a safety perspective? There isn\u0026#8217;t a general metric that validates that the build is acceptable to use, certainly not based on barrels or carats of CVEs. Should one focus on the most severe CVE and make a decision based on it? If there is a severe vulnerability in an operating system and it was discovered to have been present for five years, should one revert to an operating system build from five years ago? That\u0026#8217;s impractical. What about the 1000\u002B CVEs that have been patched since (let alone the addition of operating system features)? If there is one patched high-severity CVE and five unpatched medium-severity CVEs in a given build, is that good? Builds with \u003Ca href=\u0022https://github.com/debuerreotype/docker-debian-artifacts/issues/111\u0022\u003Eunpatched CVEs present a challenge often without an immediate resolution\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003ESidebar: We do not publish the results of our operating system vulnerability scans. This is something that we\u0026#8217;d like to do in the future. When people share the results of their security scans, we don\u0026#8217;t have official results for them to compare with. Having official and up-to-date scan results would be useful.\u003C/p\u003E\n\u003Cp\u003EIt\u0026#8217;s easy to get focused on operating system CVEs. There are thousands of components and subsystems in an operating system. Most apps won\u0026#8217;t exercise even a quarter of the functionality in an operating system image. Apps, however, also depend on application platforms, like .NET. Your app almost certainly exercises a larger proportion of functionality of its app platform than operating system, and will have commensurate exposure. One can imagine that given five operating system CVEs and five app platform CVEs, that it\u0026#8217;s likely that only one of the operating system CVEs and at least three of the app platform CVEs will apply to your app. I just made that up, but it\u0026#8217;s likely true enough and gets the point across.\u003C/p\u003E\n\u003Cp\u003EIn general, .NET CVEs should be your first concern. I\u0026#8217;d say the same for any app platform. If you use the official .NET images, and delay consumption of them because of operating system CVEs, you may want to \u003Ca href=\u0022https://en.wikipedia.org/wiki/Priority_inversion\u0022\u003Ere-think that\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EThis far-from-ideal situation provides context on why security research and bug bounties are so important. It also strongly suggests that patching CVEs is not reasonable as a singular security defence, but is a key aspect of a more general approach.\u003C/p\u003E\n\u003Ch2 id=\u0022managing-vulnerabilities\u0022\u003EManaging vulnerabilities\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003EOur approach to vulnerabilities is a healthy mixture of safety and pragmatism.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003EI recall a conversation with a Microsoft leader on this topic a few years ago. They asked \u0026#8220;will you knowingly publish Linux images with CVEs?\u0026#8221; I said \u0026#8220;Yes.\u0026#8221; That wasn\u0026#8217;t the answer that was expected. You have to zoom out to appreciate why the policy we use is a reasonable one (if not the only one available) and why traditional practices may no longer apply.\u003C/p\u003E\n\u003Cp\u003EOn our team, we are presented with the same two things every month: operating system updates, and .NET security patches. We have to do something productive with those two things, and together. There are only so many ways to combine operating system and .NET updates. We need to publish new operating systems patches so that you have easy access to them, and have to pick an operating system version on which to release .NET patches. On top of that, we need to publish updated images, month over month, in a way that seems predictable to you and absolutely avoids surprises.\u003C/p\u003E\n\u003Cp\u003EThat leaves the serious question of how we reason and react to unpatched operating system CVEs. The only reasonable model we\u0026#8217;ve found is to publish .NET updates on the latest operating system update (or \u0026#8220;tip\u0026#8221;). As I shared earlier, there is no good model (that we\u0026#8217;ve identified) for going backwards, so we\u0026#8217;ve chosen to only go forwards. We\u0026#8217;ve also chosen to believe that operating system vendors make well-intentioned choices with their users\u0026#8217; best interests in mind, and see no need to get involved in the middle of your already established relationship.\u003C/p\u003E\n\u003Cp\u003ETo make this concrete, we\u0026#8217;re not going to publish an older build of Windows or Linux in March than we did in February, for example. That would be very bad and completely irresponsible on our part. In fact, if you ever see stale operating system versions in .NET images, that\u0026#8217;s the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Black_swan_theory\u0022\u003Eblack swan event\u003C/a\u003E that should cause your security scanner\u0026#8217;s \u003Ca href=\u0022https://en.wikipedia.org/wiki/Anomaly_detection\u0022\u003Eanomaly detection\u003C/a\u003E filters to set off alarm bells because it is actually more serious than any CVE, and you should absolutely halt using our images as a result.\u003C/p\u003E\n\u003Cp\u003EPulling this all together: we do not gate operating system base image updates on security vulnerability scans. We always publish the latest updates for all operating systems. Our approach gives you flexibility. You can adopt our tip-based policy or gate image updates on some metric of your own devising. If you do not like our container-building policy, that\u0026#8217;s probably a good reason to build your own images, and not rely on ours. Since we publish Dockerfiles for .NET images, we\u0026#8217;ve given you a head-start on doing so.\u003C/p\u003E\n\u003Ch2 id=\u0022linux-base-images\u0022\u003ELinux base images\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003EWe see Linux as a set of continuously updated (base image) tags on a registry, as it relates to publishing .NET container images.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003ELinux builds and container images are produced with their own set of practices and policies. I\u0026#8217;m not going to describe them here, and I\u0026#8217;m not informed enough to do that with credibility. I think Linux is \u003Ca href=\u0022https://cloudblogs.microsoft.com/windowsserver/2015/05/06/microsoft-loves-linux/\u0022\u003Egreat\u003C/a\u003E, but that\u0026#8217;s not very descriptive on its own. It\u0026#8217;s up to you to discover what you need to know about the software you use. For this section, I\u0026#8217;m going to focus on aspects of the Linux-based software that we distribute in .NET container images, and that my team has discovered as part of our use (as a user, just like you).\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://github.com/torvalds/linux/blob/master/COPYING\u0022\u003ELinux is licensed as GPL\u003C/a\u003E. Packages available in a package manager may be licensed with the same or different license. That means that .NET containers are to some degree GPL, which is not a license typically used at Microsoft. Our view is that this is fine and is the exact same as using Linux virtual machines. The industry seems to have come to the \u003Ca href=\u0022https://opensource.com/article/18/1/containers-gpl-and-copyleft\u0022\u003Esame conclusion\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EI already discussed most of our thinking on security vulnerabilities, but will repeat myself a bit. We publish updated .NET images for \u003Ca href=\u0022https://hub.docker.com/_/alpine/\u0022\u003EAlpine\u003C/a\u003E, \u003Ca href=\u0022https://hub.docker.com/_/debian/\u0022\u003EDebian\u003C/a\u003E, and \u003Ca href=\u0022https://hub.docker.com/_/ubuntu/\u0022\u003EUbuntu\u003C/a\u003E as those \u003Ca href=\u0022https://hub.docker.com/search?q=\u0026amp;type=image\u0026amp;image_filter=official\u0022\u003Eofficial images\u003C/a\u003E are made available on Docker Hub. Our image updates of those official images are not gated by a review of Linux distro patches. Instead, we accept official image updates from the official image maintainers (at least some of which are community volunteers) as is. We\u0026#8217;ve engaged with maintainers from these three distributions to greater or lesser degrees. For example, we\u0026#8217;ve talked with \u003Ca href=\u0022https://github.com/tianon\u0022\u003ETianon Gravi\u003C/a\u003E who is a Debian image maintainer, and can start a conversation should we need to. We thank all image maintainers for their stewardship and offer them a sincere hat tip.\u003C/p\u003E\n\u003Cp\u003EWe know from past experience that if there was a severe issue in Linux that Microsoft is likely to be made aware of it, possibly as part of an industry-wide conversation. When \u003Ca href=\u0022https://nvd.nist.gov/vuln/detail/CVE-2020-1967\u0022\u003Ethat happens\u003C/a\u003E, we react very quickly, and will work weekends and holidays to do the right thing on your behalf.\u003C/p\u003E\n\u003Cp\u003EMicrosoft uses Linux extensively in its own operations, and has significant incentive to keep those operations safe, including ones that use .NET. That means when you use some form of Linux from Microsoft, it\u0026#8217;s also a form of Linux that Microsoft is willing to use itself. That\u0026#8217;s not a guarantee of anything, but directionally favorable.\u003C/p\u003E\n\u003Ch2 id=\u0022linux-packages\u0022\u003ELinux packages\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003E\u0026#8220;Why is Microsoft releasing images with vulnerabilities? Please fix this.\u0026#8221;\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003EWe get asked about vulnerability scans of .NET images frequently. The scans sometimes flag legitimate issues that require us to update a package. However, much more frequently the results are false positives. There are multiple reasons \u003Ca href=\u0022https://github.com/docker-library/faq/#why-does-my-security-scanner-show-that-an-image-has-cves\u0022\u003Ewhy vulnerability scans show CVEs in images\u003C/a\u003E:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe CVE \u003Ca href=\u0022https://github.com/debuerreotype/docker-debian-artifacts/issues/111#issuecomment-754739434\u0022\u003Edoesn\u0026#8217;t apply to your use case\u003C/a\u003E.\u003C/li\u003E\n\u003Cli\u003EThe CVE is unpatched, either generally, or in the user\u0026#8217;s given distro.\u003C/li\u003E\n\u003Cli\u003EThe CVE is patched but the Linux base image has not yet been rebuilt to include the patch.\u003C/li\u003E\n\u003Cli\u003EThe CVE is patched but the .NET image has not yet been rebuilt to include the patch.\u003C/li\u003E\n\u003Cli\u003EThe CVE is patched but not in the (stale) .NET image you are using.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EAnalyzing CVEs can be a challenge. The key question is applicability to your application. Conducting this analysis requires significant insight of your application and its dependencies. On the other end of the spectrum, simply counting unpatched CVEs in an application image is usually not going to be a good metric for determining the security of your system. A single CVE could be devastating and a dozen reported in an image might be benign. It depends. If you are using Linux and security is a focus of yours, you need to become comfortable reading and determining severity and applicability of CVE reports.\u003C/p\u003E\n\u003Cp\u003EI\u0026#8217;ll expand on some of the scenarios I just defined with actual real-life examples.\u003C/p\u003E\n\u003Cp\u003EA user was concerned because \u003Ca href=\u0022https://nvd.nist.gov/vuln/detail/CVE-2020-1751\u0022\u003ECVE-2020-1751\u003C/a\u003E was present in their vulnerability scan. That CVE only applies to PowerPC, which .NET doesn\u0026#8217;t support. \u003Ca href=\u0022https://nvd.nist.gov/vuln/detail/CVE-2018-12886\u0022\u003ECVE-2018-12886\u003C/a\u003E was similarly reported to us, but is more nuanced. It only applies to Arm processors, which we do support, but the user was targeting x64, which made the CVE inapplicable for them.\u003C/p\u003E\n\u003Cp\u003EA user recently asked why \u003Ca href=\u0022https://security-tracker.debian.org/tracker/CVE-2020-1971\u0022\u003ECVE-2020-1971\u003C/a\u003E was not resolved. It was resolved in our registry, but not when the image they scanned (from their registry) was built. We recommend rebuilding images before scanning. You can also pull our images to see when they were last built. Looking at git history of our Dockerfiles is not a good source of information for Linux updates.\u003C/p\u003E\n\u003Cp\u003EYou can check the created date of an image in our registry with the following workflow:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022console\u0022\u003E% docker pull mcr.microsoft.com/dotnet/sdk:5.0   \r\n5.0: Pulling from dotnet/sdk\r\nDigest: sha256:084344040abb10b8440e7b485c962d8ef322cbc1724841a4bdd913b20b75ec4e\r\nStatus: Image is up to date for mcr.microsoft.com/dotnet/sdk:5.0\r\nmcr.microsoft.com/dotnet/sdk:5.0\r\n% docker inspect --format=\u0027{{.Created}}\u0027 mcr.microsoft.com/dotnet/sdk:5.0\r\n2021-01-30T14:33:23.522932595Z\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThe \u003Ccode\u003Edocker history\u003C/code\u003E command can be used to get the same information.\u003C/p\u003E\n\u003Cp\u003EAnother confusing topic is how updates are released across Linux versions. For example, a CVE may be patched in Debian and not Ubuntu or in Debian 10 and not 9. If you are using Debian 9 (in this fictitious example), then you need to wait for a fix or switch to Debian 10. Per our observations, there is a bias (although not strong) to CVEs being resolved first in newer distro versions. We recommend using the latest version of a distro. We also recommend Alpine because it contains fewer packages and seems to have more limited CVE exposure due to its reduction in surface area.\u003C/p\u003E\n\u003Cp\u003EOur publishing infrastructure is oriented around base image tags. However, we also install \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/blob/c0e8be8a44b47b1dcc2a5b4b2ebd92022087ac0b/src/runtime-deps/3.1/buster-slim/amd64/Dockerfile#L5-L14\u0022\u003Epackages\u003C/a\u003E. .NET images are updated multiple times a month due to distro updates, particularly with Debian and Ubuntu, and also for monthly .NET updates. The latest package updates are always installed when images are rebuilt.\u003C/p\u003E\n\u003Cp\u003EThere are cases where our team should be re-building images due to package updates. We do not have a system in place to discover when we should rebuild container images due to patched CVEs in newer packages. We\u0026#8217;d like a system where our publishing system auto-rebuilds images when a fix is available for a CVE that has a certain severity or higher. Instead, we rely on base image updates as the .NET image rebuild signal and install the newest package updates as a side-effect of that operation. In the general case, this doesn\u0026#8217;t matter since base images and .NET are updated frequently (at least once per month). In some cases, it likely does.\u003C/p\u003E\n\u003Cp\u003EAs suggested earlier, if there is a severe issue, our team will likely be contacted, and we\u0026#8217;ll act on it. It\u0026#8217;s more likely that .NET images will have exposure to medium-severity package CVEs as a result of this gap. Counter-intuitively, this challenge isn\u0026#8217;t a practical problem for Debian and Ubuntu because they are typically updated multiple times a month. It is more of a problem for Alpine images because it isn\u0026#8217;t updated nearly as often due to its reduced surface area (which is what leads to its legitimately stronger security reputation).\u003C/p\u003E\n\u003Ch2 id=\u0022linux-distro-policies\u0022\u003ELinux distro policies\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003EWe publish .NET images for distros that are commonly used in containers and that we expect will get significant use. Other combinations are possible, but DIY.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003E.NET has a set of \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md\u0022\u003ELinux distro support policies\u003C/a\u003E that describe distros, distro versions and architectures we support. We \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/blob/master/documentation/supported-platforms.md\u0022\u003Epublish container images for a subset of those\u003C/a\u003E. We publish \u003Ca href=\u0022https://github.com/dotnet/core/labels/os-support\u0022\u003EOS Support notices\u003C/a\u003E so that you can follow our activities.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/blob/master/documentation/guiding-principles.md\u0022\u003EOur policies\u003C/a\u003E are a function and a further refinement of each distro\u0026#8217;s release schedule and lifecycle.\u003C/p\u003E\n\u003Cp\u003EWhen a new .NET version is released, we produce new container images for that version with the:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ELatest Alpine version.\u003C/li\u003E\n\u003Cli\u003ELatest Debian version.\u003C/li\u003E\n\u003Cli\u003ELatest Ubuntu LTS version.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ENote: We published images for non-LTS Ubuntu versions at one point. They got very little use. The majority of people want to use Ubuntu LTS versions. That works great for us. We prefer producing a more narrow set of images with more even use.\u003C/p\u003E\n\u003Cp\u003EWhen a new distro version is released:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFor Alpine, we publish new Alpine container images for all in-support .NET versions. At that point, we will announce that we will stop producing images for the previously latest Alpine version in three months.\u003C/li\u003E\n\u003Cli\u003EFor Debian, we publish new Debian container images for the latest .NET version, for example, .NET 5.0 (currently the latest version). For example, the \u003Ccode\u003E5.0\u003C/code\u003E tag references Debian 10. A new opt-in tag like \u003Ccode\u003E5.0-bullseye-slim\u003C/code\u003E would be created, which would reference Debian 11. Later, the \u003Ccode\u003E6.0\u003C/code\u003E tag would reference Debian 11 images, and Debian 10 images would not be provided (for 6.0).\u003C/li\u003E\n\u003Cli\u003EFor Ubuntu, we publish new Ubuntu LTS container images for the latest .NET version and the latest .NET LTS version (if they differ). The next Ubuntu LTS version will be 22.04.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EOn one hand, these policies are confusing because they are so different. On the other, they are what we believe 80%\u002B of those distro users will be happy with. The policies make more sense if viewed from the context of a distro and the associated community, or at least that\u0026#8217;s our intention.\u003C/p\u003E\n\u003Cp\u003EAn important take-away is that you may need to be on a recent .NET version if you want the latest distro version from the official .NET images. For example, we publish .NET Core 2.1 images on top of Debian 9 (\u0026#8220;stretch\u0026#8221;). .NET Core 3.1 and .NET 5.0 are published with Debian 10 (\u0026#8220;buster\u0026#8221;). We have this policy to limit our image matrix. We also feel that if you are willing to upgrade your operating system version, you should also consider updating your .NET version. We try to make that as easy as possible.\u003C/p\u003E\n\u003Ch2 id=\u0022windows\u0022\u003EWindows\u003C/h2\u003E\n\u003Cp\u003EThe Windows story around vulnerabilities is comparatively simpler. This is for two reasons: vulnerability disclosure and fixes typically coincide on the same day (Patch Tuesday), and in-support Windows versions are updated together. Patch Tuesday (second Tuesday of the month) is also easy to plan around.\u003C/p\u003E\n\u003Cp\u003EWe publish new .NET container images every Patch Tuesday, built on top of updated Windows base images. We work closely with the Windows team so we don\u0026#8217;t have to guess their schedule. As a result, we don\u0026#8217;t have the same twelve hour delay with Windows as we do with Linux. The Windows team typically publishes their images by 12pm Pacific Time on Patch Tuesday, and we produce our images soon after, typically on the order of a few hours.\u003C/p\u003E\n\u003Cp\u003EWe get very few requests from users about unpatched CVEs in Windows. If you are using the latest .NET Windows-based images, your image is patched as it relates to both .NET and Windows. You only need to think about patching once a month, for both Windows and .NET. It\u0026#8217;s that simple.\u003C/p\u003E\n\u003Cp\u003ETo be fair, I\u0026#8217;m focused on CVEs that the operating system vendor has disclosed. This is a situation where Windows and Linux differ significantly. With Windows, CVEs and fixes typically coincide on the same day, and with Linux, disclosure often proceeds the fix. There are merits to both approaches. Windows and Linux are both subject to disclosures that come via other parties. In that case \u0026#8212; for both Windows and Linux \u0026#8212; CVEs will proceed fixes, and as a user, you will need to wait, possibly with no recourse. It\u0026#8217;s not hard to find \u003Ca href=\u0022https://heartbleed.com/\u0022\u003Ehistorical examples\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022net-release-policies\u0022\u003E.NET release policies\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003E.NET is patched on a regular schedule, almost like clockwork.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003E.NET security updates are published \u003Ca href=\u0022https://github.com/dotnet/announcements/issues?q=is%3Aissue\u002Bis%3Aopen\u002Blabel%3AMonthly-Update\u0022\u003Eonce a month\u003C/a\u003E on Patch Tuesday, across all distribution types (containers, MSI, zips, \u0026#8230;), per our \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-policies.md\u0022\u003ERelease Policies\u003C/a\u003E. Updated Linux and Windows containers are released within a short release window, typically around noon Pacific Time on Patch Tuesday. If you are using the latest .NET images, your image is patched as it relates to .NET.\u003C/p\u003E\n\u003Cp\u003EIf for some reason, you can only rebuild your .NET container images once a month, target 6pm (or later) Pacific time every Patch Tuesday. That\u0026#8217;s not the recommended approach, but a simple and more effective policy than not rebuilding on any schedule.\u003C/p\u003E\n\u003Ch2 id=\u0022microsoft-container-registry-mcr\u0022\u003EMicrosoft container registry (MCR)\u003C/h2\u003E\n\u003Cblockquote\u003E\u003Cp\u003EWe\u0026#8217;ve changed where we publish container images multiple times. Sorry about that. We\u0026#8217;re certain we\u0026#8217;ve found the final home, in MCR. Please update your Dockerfiles.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cp\u003EWe publish .NET images exclusively to \u003Ca href=\u0022https://github.com/microsoft/ContainerRegistry\u0022\u003EMCR\u003C/a\u003E. We work closely with the MCR team, and regularly talk about ways we can improve container user experiences.\u003C/p\u003E\n\u003Cp\u003EMCR offers two primary benefits:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EWe can extend our container image provenance promise all the way through to and including the container registry.\u003C/li\u003E\n\u003Cli\u003EMCR is available in most Azure regions, enabling the ability to pull .NET images in-region and also acting as a globally replicated container CDN.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E.NET Core and .NET 5.0 images are published to \u003Ccode\u003Emcr.microsoft.com/dotnet\u003C/code\u003E. That\u0026#8217;s a \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/issues/1765\u0022\u003Erecent change\u003C/a\u003E. We recommend that you update your Dockerfiles and scripts to use this location. It will make adopting new releases easier. .NET 5.0 and .NET 6.0 are only published to this location. We hope that we do not have to make any more registry changes going forward. We know that they are painful for you. They are also painful for us.\u003C/p\u003E\n\u003Cp\u003EI\u0026#8217;ll share a little history so that you can ensure that you are pulling images from the right place.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EStarting with .NET Core 1.0 and .NET Framework 4.6.2, we published images to Docker Hub, in the \u003Ccode\u003Emicrosoft/dotnet\u003C/code\u003E, \u003Ccode\u003Emicrosoft/aspnetcore\u003C/code\u003E, \u003Ccode\u003Emicrosoft/aspnetcore-build\u003C/code\u003E, \u003Ccode\u003Emicrosoft/dotnet-framework\u003C/code\u003E, and \u003Ccode\u003Emicrosoft/aspnet\u003C/code\u003E repos.\u003C/li\u003E\n\u003Cli\u003EIn 2018, we began publishing .NET images to MCR, in the \u003Ccode\u003Emcr.microsoft.com/dotnet/core\u003C/code\u003E and \u003Ccode\u003Emcr.microsoft.com/dotnet/framework\u003C/code\u003E repos.\u003C/li\u003E\n\u003Cli\u003EIn 2020, with the re-branding of .NET Core to \u0026#8220;.NET\u0026#8221; with .NET 5.0, we began publishing .NET 5.0 and in-support .NET Core images to \u003Ccode\u003Emcr.microsoft.com/dotnet\u003C/code\u003E, removing \u003Ccode\u003E/core\u003C/code\u003E. .NET Framework publishing has not changed.\u003C/li\u003E\n\u003Cli\u003E.NET Core 2.1 and 3.1 images are still published to \u003Ccode\u003Emcr.microsoft/dotnet/core\u003C/code\u003E, for compatibility reasons. .NET Core 2.1 images are also published to the older Docker Hub locations \u0026#8212; such as \u003Ccode\u003Emicrosoft/dotnet\u003C/code\u003E \u0026#8212; for the same reason. This dual-publishing model is in place to maintain your existing docker builds without breaking your access to images.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EWe recommend that you use the new and shorter \u003Ccode\u003Emcr.microsoft.com/dotnet\u003C/code\u003E location going forward.\u003C/p\u003E\n\u003Ch2 id=\u0022tips\u0022\u003ETips\u003C/h2\u003E\n\u003Cp\u003EMuch of this post is focused on the challenging topic of CVEs. There are, however, some concrete and simple things you can do that help.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EPull before build \u0026#8212; You should always \u003Ca href=\u0022https://github.com/dotnet/dotnet-docker/tree/master/samples/dotnetapp#build-a-net-image\u0022\u003Epull before build\u003C/a\u003E. It is easy to build from a stale cache (which may be missing critical patches).\u003C/li\u003E\n\u003Cli\u003EConsider using a private registry \u0026#8212; Using a private registry for \u003Ca href=\u0022https://opencontainers.org/posts/blog/2020-10-30-consuming-public-content/\u0022\u003Econsuming public content\u003C/a\u003E insulates you from failures cases.\u003C/li\u003E\n\u003Cli\u003EConsider using a cloud container build service \u0026#8212; Offload the task of building images and staying up to date to the cloud. \u003Ca href=\u0022https://docs.microsoft.com/en-us/azure/container-registry/container-registry-tasks-overview\u0022\u003EACR Tasks\u003C/a\u003E and \u003Ca href=\u0022https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action\u0022\u003EGitHub Actions\u003C/a\u003E are good examples.\u003C/li\u003E\n\u003Cli\u003EPedigree and provenance apply above the .NET layer \u0026#8212; If you install packages in your own layers, then you need to consider when you should update your images based on security fixes being made available for those packages.\u003C/li\u003E\n\u003Cli\u003EContainer image scanning \u0026#8212; Scanning images is a best practice and something you should consider if you are not currently doing it.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch2 id=\u0022closing\u0022\u003EClosing\u003C/h2\u003E\n\u003Cp\u003EWe\u0026#8217;ve seen \u003Ca href=\u0022https://hub.docker.com/_/microsoft-dotnet\u0022\u003E.NET container\u003C/a\u003E usage grow quickly, with image pulls now in the millions per month. Developers use containers because they have important benefits that are not provided by other solutions. They enable more deterministic and (approaching) instant-on compute, with Linux and Windows operating systems, on x64 and Arm architectures.\u003C/p\u003E\n\u003Cp\u003EWe\u0026#8217;ve learned a lot as a team over the past five years that we\u0026#8217;ve been publishing container images. This post, and the ones that will follow it, are intended to help you get the most out of using .NET containers and also to provide you with the knowledge you need to make the best choices on their use.\u003C/p\u003E\n\u003Cp\u003EThis post includes comparisons between Linux and Windows. The descriptions of Linux and Windows are intended to be objective, and are not influenced by an agenda (other than education), nor are they intended to get people to switch operating systems. I described the various ecosystems as I see them, having significant experience with both. If there are inaccuracies, please point those out.\u003C/p\u003E\n\u003Cp\u003EIt is very exciting and satisfying to see container usage be such an important part of .NET usage generally. My team has put a lot of effort into providing a great experience, and I\u0026#8217;m glad to see so many developers and companies taking advantage of it. That said, there is still a lot to do, and we would like more feedback to help direct our future efforts.\u003C/p\u003E\n\u003Cp\u003EI\u0026#8217;ll leave you with a few take-aways from the post:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EIt is important to rebuild your container images frequently \u0026#8212; multiple times a month on Linux and once a month on Windows \u0026#8212; to limit your exposure to CVEs.\u003C/li\u003E\n\u003Cli\u003EDeveloping fluency with reading \u003Ca href=\u0022https://nvd.nist.gov/\u0022\u003Eofficial CVE reports\u003C/a\u003E will enable you to navigate CVEs, severe or otherwise, and as you need to.\u003C/li\u003E\n\u003Cli\u003EPatching is not a sufficient security strategy on its own. There will be periods of time where patches will not be available.\u003C/li\u003E\n\u003Cli\u003EPolicies are needed ahead-of-time (in your organization) to determine what to do when patches are not available.\u003C/li\u003E\n\u003Cli\u003EThe .NET container team publishes updated images \u0026#8212; with operating system patches \u0026#8212; with a 12 hour SLA. In the case of (very) severe CVEs, we will typically publish faster.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ELooking forward, .NET 6.0 is shaping up to be a great release, including for \u003Ca href=\u0022https://github.com/dotnet/core/issues/5397\u0022\u003Econtainers and cloud native\u003C/a\u003E. I\u0026#8217;ll write more about some of these upcoming features and scenarios in future posts.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/staying-safe-with-dotnet-containers/\u0022\u003EStaying safe with .NET containers\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/content:encoded\u003E\n\t\t\t\t\t\n\t\t\t\t\t\u003Cwfw:commentRss\u003Ehttps://devblogs.microsoft.com/dotnet/staying-safe-with-dotnet-containers/feed/\u003C/wfw:commentRss\u003E\n\t\t\t\u003Cslash:comments\u003E18\u003C/slash:comments\u003E\n\t\t\n\t\t\n\t\t\t\u003C/item\u003E\n\t\t\u003Citem\u003E\n\t\t\u003Ctitle\u003E.NET Framework February Security and Quality Rollup\u003C/title\u003E\n\t\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet/net-framework-february-security-and-quality-rollup/\u003C/link\u003E\n\t\t\t\t\t\u003Ccomments\u003Ehttps://devblogs.microsoft.com/dotnet/net-framework-february-security-and-quality-rollup/#respond\u003C/comments\u003E\n\t\t\n\t\t\u003Cdc:creator\u003E\u003C![CDATA[Tara Overfield]]\u003E\u003C/dc:creator\u003E\n\t\t\u003CpubDate\u003EWed, 10 Feb 2021 00:42:45 \u002B0000\u003C/pubDate\u003E\n\t\t\t\t\u003Ccategory\u003E\u003C![CDATA[.NET Framework]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[Security]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[WPF]]\u003E\u003C/category\u003E\n\t\t\u003Cguid isPermaLink=\u0022false\u0022\u003Ehttps://devblogs.microsoft.com/dotnet/?p=31734\u003C/guid\u003E\n\n\t\t\t\t\t\u003Cdescription\u003E\u003C![CDATA[\u003Cp\u003EToday, we are releasing the February 2021 Security and Quality Rollup Updates for .NET Framework.\u003Cbr /\u003E\nSecurity\u003Cbr /\u003E\nCVE-2021-24111\u2013 .NET Framework Denial of Service Vulnerability\u003Cbr /\u003E\nThis security update addresses a denial of service vulnerability in .NET Framework. For more information please see CVE-2021-24111.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-february-security-and-quality-rollup/\u0022\u003E.NET Framework February Security and Quality Rollup\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/description\u003E\n\t\t\t\t\t\t\t\t\t\t\u003Ccontent:encoded\u003E\u003C![CDATA[\u003Cp\u003EToday, we are releasing the February 2021 Security and Quality Rollup Updates for .NET Framework.\u003C/p\u003E\n\u003Ch3 id=\u0022security\u0022\u003ESecurity\u003C/h3\u003E\n\u003Ch5 id=\u0022cve-2021-24111-net-framework-denial-of-service-vulnerability\u0022\u003ECVE-2021-24111\u2013 .NET Framework Denial of Service Vulnerability\u003C/h5\u003E\n\u003Cp\u003EThis security update addresses a denial of service vulnerability in .NET Framework. For more information please see \u003Ca href=\u0022https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-24111\u0022 rel=\u0022nofollow\u0022\u003ECVE-2021-24111\u003C/a\u003E.\u003C/p\u003E\n\u003Ch3 id=\u0022quality-and-reliability\u0022\u003EQuality and Reliability\u003C/h3\u003E\n\u003Cp\u003EThis release contains the following quality and reliability improvements.\u003C/p\u003E\n\u003Ch5 id=\u0022asp-net\u0022\u003EASP.NET\u003C/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EAddresses an issue where after installing the update released on October 20th, some ASP.Net applications fail during precompilation \u2013 likely with a message that contains the words \u201CError ASPCONFIG.\u201D\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch5 id=\u0022clr1\u0022\u003ECLR\u003Cspan style=\u0022font-size: 12pt;\u0022\u003E\u003Csup\u003E1\u003C/sup\u003E\u003C/span\u003E\u003C/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EImproves the reliability of automatic Native Image generation task.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch5 id=\u0022wpf2\u0022\u003EWPF\u003Cspan style=\u0022font-size: 12pt;\u0022\u003E\u003Csup\u003E2\u003C/sup\u003E\u003C/span\u003E\u003C/h5\u003E\n\u003Cul\u003E\n\u003Cli\u003EAddresses a hang when scrolling to the end of a TreeView, when layout rounding is enabled and DPI scaling is not 100%.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\u003Csup\u003E1 \u003C/sup\u003ECommon Language Runtime (CLR)\n\u003Csup\u003E2 \u003C/sup\u003EWindows Presentation Foundation (WPF)\u003C/p\u003E\n\u003Ch3 id=\u0022known-issues-in-this-update\u0022\u003EKnown issues in this update\u003C/h3\u003E\n\u003Ctable width=\u002275\u0022\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd class=\u0022\u0022\u003E\u003Cb class=\u0022ocpLegacyBold\u0022\u003ESymptom\u003C/b\u003E\u003C/td\u003E\n\u003Ctd\u003EAfter installing this update, WPF apps may crash with a callstack similar to\u003C/p\u003E\n\u003Cp\u003E\u003Ccode class=\u0022ocpCode\u0022\u003E\u003C/code\u003E\u003C/p\u003E\n\u003Cpre\u003EException Info: System.NullReferenceException at System.Windows.Interop.HwndMouseInputProvider.HasCustomChrome(System.Windows.Interop.HwndSource, RECT ByRef)\r\nat System.Windows.Interop.HwndMouseInputProvider.GetEffectiveClientRect(IntPtr)\r\nat System.Windows.Interop.HwndMouseInputProvider.PossiblyDeactivate(IntPtr, Boolean)\r\nat System.Windows.Interop.HwndMouseInputProvider.Dispose()\u003C/pre\u003E\n\u003Cp\u003EThis occurs\u00A0when disposing an HwndSource whose RootVisual is null, a situation that arises in Visual Studio when docking or splitting windows, and could arise in other apps.\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cb class=\u0022ocpLegacyBold\u0022\u003EWorkaround\u003C/b\u003E\u003C/td\u003E\n\u003Ctd\u003ETo work around this problem, set two AppContext switches using one of the methods described in\u00A0\u003Ca class=\u0022ocpExternalLink\u0022 href=\u0022https://docs.microsoft.com/en-us/dotnet/api/system.appcontext?view=netcore-3.1#remarks\u0022 target=\u0022_blank\u0022 rel=\u0022noopener\u0022\u003EAppContext Class (System)\u003C/a\u003E\u00A0under the heading \u201CAppContext for library consumers\u201D. \u00A0The switches are named\u003C/p\u003E\n\u003Cp\u003E\u003Cb class=\u0022ocpLegacyBold\u0022\u003ESwitch.System.Windows.Interop.MouseInput.OptOutOfMoveToChromedWindowFix\u003C/b\u003E\u00A0and\u003C/p\u003E\n\u003Cp\u003E\u003Cb class=\u0022ocpLegacyBold\u0022\u003ESwitch.System.Windows.Interop.MouseInput.DoNotOptOutOfMoveToChromedWindowFix\u003C/b\u003E\u003C/p\u003E\n\u003Cp\u003Eand both should be set to \u201Ctrue\u201D. \u00A0 The first switch avoids the crash, but re-introduces the bug fixed in the KBs. \u00A0The second switch is currently ignored, but will be recognized in a future .NET update that contains a fix for the null-reference crash; \u00A0it restores the original bug fix.\u003C/p\u003E\n\u003Cp\u003EFor example, using the app.config file method to apply the workaround at application scope:\u003C/p\u003E\n\u003Cp\u003E\u003Ccode class=\u0022ocpCode\u0022\u003E\u003C/code\u003E\u003C/p\u003E\n\u003Cpre\u003E\u0026lt;AppContextSwitchOverrides \r\nvalue=\u0022Switch.System.Windows.Interop.MouseInput.OptOutOfMoveToChromedWindowFix=true; \r\nSwitch.System.Windows.Interop.MouseInput.DoNotOptOutOfMoveToChromedWindowFix=true \u0022 /\u0026gt;\u003C/pre\u003E\n\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cb class=\u0022ocpLegacyBold\u0022\u003EResolution\u003C/b\u003E\u003C/td\u003E\n\u003Ctd\u003EFor some Windows 10, version 1809, Windows Server 2019 and newer versions this issue is resolved in \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-february-2021-cumulative-update-preview-for-net-framework/\u0022 rel=\u0022nofollow\u0022\u003EFebruary 2021 Cumulative Update Preview\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/tbody\u003E\n\u003C/table\u003E\n\u003Ch3 id=\u0022\u0022\u003E\u003C/h3\u003E\n\u003Ch3\u003E\u003Ca id=\u0022user-content-getting-the-update\u0022 class=\u0022anchor\u0022 href=\u0022#getting-the-update\u0022\u003E\u003C/a\u003EGetting the Update\u003C/h3\u003E\n\u003Cp\u003EThe Security and Quality Rollup is available via Windows Update, Windows Server Update Services, and Microsoft Update Catalog. The Security Only Update is available via Windows Server Update Services and Microsoft Update Catalog.\u003C/p\u003E\n\u003Ch5\u003E\u003Ca id=\u0022user-content-microsoft-update-catalog\u0022 class=\u0022anchor\u0022 href=\u0022#microsoft-update-catalog\u0022\u003E\u003C/a\u003EMicrosoft Update Catalog\u003C/h5\u003E\n\u003Cp\u003EYou can get the update via the Microsoft Update Catalog. For Windows 10, NET Framework 4.8 updates are available via Windows Update, Windows Server Update Services, Microsoft Update Catalog. Updates for other versions of .NET Framework are part of the Windows 10 Monthly Cumulative Update.\u003C/p\u003E\n\u003Cp\u003E**Note**: Customers that rely on Windows Update and Windows Server Update Services will automatically receive the .NET Framework version-specific updates. Advanced system administrators can also take use of the below direct Microsoft Update Catalog download links to .NET Framework-specific updates. Before applying these updates, please ensure that you carefully review the .NET Framework version applicability, to ensure that you only install updates on systems where they apply.\u003C/p\u003E\n\u003Cp\u003EThe following table is for Windows 10 and Windows Server 2016 and newer versions.\u003C/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00228px\u0022\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003EProduct Version\u003C/th\u003E\n\u003Cth colspan=\u00222\u0022\u003ECumulative Update\u003C/th\u003E\n\u003C/tr\u003E\n\u003C/thead\u003E\n\u003Ctbody\u003E\n\u003Ctr bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd\u003E\u003Cstrong\u003EWindows 10, version 20H2 and Windows Server, version 20H2\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.8\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601050\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601050\u0022 rel=\u0022nofollow\u0022\u003E4601050\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd\u003E\u003Cstrong\u003EWindows 10 2004 and Windows Server, version 2004\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.8\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601050\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601050\u0022 rel=\u0022nofollow\u0022\u003E4601050\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd\u003E\u003Cstrong\u003EWindows 10 1909 and Windows Server, version 1909\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.8\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601056\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601056\u0022 rel=\u0022nofollow\u0022\u003E4601056\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd\u003E\u003Cstrong\u003EWindows 10 1809 (October 2018 Update) and Windows Server 2019\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601887\u0022 rel=\u0022nofollow\u0022\u003E4601887\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.7.2\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601060\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601060\u0022 rel=\u0022nofollow\u0022\u003E4601060\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.8\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601055\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601055\u0022 rel=\u0022nofollow\u0022\u003E4601055\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd\u003E\u003Cstrong\u003EWindows 10 1803 (April 2018 Update)\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.7.2\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601354\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601354\u0022 rel=\u0022nofollow\u0022\u003E4601354\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 4.8\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601054\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601054\u0022 rel=\u0022nofollow\u0022\u003E4601054\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd\u003E\u003Cstrong\u003EWindows 10 1703 (Creators Update)\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.7, 4.7.1, 4.7.2\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601330\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601330\u0022 rel=\u0022nofollow\u0022\u003E4601330\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 4.8\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601052\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601052\u0022 rel=\u0022nofollow\u0022\u003E4601052\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd\u003E\u003Cstrong\u003EWindows 10 1607 (Anniversary Update) and Windows Server 2016\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 3.5, 4.6.2, 4.7, 4.7.1, 4.7.2\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601318\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601318\u0022 rel=\u0022nofollow\u0022\u003E4601318\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.NET Framework 4.8\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601051\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601051\u0022 rel=\u0022nofollow\u0022\u003E4601051\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/tbody\u003E\n\u003C/table\u003E\n\u003Cp\u003EThe following table is for earlier Windows and Windows Server versions.\u003C/p\u003E\n\u003Ctable border=\u00221\u0022 cellspacing=\u00220\u0022 cellpadding=\u00228px\u0022\u003E\n\u003Cthead\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Cth style=\u0022height: 42px;\u0022\u003EProduct Version\u003C/th\u003E\n\u003Cth style=\u0022height: 42px;\u0022 colspan=\u00222\u0022\u003ESecurity and Quality Rollup\u003C/th\u003E\n\u003Cth style=\u0022height: 42px;\u0022 colspan=\u00222\u0022\u003ESecurity Only Update\u003C/th\u003E\n\u003C/tr\u003E\n\u003C/thead\u003E\n\u003Ctbody\u003E\n\u003Ctr style=\u0022height: 42px;\u0022 bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003EWindows 8.1, Windows RT 8.1 and Windows Server 2012 R2\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4603004\u0022 rel=\u0022nofollow\u0022\u003E4603004\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4602960\u0022 rel=\u0022nofollow\u0022\u003E4602960\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 3.5\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4578953\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4578953\u0022 rel=\u0022nofollow\u0022\u003E4578953\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.5.2\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4578956\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4578956\u0022 rel=\u0022nofollow\u0022\u003E4578956\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, 4.7.2\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601048\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601048\u0022 rel=\u0022nofollow\u0022\u003E4601048\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601094\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601094\u0022 rel=\u0022nofollow\u0022\u003E4601094\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.8\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601058\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601058\u0022 rel=\u0022nofollow\u0022\u003E4601058\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601092\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601092\u0022 rel=\u0022nofollow\u0022\u003E4601092\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022 bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003EWindows Server 2012\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4603003\u0022 rel=\u0022nofollow\u0022\u003E4603003\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4602959\u0022 rel=\u0022nofollow\u0022\u003E4602959\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 3.5\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4578950\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4578950\u0022 rel=\u0022nofollow\u0022\u003E4578950\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.5.2\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4578954\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4578954\u0022 rel=\u0022nofollow\u0022\u003E4578954\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, 4.7.2\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4600957\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4600957\u0022 rel=\u0022nofollow\u0022\u003E4600957\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601093\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601093\u0022 rel=\u0022nofollow\u0022\u003E4601093\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.8\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601057\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601057\u0022 rel=\u0022nofollow\u0022\u003E4601057\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601091\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601091\u0022 rel=\u0022nofollow\u0022\u003E4601091\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022 bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003EWindows 7 SP1 and Windows Server 2008 R2 SP1\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4603002\u0022 rel=\u0022nofollow\u0022\u003E4603002\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4602958\u0022 rel=\u0022nofollow\u0022\u003E4602958\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 3.5.1\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4578952\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4578952\u0022 rel=\u0022nofollow\u0022\u003E4578952\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.5.2\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4578955\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4578955\u0022 rel=\u0022nofollow\u0022\u003E4578955\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, 4.7.2\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4600945\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4600945\u0022 rel=\u0022nofollow\u0022\u003E4600945\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601090\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601090\u0022 rel=\u0022nofollow\u0022\u003E4601090\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.8\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4600944\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4600944\u0022 rel=\u0022nofollow\u0022\u003E4600944\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601089\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601089\u0022 rel=\u0022nofollow\u0022\u003E4601089\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022 bgcolor=\u0022#F0F0F0\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003EWindows Server 2008\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4603005\u0022 rel=\u0022nofollow\u0022\u003E4603005\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Cstrong\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4602961\u0022 rel=\u0022nofollow\u0022\u003E4602961\u003C/a\u003E\u003C/strong\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 2.0, 3.0\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4578951\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4578951\u0022 rel=\u0022nofollow\u0022\u003E4578951\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.5.2\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4578955\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4578955\u0022 rel=\u0022nofollow\u0022\u003E4578955\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003EN/A\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr style=\u0022height: 42px;\u0022\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E.NET Framework 4.6\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4600945\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4600945\u0022 rel=\u0022nofollow\u0022\u003E4600945\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022http://www.catalog.update.microsoft.com/Search.aspx?q=4601090\u0022 rel=\u0022nofollow\u0022\u003ECatalog\u003C/a\u003E\u003C/td\u003E\n\u003Ctd style=\u0022height: 42px;\u0022\u003E\u003Ca href=\u0022https://support.microsoft.com/kb/4601090\u0022 rel=\u0022nofollow\u0022\u003E4601090\u003C/a\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/tbody\u003E\n\u003C/table\u003E\n\u003Cp\u003E\u0026nbsp;\u003C/p\u003E\n\u003Ch5 id=\u0022previous-monthly-rollups\u0022\u003EPrevious Monthly Rollups\u003C/h5\u003E\n\u003Cp\u003EThe last few .NET Framework Monthly updates are listed below for your convenience:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-january-security-and-quality-rollup-update/\u0022 rel=\u0022nofollow\u0022\u003E.NET Framework January Security and Quality Rollup Update\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-november-2020-cumulative-update-preview-for-windows-10-2004-and-windows-server-version-2004/\u0022 rel=\u0022nofollow\u0022\u003E.NET Framework November 2020 Cumulative Update Preview for Windows 10 2004 and Windows Server, version 2004\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-november-2020-cumulative-update-preview/\u0022 rel=\u0022nofollow\u0022\u003E.NET Framework November 2020 Cumulative Update Preview\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-november-2020-security-and-quality-rollup-updates/\u0022 rel=\u0022nofollow\u0022\u003E.NET Framework November 2020 Security and Quality Rollup Updates\u003C/a\u003E\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-february-security-and-quality-rollup/\u0022\u003E.NET Framework February Security and Quality Rollup\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/content:encoded\u003E\n\t\t\t\t\t\n\t\t\t\t\t\u003Cwfw:commentRss\u003Ehttps://devblogs.microsoft.com/dotnet/net-framework-february-security-and-quality-rollup/feed/\u003C/wfw:commentRss\u003E\n\t\t\t\u003Cslash:comments\u003E0\u003C/slash:comments\u003E\n\t\t\n\t\t\n\t\t\t\u003C/item\u003E\n\t\t\u003Citem\u003E\n\t\t\u003Ctitle\u003E.NET February 2021 Updates \u2013 5.0.3, 3.1.12, 2.1.25\u003C/title\u003E\n\t\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet/net-february-2021/\u003C/link\u003E\n\t\t\t\t\t\u003Ccomments\u003Ehttps://devblogs.microsoft.com/dotnet/net-february-2021/#comments\u003C/comments\u003E\n\t\t\n\t\t\u003Cdc:creator\u003E\u003C![CDATA[Rahul Bhandari (MSFT)]]\u003E\u003C/dc:creator\u003E\n\t\t\u003CpubDate\u003ETue, 09 Feb 2021 18:24:20 \u002B0000\u003C/pubDate\u003E\n\t\t\t\t\u003Ccategory\u003E\u003C![CDATA[.NET]]\u003E\u003C/category\u003E\n\t\t\u003Cguid isPermaLink=\u0022false\u0022\u003Ehttps://devblogs.microsoft.com/dotnet/?p=31691\u003C/guid\u003E\n\n\t\t\t\t\t\u003Cdescription\u003E\u003C![CDATA[\u003Cp\u003EToday, we are releasing the .NET February 2021 Updates. These updates contains reliability and security improvements. See the individual release notes for details on updated packages.\u003Cbr /\u003E\nYou can download 5.0.3\u00A0, 3.1.12, 2.1.25 versions for Windows, macOS, and Linux, for x86,\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/net-february-2021/\u0022\u003E.NET February 2021 Updates \u2013 5.0.3, 3.1.12, 2.1.25\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/description\u003E\n\t\t\t\t\t\t\t\t\t\t\u003Ccontent:encoded\u003E\u003C![CDATA[\u003Cp\u003EToday, we are releasing the \u003Ca href=\u0022https://github.com/dotnet/announcements/issues/174\u0022\u003E.NET February 2021 Updates\u003C/a\u003E. These updates contains reliability and security improvements. See the individual release notes for details on updated packages.\u003C/p\u003E\n\u003Cp class=\u0022\u0022\u003EYou can download \u003Ca href=\u0022https://dotnet.microsoft.com/download/dotnet/5.0\u0022\u003E5.0.3\u003C/a\u003E\u00A0,\u003Ca href=\u0022https://dotnet.microsoft.com/download/dotnet-core/3.1\u0022\u003E 3.1.12\u003C/a\u003E, \u003Ca href=\u0022https://dotnet.microsoft.com/download/dotnet-core/2.1\u0022\u003E2.1.25\u003C/a\u003E versions for Windows, macOS, and Linux, for x86, x64, Arm32, and Arm64.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EInstallers and binaries: \u003Ca href=\u0022https://dotnet.microsoft.com/download/dotnet/5.0\u0022\u003E5.0.3\u003C/a\u003E | \u003Ca href=\u0022https://dotnet.microsoft.com/download/dotnet-core/3.1\u0022\u003E3.1.12\u003C/a\u003E | \u003Ca href=\u0022https://dotnet.microsoft.com/download/dotnet-core/2.1\u0022\u003E2.1.25\u003C/a\u003E\u003C/li\u003E\n\u003Cli class=\u0022\u0022\u003ERelease notes: \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0.3/5.0.3.md\u0022\u003E5.0.3\u003C/a\u003E | \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.12/3.1.12.md\u0022\u003E3.1.12\u003C/a\u003E | \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.25/2.1.25.md\u0022\u003E2.1.25\u003C/a\u003E\u003C/li\u003E\n\u003Cli class=\u0022\u0022\u003E\u003Ca href=\u0022https://hub.docker.com/_/microsoft-dotnet\u0022\u003EContainer images\u003C/a\u003E\u003C/li\u003E\n\u003Cli class=\u0022\u0022\u003ELinux packages: \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0.3/5.0.3-install-instructions.md\u0022\u003E5.0.3\u003C/a\u003E | \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.12/3.1.12-install-instructions.md\u0022\u003E3.1.12\u003C/a\u003E | \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.25/2.1.25-install-instructions.md\u0022\u003E2.1.25\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\u0022https://github.com/dotnet/core/issues/5932\u0022 target=\u0022_blank\u0022 rel=\u0022noopener noreferrer\u0022\u003ERelease feedback/issues\u003C/a\u003E\u003C/li\u003E\n\u003Cli class=\u0022\u0022\u003EKnown issues: \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0-known-issues.md\u0022\u003E5.0\u003C/a\u003E | \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1-known-issues.md\u0022\u003E3.1\u003C/a\u003E | \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.0-known-issues.md\u0022\u003E2.1\u003C/a\u003E\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cdiv\u003E\n\u003Ch2 id=\u0022security\u0022\u003ESecurity\u003C/h2\u003E\n\u003Cdiv\u003E\n\u003Ch3 id=\u0022cve-2021-1721-net-core-denial-of-service-vulnerability\u0022\u003E\u003Cspan style=\u0022font-size: 18pt;\u0022\u003E\u003Ca href=\u0022https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2021-1721\u0022\u003ECVE-2021-1721: .NET Core Denial of Service Vulnerability\u003C/a\u003E\u003C/span\u003E\u003C/h3\u003E\n\u003C/div\u003E\n\u003Cdiv\u003E\n\u003Cdiv\u003E\n\u003Cdiv\u003EMicrosoft\u00A0is\u00A0releasing\u00A0this\u00A0security\u00A0advisory\u00A0to\u00A0provide\u00A0information\u00A0about\u00A0a\u00A0vulnerability\u00A0in\u00A0.NET\u00A05,\u00A0.NET\u00A0Core\u00A03.1,\u00A0and\u00A0.NET\u00A0Core\u00A02.1.\u00A0This\u00A0advisory\u00A0also\u00A0provides\u00A0guidance\u00A0on\u00A0what\u00A0developers\u00A0can\u00A0do\u00A0to\u00A0update\u00A0their\u00A0applications\u00A0to\u00A0remove\u00A0this\u00A0vulnerability.\u003C/div\u003E\n\u003Cdiv\u003EA\u00A0denial-of-service\u00A0vulnerability\u00A0exists\u00A0when\u00A0creating\u00A0HTTPS\u00A0web\u00A0request\u00A0during\u00A0X509\u00A0certificate\u00A0chain\u00A0building.\u003C/div\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cdiv\u003E\u003C/div\u003E\n\u003Ch3 id=\u0022cve-2021-24112-net-5-and-net-core-remote-code-execution-vulnerability\u0022\u003E\u003Cspan style=\u0022font-size: 18pt;\u0022\u003E\u003Ca href=\u0022https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2021-24112\u0022\u003ECVE-2021-24112: .NET 5 and .NET Core Remote Code Execution Vulnerability\u003C/a\u003E\u003C/span\u003E\u003C/h3\u003E\n\u003Cdiv\u003E\n\u003Cdiv\u003E\n\u003Cp\u003E\u003Cspan style=\u0022font-size: 12pt;\u0022\u003EMicrosoft\u00A0is\u00A0releasing\u00A0this\u00A0security\u00A0advisory\u00A0to\u00A0provide\u00A0information\u00A0about\u00A0a\u00A0vulnerability\u00A0in\u00A0.NET\u00A05.0,\u00A0.NET\u00A0Core\u00A03.1,\u00A0and\u00A0.NET\u00A0Core\u00A02.1.\u00A0This\u00A0advisory\u00A0also\u00A0provides\u00A0guidance\u00A0on\u00A0what\u00A0developers\u00A0can\u00A0do\u00A0to\u00A0update\u00A0their\u00A0applications\u00A0to\u00A0remove\u00A0this\u00A0vulnerability.\u003C/span\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cspan style=\u0022font-size: 12pt;\u0022\u003EA\u00A0remote\u00A0code\u00A0execution\u00A0vulnerability\u00A0exists\u00A0when\u00A0parsing\u00A0certain\u00A0types\u00A0of\u00A0graphics\u00A0files.\u00A0This\u00A0vulnerability\u00A0only\u00A0exists\u00A0on\u00A0systems\u00A0running\u00A0on\u00A0MacOS\u00A0or\u00A0Linux.\u003C/span\u003E\u003C/p\u003E\n\u003Cdiv\u003E\u003C/div\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cdiv\u003E\n\u003Ch2 id=\u0022improvements\u0022\u003EImprovements\u003C/h2\u003E\n\u003Cul\u003E\n\u003Cli\u003ERuntime : \u003Ca href=\u0022https://github.com/dotnet/runtime/issues?q=milestone%3A5.0.3\u002Bis%3Aclosed\u002Blabel%3Aservicing-approved\u0022\u003E5.0.3\u003C/a\u003E | \u003Ca href=\u0022https://github.com/dotnet/runtime/pulls?q=is%3Apr\u002Bis%3Aclosed\u002B3.1.12\u002Blabel%3Aservicing-approved\u0022\u003E3.1.12\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003EASP.NET Core : \u003Ca href=\u0022https://github.com/dotnet/aspnetcore/issues?q=milestone%3A5.0.3\u002Bis%3Aclosed\u002Blabel%3Aservicing-approved\u0022\u003E5.0.3\u003C/a\u003E | \u003Ca href=\u0022https://github.com/dotnet/aspnetcore/pulls?q=milestone%3A3.1.12\u002Bis%3Aclosed\u002Blabel%3Aservicing-approved\u0022\u003E3.1.12\u003C/a\u003E | \u003Ca href=\u0022https://github.com/dotnet/aspnetcore/pulls?q=milestone%3A2.1.25\u002Bis%3Aclosed\u002Blabel%3Aservicing-approved\u0022\u003E2.1.25\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003EEntityFramework Core : \u003Ca href=\u0022https://github.com/dotnet/efcore/issues?q=milestone%3A5.0.3\u002Bis%3Aclosed\u002Blabel%3Aservicing-approved\u0022\u003E5.0.3\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003ECoreCLR: \u003Ca href=\u0022https://github.com/dotnet/coreclr/pulls?q=milestone%3A3.1.12\u002Bis%3Aclosed\u002Blabel%3Aservicing-approved\u0022\u003E3.1.12\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003EWinforms: \u003Ca href=\u0022https://github.com/dotnet/winforms/issues?q=milestone%3A5.0.3\u002Bis%3Aclosed\u002Blabel%3Aservicing-approved\u0022\u003E5.0.3\u003C/a\u003E | \u003Ca href=\u0022https://github.com/dotnet/winforms/pulls?q=milestone%3A3.1.12\u002Bis%3Aclosed\u002Blabel%3Aservicing-approved\u0022\u003E3.1.12\u003C/a\u003E\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch2 aria-level=\u00222\u0022 aria-level=\u00222\u0022 id=\u0022visual-studio\u0022\u003EVisual Studio\u003C/h2\u003E\n\u003Cp\u003ESee release notes for Visual Studio compatibility for \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.25/2.1.25.md#visual-studio-compatibility\u0022\u003E.NET Core 2.1\u003C/a\u003E and \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.12/3.1.12.md#visual-studio-compatibility\u0022\u003E.NET Core 3.1\u003C/a\u003E and \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0.3/5.0.3.md#visual-studio-compatibility\u0022\u003E.NET 5.0\u003C/a\u003E.\u003C/p\u003E\n\u003C/div\u003E\n\u003Ch2 id=\u0022os-lifecycle-update\u0022\u003EOS Lifecycle update\u003C/h2\u003E\n\u003Cdiv\u003EAlpine 3.13 is now supported with the .NET 5.0.3 update. \u003Cspan style=\u0022font-size: 1rem;\u0022\u003EThe operating system support page for \u003Ca href=\u0022https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0-supported-os.md\u0022\u003E.NET 5.0\u003C/a\u003E has been updated to reflect that.\u003C/span\u003E\u003C/div\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/net-february-2021/\u0022\u003E.NET February 2021 Updates \u2013 5.0.3, 3.1.12, 2.1.25\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/content:encoded\u003E\n\t\t\t\t\t\n\t\t\t\t\t\u003Cwfw:commentRss\u003Ehttps://devblogs.microsoft.com/dotnet/net-february-2021/feed/\u003C/wfw:commentRss\u003E\n\t\t\t\u003Cslash:comments\u003E5\u003C/slash:comments\u003E\n\t\t\n\t\t\n\t\t\t\u003C/item\u003E\n\t\t\u003Citem\u003E\n\t\t\u003Ctitle\u003EUsing C# Source Generators to create an external DSL\u003C/title\u003E\n\t\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet/using-c-source-generators-to-create-an-external-dsl/\u003C/link\u003E\n\t\t\t\t\t\u003Ccomments\u003Ehttps://devblogs.microsoft.com/dotnet/using-c-source-generators-to-create-an-external-dsl/#comments\u003C/comments\u003E\n\t\t\n\t\t\u003Cdc:creator\u003E\u003C![CDATA[Luca Bolognese]]\u003E\u003C/dc:creator\u003E\n\t\t\u003CpubDate\u003EWed, 27 Jan 2021 19:35:09 \u002B0000\u003C/pubDate\u003E\n\t\t\t\t\u003Ccategory\u003E\u003C![CDATA[.NET]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[.NET Core]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[C#]]\u003E\u003C/category\u003E\n\t\t\u003Cguid isPermaLink=\u0022false\u0022\u003Ehttps://devblogs.microsoft.com/dotnet/?p=31653\u003C/guid\u003E\n\n\t\t\t\t\t\u003Cdescription\u003E\u003C![CDATA[\u003Cp\u003EThis post looks at how to use C# Source Generators to build an external DSL to represent mathematical expressions.\u003Cbr /\u003E\nThe code for this post is on the roslyn-sdk repository.\u003Cbr /\u003E\nA recap of C# Source Generators\u003Cbr /\u003E\nThere are two other articles describing C# Source Generators on this blog,\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/using-c-source-generators-to-create-an-external-dsl/\u0022\u003EUsing C# Source Generators to create an external DSL\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/description\u003E\n\t\t\t\t\t\t\t\t\t\t\u003Ccontent:encoded\u003E\u003C![CDATA[\u003Cp\u003EThis post looks at how to use C# Source Generators to build an \u003Ca href=\u0022https://en.wikipedia.org/wiki/Domain-specific_language\u0022\u003Eexternal DSL\u003C/a\u003E to represent mathematical expressions.\u003C/p\u003E\n\u003Cp\u003EThe code for this post is on the \u003Ca href=\u0022https://github.com/dotnet/roslyn-sdk/blob/master/samples/CSharp/SourceGenerators/SourceGeneratorSamples/MathsGenerator.cs\u0022\u003Eroslyn-sdk repository\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022a-recap-of-c-source-generators\u0022\u003EA recap of C# Source Generators\u003C/h2\u003E\n\u003Cp\u003EThere are two other articles describing C# Source Generators on this blog, \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/\u0022\u003EIntroducing C# Source Generators\u003C/a\u003E and \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/new-c-source-generator-samples/\u0022\u003ENew C# Source Generator Samples\u003C/a\u003E. If you\u0026#8217;re new to generators, you might want to read them first.\u003C/p\u003E\n\u003Cp\u003ELet\u0026#8217;s just remind ourselves of what they are. You can think of a Source Generator as a function that runs at compile time. It takes some inputs and produces C# code.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022dotnetcli\u0022\u003EProgram Parse Tree -\u0026gt; Additional Files -\u0026gt; File Specific Options -\u0026gt; C# Code\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis conceptual view is implemented in the \u003Ccode\u003EISourceGenerator\u003C/code\u003E interface.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003E    public interface ISourceGenerator {\r\n        void Execute(GeneratorExecutionContext context);\r\n        void Initialize(GeneratorInitializationContext context);\r\n}\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EYou implement the \u003Ccode\u003EExecute\u003C/code\u003E method and get the inputs through the \u003Ccode\u003Econtext\u003C/code\u003E object. The \u003Ccode\u003EInitialize\u003C/code\u003E function is more rarely used.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ccode\u003Econtext\u003C/code\u003E parameter to \u003Ccode\u003EExecute\u003C/code\u003E contains the inputs.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Econtext.Compilation\u003C/code\u003E is the parse tree for the program and everything else needed by the compiler (settings, references, etc.).\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003Econtext.AdditionalFiles\u003C/code\u003E gives you the additional files in the project.\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003Econtext.AnalyzerConfigOptions.GetOptions\u003C/code\u003E provides the options for each additional file.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThe additional files are added to the project file using this syntax. Also, notice the file specific options that you can retrieve in your generator code.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022xml\u0022\u003E\u0026lt;AdditionalFiles Include=\u0022Cars.csv\u0022 CsvLoadType=\u0022OnDemand\u0022 CacheObjects=\u0022true\u0022 /\u0026gt;\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EYou are not limited to these inputs. A C# generator is just a bit of code that runs at compile time. The code can do whatever it pleases. For example, it could download information from a website (not a good idea). But the three inputs above are the most logical ones as they are part of the project. It is the recommended way to do it.\u003C/p\u003E\n\u003Cp\u003EAs a side note, a different source generators\u0026#8217; metaphor is the anthropomorphization of the compiler. Mrs. Compiler goes about her business of generating the parse tree and then she stops and asks you: \u0026#8220;Do you have anything to add to what I have done so far?\u0026#8221;\u003C/p\u003E\n\u003Ch2 id=\u0022the-scenario\u0022\u003EThe scenario\u003C/h2\u003E\n\u003Cp\u003EYou work for an engineering company that employes many mathematicians. The formulas that underpin the business are spread out through the large C# codebase. The company would like to centralize them and make them easy to write and understand for their mathematicians.\u003C/p\u003E\n\u003Cp\u003EThey would like the calculations to be written in pure math, but have the same performance as C# code. For example, they would like the code to end up being inlined at the point of usage. Here is an example of what they would like to write:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022dotnetcli\u0022\u003EAreaSquare(l)       = pow(l, 2)\r\nAreaRectangle(w, h) = w * h\r\nAreaCircle(r)       = pi * r * r\r\nQuadratic(a, b, c)  = {-b \u002B sqrt(pow(b,2) - 4 * a * c)} / (2 * a)\r\n\r\nGoldenRatio         = 1.61803\r\nGoldHarm(n)         = GoldenRatio \u002B 1 * \u2211(i, 1, n, 1 / i)\r\n\r\nD(x\u0027, x\u0027\u0027, y\u0027, y\u0027\u0027) = sqrt(pow([x\u0027-x\u0027\u0027],2) \u002B pow([y\u0027-y\u0027\u0027], 2))\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EYou notice several things that differentiate this language from C#:\u003C/p\u003E\n\u003Col\u003E\n\u003Cli\u003ENo type-annotations.\u003C/li\u003E\n\u003Cli\u003EDifferent kinds of parenthesis.\u003C/li\u003E\n\u003Cli\u003EInvalid C# characters in identifiers.\u003C/li\u003E\n\u003Cli\u003ESpecial syntax for the summation symbol (\u003Ccode\u003E\u2211\u003C/code\u003E).\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003EDespite the differences, the language structure is similar to C# methods and properties. You think you should be able to translate each line of the language to a snippet of valid C# code.\u003C/p\u003E\n\u003Cp\u003EYou decide to use Source Generators for this task because they plug directly into the normal compiler workflow and because in the future the code might need to access the parse tree for the enclosing program.\u003C/p\u003E\n\u003Cp\u003EOne could use Regex substitutions to go from this language to C#, but that approach is problematic for two reasons.\u003C/p\u003E\n\u003Col\u003E\n\u003Cli\u003EThe language structure is not completely identical to C# (i.e., you need to generate special code for \u003Ccode\u003E\u2211\u003C/code\u003E)\u003C/li\u003E\n\u003Cli\u003EMore importantly, you expose yourself to \u003Ca href=\u0022https://owasp.org/www-community/attacks/Code_Injection\u0022\u003Ecode injection attack\u003C/a\u003E. A disgruntled mathematician could write code to mint bitcoins inside your language. By properly parsing the language you can whitelist the available functions.\u003C/li\u003E\n\u003C/ol\u003E\n\u003Ch2 id=\u0022hooking-up-the-inputs\u0022\u003EHooking up the inputs\u003C/h2\u003E\n\u003Cp\u003EHere is the implementation of the \u003Ccode\u003EExecute\u003C/code\u003E method for the \u003Ccode\u003EISourceGenerator\u003C/code\u003E interface.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003E        public void Execute(GeneratorExecutionContext context)\r\n        {\r\n\r\n            foreach (AdditionalText file in context.AdditionalFiles)\r\n            {\r\n                if (Path.GetExtension(file.Path).Equals(\u0022.math\u0022, StringComparison.OrdinalIgnoreCase))\r\n                {\r\n                    if(!libraryIsAdded)\r\n                    {\r\n                        context.AddSource(\u0022___MathLibrary___.cs\u0022, SourceText.From(libraryCode, Encoding.UTF8));\r\n                        libraryIsAdded = true;\r\n                    }\r\n                    // Load formulas from .math files\r\n                    var mathText = file.GetText();\r\n                    var mathString = \u0022\u0022;\r\n\r\n                    if(mathText != null)\r\n                    {\r\n                        mathString = mathText.ToString();\r\n                    } else\r\n                    {\r\n                        throw new Exception($\u0022Cannot load file {file.Path}\u0022);\r\n                    }\r\n\r\n                    // Get name of generated namespace from file name\r\n                    string fileName = Path.GetFileNameWithoutExtension(file.Path);\r\n\r\n                    // Parse and gen the formulas functions\r\n                    var tokens = Lexer.Tokenize(mathString);\r\n                    var code = Parser.Parse(tokens);\r\n\r\n                    var codeFileName = $@\u0022{fileName}.cs\u0022;\r\n\r\n                    context.AddSource(codeFileName, SourceText.From(code, Encoding.UTF8));\r\n                }\r\n            }\r\n        }\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThe code scans the additional files from the project file and operates on the ones with the extension \u003Ccode\u003E.math\u003C/code\u003E.\u003C/p\u003E\n\u003Cp\u003EFirstly, it adds to the project a C# library file containing some utility functions. Then it gets the text for the Math file (aka the formulas), parses the language, and generates C# code for it.\u003C/p\u003E\n\u003Cp\u003EThis snippet is the minimum code to hook up a new language into your C# project. You can do more here. You can inspect the parse tree or gather more options to influence the way the language is parsed and generated, but this is not necessary in this case.\u003C/p\u003E\n\u003Ch2 id=\u0022writing-the-parser\u0022\u003EWriting the parser\u003C/h2\u003E\n\u003Cp\u003EThis section is standard compiler fare. If you are familiar with lexing, parsing, and generating code, you can jump directly to the next section. If you are curious, read on.\u003C/p\u003E\n\u003Cp\u003EWe are implementing the following two lines from the code above.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003Evar tokens = Lexer.Tokenize(mathString);\r\nvar code = Parser.Parse(tokens);\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThe goal of these lines is to take the Math language and generate the following valid C# code. You can then call any of the generated functions from your existing code.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003Eusing static System.Math;\r\nusing static ___MathLibrary___.Formulas; // For the __MySum__ function\r\n\r\nnamespace Maths {\r\n\r\n    public static partial class Formulas {\r\n\r\n        public static double  AreaSquare (double  l ) =\u0026gt; Pow ( l , 2 ) ;\r\n        public static double  AreaRectangle (double  w ,double  h ) =\u0026gt; w * h ;\r\n        public static double  AreaCircle (double  r ) =\u0026gt; PI * r * r ;\r\n        public static double  Quadratic (double  a ,double  b ,double  c ) =\u0026gt; ( - b \u002B Sqrt ( Pow ( b , 2 ) - 4 * a * c ) ) / ( 2 * a ) ;\r\n\r\n        public static double  GoldenRatio =\u0026gt; 1.61803 ;\r\n        public static double  GoldHarm (double  n ) =\u0026gt; GoldenRatio \u002B 1 * ___MySum___ ((int) 1 ,(int) n ,i =\u0026gt;  1 / i ) ;\r\n\r\n        public static double  D (double  xPrime ,double  xSecond ,double  yPrime ,double  ySecond ) =\u0026gt; Sqrt ( Pow ( ( xPrime - xSecond ) , 2 ) \u002B Pow ( ( yPrime - ySecond ) , 2 ) ) ;\r\n\r\n    }\r\n}\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EI just touch on the most important points of the implementation, the full code is \u003Ca href=\u0022https://github.com/dotnet/roslyn-sdk/blob/master/samples/CSharp/SourceGenerators/SourceGeneratorSamples/MathsGenerator.cs\u0022\u003Ehere\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EThis is not production code. For the sake of simplicity, I had to fit it in one sample file without external dependencies. It is probably wiser to use a \u003Ca href=\u0022https://en.wikipedia.org/wiki/Comparison_of_parser_generators\u0022\u003Eparser generator\u003C/a\u003E to future-proof the implementation and avoid errors.\u003C/p\u003E\n\u003Cp\u003EWith such caveats out of the way, the lexer is Regex based. It uses the following \u003Ccode\u003EToken\u003C/code\u003E definition and Regexps.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003E    public enum TokenType {\r\n        Number,\r\n        Identifier,\r\n        Operation,\r\n        OpenParens,\r\n        CloseParens,\r\n        Equal,\r\n        EOL,\r\n        EOF,\r\n        Spaces,\r\n        Comma,\r\n        Sum,\r\n        None\r\n    }\r\n\r\n    public struct Token {\r\n        public TokenType Type;\r\n        public string Value;\r\n        public int Line;\r\n        public int Column;\r\n    }\r\n\r\n/// ... More code not shown\r\n\r\n        static (TokenType, string)[] tokenStrings = {\r\n            (TokenType.EOL,         @\u0022(rn|r|n)\u0022),\r\n            (TokenType.Spaces,      @\u0022s\u002B\u0022),\r\n            (TokenType.Number,      @\u0022[\u002B-]?((d\u002B.?d*)|(.d\u002B))\u0022),\r\n            (TokenType.Identifier,  @\u0022[_a-zA-Z][\u0060\u0027\u0022\u0022_a-zA-Z0-9]*\u0022),\r\n            (TokenType.Operation,   @\u0022[\u002B-/*]\u0022),\r\n            (TokenType.OpenParens,  @\u0022[([{]\u0022),\r\n            (TokenType.CloseParens, @\u0022[)]}]\u0022),\r\n            (TokenType.Equal,       @\u0022=\u0022),\r\n            (TokenType.Comma,       @\u0022,\u0022),\r\n            (TokenType.Sum,         @\u0022\u2211\u0022)\r\n        };\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThe \u003Ccode\u003ETokenize\u003C/code\u003E function just goes from the source text to a list of tokens.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003E\r\n        using Tokens = System.Collections.Generic.IEnumerable\u0026lt;MathsGenerator.Token\u0026gt;;\r\n\r\n        static public Tokens Tokenize(string source) {\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EIt is too long to show here. Follow the link above for the gory details.\u003C/p\u003E\n\u003Cp\u003EThe parser\u0026#8217;s grammar is described below.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003E    /* EBNF for the language\r\n        lines   = {line} EOF\r\n        line    = {EOL} identifier [lround args rround] equal expr EOL {EOL}\r\n        args    = identifier {comma identifier}\r\n        expr    = [plus|minus] term { (plus|minus) term }\r\n        term    = factor { (times|divide) factor };\r\n        factor  = number | var | func | sum | matrix | lround expr rround;\r\n        var     = identifier;\r\n        func    = identifier lround expr {comma expr} rround;\r\n        sum     = \u2211 lround identifier comma expr comma expr comma expr rround;\r\n    */\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EIt is implemented as a \u003Ca href=\u0022https://en.wikipedia.org/wiki/Recursive_descent_parser\u0022\u003Erecursive descendent parser\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ccode\u003EParse\u003C/code\u003E function is below and illustrates a few of the design decisions.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022c\u0022\u003E        public static string Parse(Tokens tokens) {\r\n            var globalSymbolTable   = new SymTable();\r\n            var symbolTable         = new SymTable();\r\n            var buffer              = new StringBuilder();\r\n\r\n            var en = tokens.GetEnumerator();\r\n            en.MoveNext();\r\n\r\n            buffer = Lines(new Context {\r\n                tokens = en,\r\n                globalSymbolTable = globalSymbolTable,\r\n                symbolTable = symbolTable,\r\n                buffer = buffer\r\n                });\r\n            return buffer.ToString();\r\n\r\n        }\r\n\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EglobalSymbolTable\u003C/code\u003E is used to store the symbols that are whitelisted and the global symbols that are generated during the parsing of the language.\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003EsymbolTable\u003C/code\u003E is for the parameters to a function and gets cleared at the start of each new line.\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003Ebuffer\u003C/code\u003E contains the C# code that is generated while parsing.\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003ELines\u003C/code\u003E is the first mutually recursive function and maps to the first line of the grammar.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EA typical example of one of such recursive functions is below.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003E        private static void Line(Context ctx) {\r\n            // line    = {EOL} identifier [lround args rround] equal expr EOL {EOL}\r\n\r\n            ctx.symbolTable.Clear();\r\n\r\n            while(Peek(ctx, TokenType.EOL))\r\n                Consume(ctx, TokenType.EOL);\r\n\r\n            ctx.buffer.Append(\u0022tpublic static double \u0022);\r\n\r\n            AddGlobalSymbol(ctx);\r\n            Consume(ctx, TokenType.Identifier);\r\n\r\n            if(Peek(ctx, TokenType.OpenParens, \u0022(\u0022)) {\r\n                Consume(ctx, TokenType.OpenParens, \u0022(\u0022); // Just round parens\r\n                Args(ctx);\r\n                Consume(ctx, TokenType.CloseParens, \u0022)\u0022);\r\n            }\r\n\r\n            Consume(ctx, TokenType.Equal);\r\n            Expr(ctx);\r\n            ctx.buffer.Append(\u0022 ;\u0022);\r\n\r\n            Consume(ctx, TokenType.EOL);\r\n\r\n            while(Peek(ctx, TokenType.EOL))\r\n                Consume(ctx, TokenType.EOL);\r\n        }\r\n\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis shows the manipulation of both symbol tables, the utility functions to advance the tokens stream, the call to the other recursive functions, and emitting the C# code.\u003C/p\u003E\n\u003Cp\u003ENot very elegant, but it gets the job done.\u003C/p\u003E\n\u003Cp\u003EWe whitelist all the functions in the \u003Ccode\u003EMath\u003C/code\u003E class.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003E        static HashSet\u0026lt;string\u0026gt; validFunctions =\r\n            new HashSet\u0026lt;string\u0026gt;(typeof(System.Math).GetMethods().Select(m =\u0026gt; m.Name.ToLower()));\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EFor most Tokens, there is a straightforward translation to C#.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003E        private static StringBuilder Emit(Context ctx, Token token) =\u0026gt; token.Type switch\r\n        {\r\n            TokenType.EOL           =\u0026gt; ctx.buffer.Append(\u0022n\u0022),\r\n            TokenType.CloseParens   =\u0026gt; ctx.buffer.Append(\u0027)\u0027), // All parens become rounded\r\n            TokenType.OpenParens    =\u0026gt; ctx.buffer.Append(\u0027(\u0027),\r\n            TokenType.Equal         =\u0026gt; ctx.buffer.Append(\u0022=\u0026gt;\u0022),\r\n            TokenType.Comma         =\u0026gt; ctx.buffer.Append(token.Value),\r\n\r\n            // Identifiers are normalized and checked for injection attacks\r\n            TokenType.Identifier    =\u0026gt; EmitIdentifier(ctx, token),\r\n            TokenType.Number        =\u0026gt; ctx.buffer.Append(token.Value),\r\n            TokenType.Operation     =\u0026gt; ctx.buffer.Append(token.Value),\r\n            TokenType.Sum           =\u0026gt; ctx.buffer.Append(\u0022MySum\u0022),\r\n            _                       =\u0026gt; Error(token, TokenType.None)\r\n        };\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EBut identifiers need special treatment to check the whitelisted symbols and replace invalid C# characters with valid strings.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022csharp\u0022\u003E        private static StringBuilder EmitIdentifier(Context ctx, Token token) {\r\n            var val = token.Value;\r\n\r\n            if(val == \u0022pi\u0022) {\r\n                ctx.buffer.Append(\u0022PI\u0022); // Doesn\u0027t follow pattern\r\n                return ctx.buffer;\r\n            }\r\n\r\n            if(validFunctions.Contains(val)) {\r\n                ctx.buffer.Append(char.ToUpper(val[0]) \u002B val.Substring(1));\r\n                return ctx.buffer;\r\n            }\r\n\r\n            string id = token.Value;\r\n            if(ctx.globalSymbolTable.Contains(token.Value) ||\r\n                          ctx.symbolTable.Contains(token.Value)) {\r\n                foreach (var r in replacementStrings) {\r\n                    id = id.Replace(r.Key, r.Value);\r\n                }\r\n                return ctx.buffer.Append(id);\r\n            } else {\r\n                throw new Exception($\u0022{token.Value} not a known identifier or function.\u0022);\r\n            }\r\n        }\r\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThere is a lot more that could be said about the parser. In the end, the implementation is not important. This one is far from perfect.\u003C/p\u003E\n\u003Ch2 id=\u0022practical-advice\u0022\u003EPractical advice\u003C/h2\u003E\n\u003Cp\u003EAs you build your own Source Generators, there are a few things that make the process smoother.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EWrite most code in a standard \u003Ccode\u003EConsole\u003C/code\u003E project. When you are happy with the result, copy and paste it to your source generator. This gives you a good developer experience (i.e., step line by line) for most of your work.\u003C/li\u003E\n\u003Cli\u003EOnce you have copied your code to the source generator, and if you still have problems, use \u003Ccode\u003EDebug.Launch\u003C/code\u003E to launch the debugger at the start of the \u003Ccode\u003EExecute\u003C/code\u003E function.\u003C/li\u003E\n\u003Cli\u003EVisual Studio currently has no ability to unload a source generator once loaded. Modifications to the generator itself will only take effect after you closed and reopened your solution.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThese are teething problems that hopefully will be fixed in new releases of Visual Studio. For now, you can use the above workarounds.\u003C/p\u003E\n\u003Ch2 id=\u0022conclusion\u0022\u003EConclusion\u003C/h2\u003E\n\u003Cp\u003ESource generators allow you to embed external DSLs into your C# project. This post shows how to do this for a simple mathematical language.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/using-c-source-generators-to-create-an-external-dsl/\u0022\u003EUsing C# Source Generators to create an external DSL\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/content:encoded\u003E\n\t\t\t\t\t\n\t\t\t\t\t\u003Cwfw:commentRss\u003Ehttps://devblogs.microsoft.com/dotnet/using-c-source-generators-to-create-an-external-dsl/feed/\u003C/wfw:commentRss\u003E\n\t\t\t\u003Cslash:comments\u003E5\u003C/slash:comments\u003E\n\t\t\n\t\t\n\t\t\t\u003C/item\u003E\n\t\t\u003Citem\u003E\n\t\t\u003Ctitle\u003EThe Plan for Entity Framework Core 6.0\u003C/title\u003E\n\t\t\u003Clink\u003Ehttps://devblogs.microsoft.com/dotnet/the-plan-for-entity-framework-core-6-0/\u003C/link\u003E\n\t\t\t\t\t\u003Ccomments\u003Ehttps://devblogs.microsoft.com/dotnet/the-plan-for-entity-framework-core-6-0/#comments\u003C/comments\u003E\n\t\t\n\t\t\u003Cdc:creator\u003E\u003C![CDATA[Jeremy Likness]]\u003E\u003C/dc:creator\u003E\n\t\t\u003CpubDate\u003EMon, 18 Jan 2021 16:00:54 \u002B0000\u003C/pubDate\u003E\n\t\t\t\t\u003Ccategory\u003E\u003C![CDATA[.NET]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[.NET Core]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[Entity Framework]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[announcement]]\u003E\u003C/category\u003E\n\t\t\u003Ccategory\u003E\u003C![CDATA[Entity Framework Core]]\u003E\u003C/category\u003E\n\t\t\u003Cguid isPermaLink=\u0022false\u0022\u003Ehttps://devblogs.microsoft.com/dotnet/?p=31573\u003C/guid\u003E\n\n\t\t\t\t\t\u003Cdescription\u003E\u003C![CDATA[\u003Cp\u003EToday we are excited to share with you the plan for Entity Framework Core 6.0.\u003C/p\u003E\n\u003Cp\u003EThis plan brings together input from many stakeholders and outlines where and how we intend to invest for the Entity Framework (EF Core) 6.0 release.\u003Cbr /\u003E\nThis plan is not set-in-stone and will evolve as we work on the release based on what we learn.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/the-plan-for-entity-framework-core-6-0/\u0022\u003EThe Plan for Entity Framework Core 6.0\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/description\u003E\n\t\t\t\t\t\t\t\t\t\t\u003Ccontent:encoded\u003E\u003C![CDATA[\u003Cp\u003EToday we are excited to share with you \u003Ca href=\u0022https://docs.microsoft.com/ef/core/what-is-new/ef-core-6.0/plan\u0022\u003Ethe plan for Entity Framework Core 6.0\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2021/01/efcore6.png\u0022 alt=\u0022EF Core 6.0\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThis plan brings together input from many stakeholders and outlines where and how we intend to invest for the Entity Framework (EF Core) 6.0 release.\nThis plan is not set-in-stone and will evolve as we work on the release based on what we learn. This learning includes feedback from people like you,\nso please let us know what you think!\u003C/p\u003E\n\u003Cblockquote\u003E\u003Cp\u003E\u003Cstrong\u003EIMPORTANT\u003C/strong\u003E\nThis plan is not a commitment. It is a starting point that will evolve as we learn more. Some things not currently planned for 6.0 may get pulled in.\nSome things currently planned for 6.0 may get punted out.\u003C/p\u003E\u003C/blockquote\u003E\n\u003Ch2 id=\u0022general-information\u0022\u003EGeneral information\u003C/h2\u003E\n\u003Cp\u003EEF Core 6.0 is the next release after EF Core 5.0 and is currently scheduled for November 2021 at the same time as .NET 6. EF Core 6.0 will align with .NET 6 as\na \u003Ca href=\u0022https://dotnet.microsoft.com/platform/support/policy/dotnet-core\u0022\u003Elong-term support (LTS) release\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EEF Core 6.0 will likely target .NET 6 when released. It is unlikely to support any .NET Standard version. It will not run on .NET Framework.\nSee \u003Ca href=\u0022https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/\u0022\u003Ethe future of .NET Standard\u003C/a\u003E for more information.\u003C/p\u003E\n\u003Ch2 id=\u0022themes\u0022\u003EThemes\u003C/h2\u003E\n\u003Ch3 id=\u0022highly-requested-features\u0022\u003EHighly requested features\u003C/h3\u003E\n\u003Cp\u003EAs always, a major input into the \u003Ca href=\u0022https://docs.microsoft.com/ef/core/what-is-new/release-planning\u0022\u003Eplanning process\u003C/a\u003E comes from the \u003Ca href=\u0022https://github.com/dotnet/efcore/issues?q=is%3Aissue\u002Bis%3Aopen\u002Bsort%3Areactions-%2B1-desc\u0022\u003Evoting (\u003Cimg src=\u0022https://s.w.org/images/core/emoji/13.0.1/72x72/1f44d.png\u0022 alt=\u0022\uD83D\uDC4D\u0022 class=\u0022wp-smiley\u0022 style=\u0022height: 1em; max-height: 1em;\u0022 /\u003E) for features on GitHub\u003C/a\u003E. For EF Core 6.0 we plan to work on the following highly requested features:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ESQL Server temporal tables\n\u003Cul\u003E\n\u003Cli\u003EAllow temporal tables to be created via Migrations, as well as allowing access to historical data through LINQ queries.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003EJSON columns\n\u003Cul\u003E\n\u003Cli\u003EIntroduce common patterns for JSON support that can be implemented by any database provider.\u003C/li\u003E\n\u003Cli\u003EJSON column support will be implemented for SQL Server and SQLite. (Note that the PostgreSQL and MySQL providers already support JSON columns.)\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Ccode\u003EColumnAttribute.Order\u003C/code\u003E\n\u003Cul\u003E\n\u003Cli\u003EAllow arbitrary ordering of columns when \u003Cem\u003Ecreating a table\u003C/em\u003E with Migrations or \u003Ccode\u003EEnsureCreated\u003C/code\u003E.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3 id=\u0022performance\u0022\u003EPerformance\u003C/h3\u003E\n\u003Cp\u003EWhile EF Core is generally faster than EF6, there are still areas where significant improvements in performance are possible. We plan to tackle several of these areas in EF Core 6.0, while also improving our perf infrastructure and testing.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EPerformance infrastructure and new tests\n\u003Cul\u003E\n\u003Cli\u003EImprove the infrastructure for performance tests as well as adding new tests and fixing low-hanging fruit.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003ECompiled models\n\u003Cul\u003E\n\u003Cli\u003ECompiled models will improve startup performance, as well as having generally better performance when accessing the model.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003ETechEmpower Fortunes\n\u003Cul\u003E\n\u003Cli\u003EWe plan to match Dapper performance on the TechEmpower Fortunes benchmark. (This is a significant challenge which will likely not be fully achieved. Nevertheless, we will get as close as we can.)\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003ELinker/AOT\n\u003Cul\u003E\n\u003Cli\u003EWe will continue investigating in making EF Core work better with linkers and AOT. We do not expect to fully close the gap in the 6.0 timeframe, but we hope to make significant progress.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3 id=\u0022migrations-and-deployment\u0022\u003EMigrations and deployment\u003C/h3\u003E\n\u003Cp\u003EFollowing on from the \u003Ca href=\u0022https://docs.microsoft.com/ef/core/what-is-new/ef-core-5.0/plan#migrations-and-deployment-experience\u0022\u003Einvestigations done for EF Core 5.0\u003C/a\u003E, we plan to introduce improved support for managing migrations and deploying databases. This includes two major areas:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EMigrations bundles\n\u003Cul\u003E\n\u003Cli\u003EMigrations bundles will provide a simple, robust mechanism for deploying EF Core migrations.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003EManaging migrations\n\u003Cul\u003E\n\u003Cli\u003EWe plan to improve the tools and project/assembly management for EF Core migrations.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3 id=\u0022improve-existing-features-and-fix-bugs\u0022\u003EImprove existing features and fix bugs\u003C/h3\u003E\n\u003Cul\u003E\n\u003Cli\u003EEF6 query parity\n\u003Cul\u003E\n\u003Cli\u003EWe plan to close the query gap to EF6 and make supported EF Core queries a true superset of supported EF6 queries.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003EValue objects\n\u003Cul\u003E\n\u003Cli\u003EWe plan to introduce a better experience focused on the needs of value objects in domain-driven design.\u003C/li\u003E\n\u003Cli\u003EThis approach will be based on value converters rather than owned entities which have proved not to be a good fit.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003ECosmos database provider\n\u003Cul\u003E\n\u003Cli\u003EWe are actively gathering feedback on which improvements to make to the Cosmos provider in EF Core 6.0; please make sure to vote (\u003Cimg src=\u0022https://s.w.org/images/core/emoji/13.0.1/72x72/1f44d.png\u0022 alt=\u0022\uD83D\uDC4D\u0022 class=\u0022wp-smiley\u0022 style=\u0022height: 1em; max-height: 1em;\u0022 /\u003E) for the Cosmos features that you need.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003EExpose model building conventions to applications\n\u003Cul\u003E\n\u003Cli\u003EModel building conventions are currently controlled by the database provider. In EF Core 6.0, we intend to allow applications to hook into and change these conventions.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003EZero bug balance (ZBB)\n\u003Cul\u003E\n\u003Cli\u003EWe plan to fix all outstanding non-blocked bugs during the EF Core 6.0 timeframe.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003EMiscellaneous smaller features\n\u003Cul\u003E\n\u003Cli\u003ESplit query for non-navigation collections\u003C/li\u003E\n\u003Cli\u003EDetect simple join tables in reverse engineering and create many-to-many relationships\u003C/li\u003E\n\u003Cli\u003EComplete full/free-text search on SQLite and SQL Server\u003C/li\u003E\n\u003Cli\u003ESQL Server Spatial Indexes\u003C/li\u003E\n\u003Cli\u003EMechanism/API to specify a default conversion for any property of a given type in the model\u003C/li\u003E\n\u003Cli\u003EUse the new batching API from ADO.NET\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3 id=\u0022net-integration\u0022\u003E.NET integration\u003C/h3\u003E\n\u003Cp\u003EThe EF Core team also works on several related but independent .NET Data technologies. In particular, we plan to work on:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EEnhancements to \u003Ccode\u003ESystem.Data\u003C/code\u003E\n\u003Cul\u003E\n\u003Cli\u003EImplementation of the new batching API\u003C/li\u003E\n\u003Cli\u003EContinued work with other .NET teams and the community to understand and evolve ADO.NET\u003C/li\u003E\n\u003Cli\u003EStandardize on \u003Ccode\u003EDiagnosticSource\u003C/code\u003E for tracing in \u003Ccode\u003ESystem.Data\u003C/code\u003E components\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003EEnhancements to \u003Ccode\u003EMicrosoft.Data.Sqlite\u003C/code\u003E\n\u003Cul\u003E\n\u003Cli\u003EConnection pooling\u003C/li\u003E\n\u003Cli\u003EPrepared statements\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003ENullable reference types\n\u003Cul\u003E\n\u003Cli\u003EWe will annotate the EF Core code to use \u003Ca href=\u0022https://docs.microsoft.com/dotnet/csharp/nullable-references\u0022\u003Enullable reference types\u003C/a\u003E.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3 id=\u0022experiments-and-investigations\u0022\u003EExperiments and investigations\u003C/h3\u003E\n\u003Cp\u003EThe EF team is planning to invest time during the EF Core 6.0 timeframe experimenting and investigating in two areas. This is a learning process and as such no concrete deliverables are planned for the 6.0 release.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ESqlServer.Core\n\u003Cul\u003E\n\u003Cli\u003EAn experiment in collaboration with the community to determine what potential there is modern .NET features in a highly performant SQL Server driver.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003EGraphQL\n\u003Cul\u003E\n\u003Cli\u003EWe plan to investigate the space and collaborate with the community to find ways to improve the experience of using \u003Ca href=\u0022https://graphql.org/\u0022\u003EGraphQL\u003C/a\u003E with .NET.\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch2 id=\u0022find-out-more\u0022\u003EFind out more\u003C/h2\u003E\n\u003Cp\u003EThis post is a brief summary of the \u003Ca href=\u0022https://docs.microsoft.com/ef/core/what-is-new/ef-core-6.0/plan\u0022\u003Efull EF Core 6.0 Plan\u003C/a\u003E. Please see the full plan for more information.\u003C/p\u003E\n\u003Ch2 id=\u0022suggestions\u0022\u003ESuggestions\u003C/h2\u003E\n\u003Cp\u003EYour feedback on planning is important. The best way to indicate the importance of an issue is to vote (\u003Cimg src=\u0022https://s.w.org/images/core/emoji/13.0.1/72x72/1f44d.png\u0022 alt=\u0022\uD83D\uDC4D\u0022 class=\u0022wp-smiley\u0022 style=\u0022height: 1em; max-height: 1em;\u0022 /\u003E) for that \u003Ca href=\u0022https://github.com/dotnet/efcore/issues\u0022\u003Eissue on GitHub\u003C/a\u003E.\nThis data will then feed into the \u003Ca href=\u0022https://docs.microsoft.com/ef/core/what-is-new/release-planning\u0022\u003Eplanning process\u003C/a\u003E for the next release.\u003C/p\u003E\n\u003Cp\u003EIn addition, please comment on this post if you believe we are missing something that is critical for EF Core 6.0, or are focusing on the wrong areas.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/the-plan-for-entity-framework-core-6-0/\u0022\u003EThe Plan for Entity Framework Core 6.0\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n]]\u003E\u003C/content:encoded\u003E\n\t\t\t\t\t\n\t\t\t\t\t\u003Cwfw:commentRss\u003Ehttps://devblogs.microsoft.com/dotnet/the-plan-for-entity-framework-core-6-0/feed/\u003C/wfw:commentRss\u003E\n\t\t\t\u003Cslash:comments\u003E23\u003C/slash:comments\u003E\n\t\t\n\t\t\n\t\t\t\u003C/item\u003E\n\t\u003C/channel\u003E\n\u003C/rss\u003E\n","resources":[{"id":"fc176401-654f-59c8-ae39-44378adb8127","display":"Survey: Library \u0026 Open Source","status-code":0,"created":"2021-02-24T16:05:19.9431734+00:00","is-active":false,"type":"","description":"\u003Cp\u003EAre you an open source maintainer, contributor or consumer? Or are you building NuGet packages? Please take this 10 minute survey to share your pain points and concerns so we can make your experience better!\u003Cbr /\u003E\nTake the .NET open source \u0026#38;\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/survey-library-open-source/\u0022\u003ESurvey: Library \u0026#038; Open Source\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n","self":"https://devblogs.microsoft.com/dotnet/survey-library-open-source/","published":"2021-02-22T18:00:18+00:00","cache":"","resources":[]},{"id":"884e1b81-34b5-584d-a8c0-ea3abeb77ef3","display":"Tune in for .NET Conf: Focus on Windows, February 25th","status-code":0,"created":"2021-02-24T16:05:19.9434993+00:00","is-active":false,"type":"","description":"\u003Cp\u003EThe .NET Conf team is bringing you another \u0026#8220;.NET Conf: Focus\u0026#8221; event Thursday, February 25 all about building Windows desktop apps. We have finalized the agenda, speakers, and hosts that will make the day educational and fun. We have .NET and Windows team members along with community speakers and MVPs to show you some amazing things you can do.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/tune-in-for-net-conf-focus-on-windows-february-25th/\u0022\u003ETune in for .NET Conf: Focus on Windows, February 25th\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n","self":"https://devblogs.microsoft.com/dotnet/tune-in-for-net-conf-focus-on-windows-february-25th/","published":"2021-02-22T16:05:02+00:00","cache":"","resources":[]},{"id":"50417dfe-b0ad-5ef9-bf74-5cd9c81f6993","display":"Announcing Entity Framework Core 6.0 Preview 1","status-code":0,"created":"2021-02-24T16:05:19.943514+00:00","is-active":false,"type":"","description":"\u003Cp\u003EToday, the Entity Framework Core team announces the first preview release of\u003Cbr /\u003E\nEF Core 6.0.\u003Cbr /\u003E\nThis release includes new attributes, built-in functions, and database-specific improvements to SQLite and SQL Server capabilities.\u003Cbr /\u003E\nPrerequisites\u003C/p\u003E\n\u003Cp\u003EEF Core 6.0 currently targets .NET 5. This will likely be updated to .NET 6 as we near the release.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-1/\u0022\u003EAnnouncing Entity Framework Core 6.0 Preview 1\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n","self":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-1/","published":"2021-02-17T18:30:08+00:00","cache":"","resources":[]},{"id":"867dfcca-064f-5fe5-a352-60626ced9b61","display":"Announcing .NET 6 Preview 1","status-code":0,"created":"2021-02-24T16:05:19.9435216+00:00","is-active":false,"type":"","description":"\u003Cp\u003EToday, we are happy to deliver the first preview of .NET 6 and share what you can expect from the new release. We have been defining the overall shape of the release for the last few months, including a large set of new experiences and capabilities.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-1/\u0022\u003EAnnouncing .NET 6 Preview 1\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n","self":"https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-1/","published":"2021-02-17T18:13:59+00:00","cache":"","resources":[]},{"id":"ee0e25c6-18b7-5510-bc2b-9b1fdf5e14a6","display":".NET Framework February 2021 Cumulative Update Preview for .NET Framework.","status-code":0,"created":"2021-02-24T16:05:19.9435282+00:00","is-active":false,"type":"","description":"\u003Cp\u003EYesterday, we released the February 2021 Cumulative Update Preview for .NET Framework.\u003Cbr /\u003E\nQuality and Reliability\u003Cbr /\u003E\nThis release contains the following quality and reliability improvements.\u003Cbr /\u003E\nCLR1\u003C/p\u003E\n\u003Cp\u003EAddresses an issue where the entire process would be torn down when a NullReferenceException propagated out of an exception filter.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-february-2021-cumulative-update-preview-for-net-framework/\u0022\u003E.NET Framework February 2021 Cumulative Update Preview for .NET Framework.\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n","self":"https://devblogs.microsoft.com/dotnet/net-framework-february-2021-cumulative-update-preview-for-net-framework/","published":"2021-02-17T15:05:57+00:00","cache":"","resources":[]},{"id":"d64bc5a5-f2d2-572c-bfbf-b99e5340c0d9","display":"Staying safe with .NET containers","status-code":0,"created":"2021-02-24T16:05:19.9435361+00:00","is-active":false,"type":"","description":"\u003Cp\u003EContainer-based application deployment and execution has become very common. Nearly all cloud and server app developers we talk to use containers in some way. We mostly hear about public cloud use, but also IoT and have even heard of .NET containers pulled and used over satellite links on cruise ships.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/staying-safe-with-dotnet-containers/\u0022\u003EStaying safe with .NET containers\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n","self":"https://devblogs.microsoft.com/dotnet/staying-safe-with-dotnet-containers/","published":"2021-02-11T19:01:56+00:00","cache":"","resources":[]},{"id":"727af294-4a57-5d4f-98d5-36ad2422f10f","display":".NET Framework February Security and Quality Rollup","status-code":0,"created":"2021-02-24T16:05:19.9435428+00:00","is-active":false,"type":"","description":"\u003Cp\u003EToday, we are releasing the February 2021 Security and Quality Rollup Updates for .NET Framework.\u003Cbr /\u003E\nSecurity\u003Cbr /\u003E\nCVE-2021-24111\u2013 .NET Framework Denial of Service Vulnerability\u003Cbr /\u003E\nThis security update addresses a denial of service vulnerability in .NET Framework. For more information please see CVE-2021-24111.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/net-framework-february-security-and-quality-rollup/\u0022\u003E.NET Framework February Security and Quality Rollup\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n","self":"https://devblogs.microsoft.com/dotnet/net-framework-february-security-and-quality-rollup/","published":"2021-02-10T00:42:45+00:00","cache":"","resources":[]},{"id":"408084d4-0954-57d3-8419-040bfc1a3927","display":".NET February 2021 Updates \u2013 5.0.3, 3.1.12, 2.1.25","status-code":0,"created":"2021-02-24T16:05:19.9435494+00:00","is-active":false,"type":"","description":"\u003Cp\u003EToday, we are releasing the .NET February 2021 Updates. These updates contains reliability and security improvements. See the individual release notes for details on updated packages.\u003Cbr /\u003E\nYou can download 5.0.3\u00A0, 3.1.12, 2.1.25 versions for Windows, macOS, and Linux, for x86,\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/net-february-2021/\u0022\u003E.NET February 2021 Updates \u2013 5.0.3, 3.1.12, 2.1.25\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n","self":"https://devblogs.microsoft.com/dotnet/net-february-2021/","published":"2021-02-09T18:24:20+00:00","cache":"","resources":[]},{"id":"3316aea4-0c83-5e26-8502-146a89bc2883","display":"Using C# Source Generators to create an external DSL","status-code":0,"created":"2021-02-24T16:05:19.9435583+00:00","is-active":false,"type":"","description":"\u003Cp\u003EThis post looks at how to use C# Source Generators to build an external DSL to represent mathematical expressions.\u003Cbr /\u003E\nThe code for this post is on the roslyn-sdk repository.\u003Cbr /\u003E\nA recap of C# Source Generators\u003Cbr /\u003E\nThere are two other articles describing C# Source Generators on this blog,\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/using-c-source-generators-to-create-an-external-dsl/\u0022\u003EUsing C# Source Generators to create an external DSL\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n","self":"https://devblogs.microsoft.com/dotnet/using-c-source-generators-to-create-an-external-dsl/","published":"2021-01-27T19:35:09+00:00","cache":"","resources":[]},{"id":"2ebb457c-a8f1-524f-9016-1cc3407e6a68","display":"The Plan for Entity Framework Core 6.0","status-code":0,"created":"2021-02-24T16:05:19.9435653+00:00","is-active":false,"type":"","description":"\u003Cp\u003EToday we are excited to share with you the plan for Entity Framework Core 6.0.\u003C/p\u003E\n\u003Cp\u003EThis plan brings together input from many stakeholders and outlines where and how we intend to invest for the Entity Framework (EF Core) 6.0 release.\u003Cbr /\u003E\nThis plan is not set-in-stone and will evolve as we work on the release based on what we learn.\u003C/p\u003E\n\u003Cp\u003EThe post \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet/the-plan-for-entity-framework-core-6-0/\u0022\u003EThe Plan for Entity Framework Core 6.0\u003C/a\u003E appeared first on \u003Ca rel=\u0022nofollow\u0022 href=\u0022https://devblogs.microsoft.com/dotnet\u0022\u003E.NET Blog\u003C/a\u003E.\u003C/p\u003E\n","self":"https://devblogs.microsoft.com/dotnet/the-plan-for-entity-framework-core-6-0/","published":"2021-01-18T16:00:54+00:00","cache":"","resources":[]}]}

### GET Resource
GET http://{{api-service}}/api/resources/{{resource-id}}


### GET Resource Cache
GET http://{{api-service}}/api/resources/{{resource-id}}/cache